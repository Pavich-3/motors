
motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08004dd4  08004dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005240  08005240  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08005248  08005248  00006248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005250  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000064  080052b4  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  080052b4  0000773c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f9e  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2d  00000000  00000000  0001f032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00021e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a12  00000000  00000000  00022b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019540  00000000  00000000  0002356a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a3d  00000000  00000000  0003caaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915c8  00000000  00000000  0004f4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0aaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  000e0af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e465c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004dbc 	.word	0x08004dbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08004dbc 	.word	0x08004dbc

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000854:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000858:	f000 b988 	b.w	8000b6c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	468e      	mov	lr, r1
 800087c:	4604      	mov	r4, r0
 800087e:	4688      	mov	r8, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d962      	bls.n	8000950 <__udivmoddi4+0xdc>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	b14e      	cbz	r6, 80008a4 <__udivmoddi4+0x30>
 8000890:	f1c6 0320 	rsb	r3, r6, #32
 8000894:	fa01 f806 	lsl.w	r8, r1, r6
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	40b7      	lsls	r7, r6
 800089e:	ea43 0808 	orr.w	r8, r3, r8
 80008a2:	40b4      	lsls	r4, r6
 80008a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a8:	fa1f fc87 	uxth.w	ip, r7
 80008ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80008b0:	0c23      	lsrs	r3, r4, #16
 80008b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ba:	fb01 f20c 	mul.w	r2, r1, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80008c8:	f080 80ea 	bcs.w	8000aa0 <__udivmoddi4+0x22c>
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f240 80e7 	bls.w	8000aa0 <__udivmoddi4+0x22c>
 80008d2:	3902      	subs	r1, #2
 80008d4:	443b      	add	r3, r7
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	b2a3      	uxth	r3, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ea:	459c      	cmp	ip, r3
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x8e>
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80008f4:	f080 80d6 	bcs.w	8000aa4 <__udivmoddi4+0x230>
 80008f8:	459c      	cmp	ip, r3
 80008fa:	f240 80d3 	bls.w	8000aa4 <__udivmoddi4+0x230>
 80008fe:	443b      	add	r3, r7
 8000900:	3802      	subs	r0, #2
 8000902:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000906:	eba3 030c 	sub.w	r3, r3, ip
 800090a:	2100      	movs	r1, #0
 800090c:	b11d      	cbz	r5, 8000916 <__udivmoddi4+0xa2>
 800090e:	40f3      	lsrs	r3, r6
 8000910:	2200      	movs	r2, #0
 8000912:	e9c5 3200 	strd	r3, r2, [r5]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d905      	bls.n	800092a <__udivmoddi4+0xb6>
 800091e:	b10d      	cbz	r5, 8000924 <__udivmoddi4+0xb0>
 8000920:	e9c5 0100 	strd	r0, r1, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	4608      	mov	r0, r1
 8000928:	e7f5      	b.n	8000916 <__udivmoddi4+0xa2>
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	d146      	bne.n	80009c0 <__udivmoddi4+0x14c>
 8000932:	4573      	cmp	r3, lr
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xc8>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 8105 	bhi.w	8000b46 <__udivmoddi4+0x2d2>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000942:	2001      	movs	r0, #1
 8000944:	4690      	mov	r8, r2
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e5      	beq.n	8000916 <__udivmoddi4+0xa2>
 800094a:	e9c5 4800 	strd	r4, r8, [r5]
 800094e:	e7e2      	b.n	8000916 <__udivmoddi4+0xa2>
 8000950:	2a00      	cmp	r2, #0
 8000952:	f000 8090 	beq.w	8000a76 <__udivmoddi4+0x202>
 8000956:	fab2 f682 	clz	r6, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	f040 80a4 	bne.w	8000aa8 <__udivmoddi4+0x234>
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	0c03      	lsrs	r3, r0, #16
 8000964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000968:	b280      	uxth	r0, r0
 800096a:	b2bc      	uxth	r4, r7
 800096c:	2101      	movs	r1, #1
 800096e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000972:	fb0e 221c 	mls	r2, lr, ip, r2
 8000976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097a:	fb04 f20c 	mul.w	r2, r4, ip
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x11e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x11c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 80e0 	bhi.w	8000b50 <__udivmoddi4+0x2dc>
 8000990:	46c4      	mov	ip, r8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	fbb3 f2fe 	udiv	r2, r3, lr
 8000998:	fb0e 3312 	mls	r3, lr, r2, r3
 800099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009a0:	fb02 f404 	mul.w	r4, r2, r4
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x144>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x142>
 80009b0:	429c      	cmp	r4, r3
 80009b2:	f200 80ca 	bhi.w	8000b4a <__udivmoddi4+0x2d6>
 80009b6:	4602      	mov	r2, r0
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009be:	e7a5      	b.n	800090c <__udivmoddi4+0x98>
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ca:	431f      	orrs	r7, r3
 80009cc:	fa0e f401 	lsl.w	r4, lr, r1
 80009d0:	fa20 f306 	lsr.w	r3, r0, r6
 80009d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009dc:	4323      	orrs	r3, r4
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	fa1f fc87 	uxth.w	ip, r7
 80009e6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80009f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f8:	45a6      	cmp	lr, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d909      	bls.n	8000a14 <__udivmoddi4+0x1a0>
 8000a00:	193c      	adds	r4, r7, r4
 8000a02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a06:	f080 809c 	bcs.w	8000b42 <__udivmoddi4+0x2ce>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f240 8099 	bls.w	8000b42 <__udivmoddi4+0x2ce>
 8000a10:	3802      	subs	r0, #2
 8000a12:	443c      	add	r4, r7
 8000a14:	eba4 040e 	sub.w	r4, r4, lr
 8000a18:	fa1f fe83 	uxth.w	lr, r3
 8000a1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a20:	fb09 4413 	mls	r4, r9, r3, r4
 8000a24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2c:	45a4      	cmp	ip, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1ce>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a36:	f080 8082 	bcs.w	8000b3e <__udivmoddi4+0x2ca>
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d97f      	bls.n	8000b3e <__udivmoddi4+0x2ca>
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a4e:	4564      	cmp	r4, ip
 8000a50:	4673      	mov	r3, lr
 8000a52:	46e1      	mov	r9, ip
 8000a54:	d362      	bcc.n	8000b1c <__udivmoddi4+0x2a8>
 8000a56:	d05f      	beq.n	8000b18 <__udivmoddi4+0x2a4>
 8000a58:	b15d      	cbz	r5, 8000a72 <__udivmoddi4+0x1fe>
 8000a5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a62:	fa04 f606 	lsl.w	r6, r4, r6
 8000a66:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a72:	2100      	movs	r1, #0
 8000a74:	e74f      	b.n	8000916 <__udivmoddi4+0xa2>
 8000a76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a7a:	0c01      	lsrs	r1, r0, #16
 8000a7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a80:	b280      	uxth	r0, r0
 8000a82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a86:	463b      	mov	r3, r7
 8000a88:	4638      	mov	r0, r7
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	46b8      	mov	r8, r7
 8000a8e:	46be      	mov	lr, r7
 8000a90:	2620      	movs	r6, #32
 8000a92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a96:	eba2 0208 	sub.w	r2, r2, r8
 8000a9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a9e:	e766      	b.n	800096e <__udivmoddi4+0xfa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	e718      	b.n	80008d6 <__udivmoddi4+0x62>
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	e72c      	b.n	8000902 <__udivmoddi4+0x8e>
 8000aa8:	f1c6 0220 	rsb	r2, r6, #32
 8000aac:	fa2e f302 	lsr.w	r3, lr, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ace:	fb08 f904 	mul.w	r9, r8, r4
 8000ad2:	40b0      	lsls	r0, r6
 8000ad4:	4589      	cmp	r9, r1
 8000ad6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ada:	b280      	uxth	r0, r0
 8000adc:	d93e      	bls.n	8000b5c <__udivmoddi4+0x2e8>
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ae4:	d201      	bcs.n	8000aea <__udivmoddi4+0x276>
 8000ae6:	4589      	cmp	r9, r1
 8000ae8:	d81f      	bhi.n	8000b2a <__udivmoddi4+0x2b6>
 8000aea:	eba1 0109 	sub.w	r1, r1, r9
 8000aee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af2:	fb09 f804 	mul.w	r8, r9, r4
 8000af6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000afa:	b292      	uxth	r2, r2
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d229      	bcs.n	8000b58 <__udivmoddi4+0x2e4>
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b0a:	d2c4      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b0c:	4542      	cmp	r2, r8
 8000b0e:	d2c2      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b10:	f1a9 0102 	sub.w	r1, r9, #2
 8000b14:	443a      	add	r2, r7
 8000b16:	e7be      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b18:	45f0      	cmp	r8, lr
 8000b1a:	d29d      	bcs.n	8000a58 <__udivmoddi4+0x1e4>
 8000b1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b24:	3801      	subs	r0, #1
 8000b26:	46e1      	mov	r9, ip
 8000b28:	e796      	b.n	8000a58 <__udivmoddi4+0x1e4>
 8000b2a:	eba7 0909 	sub.w	r9, r7, r9
 8000b2e:	4449      	add	r1, r9
 8000b30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b38:	fb09 f804 	mul.w	r8, r9, r4
 8000b3c:	e7db      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b3e:	4673      	mov	r3, lr
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1ce>
 8000b42:	4650      	mov	r0, sl
 8000b44:	e766      	b.n	8000a14 <__udivmoddi4+0x1a0>
 8000b46:	4608      	mov	r0, r1
 8000b48:	e6fd      	b.n	8000946 <__udivmoddi4+0xd2>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3a02      	subs	r2, #2
 8000b4e:	e733      	b.n	80009b8 <__udivmoddi4+0x144>
 8000b50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	e71c      	b.n	8000992 <__udivmoddi4+0x11e>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b5c:	eba1 0109 	sub.w	r1, r1, r9
 8000b60:	46c4      	mov	ip, r8
 8000b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b66:	fb09 f804 	mul.w	r8, r9, r4
 8000b6a:	e7c4      	b.n	8000af6 <__udivmoddi4+0x282>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <_ZN3GFXC1Ess>:
#include "GFX.hpp"

GFX::GFX(int16_t w, int16_t h) : _width(w), _height(h) {}
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	803b      	strh	r3, [r7, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <_ZN3GFXC1Ess+0x30>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	809a      	strh	r2, [r3, #4]
 8000b8c:	883a      	ldrh	r2, [r7, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	80da      	strh	r2, [r3, #6]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	08004e28 	.word	0x08004e28

08000ba4 <_ZN3GFX8drawLineEsssst>:

void GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	817b      	strh	r3, [r7, #10]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	813b      	strh	r3, [r7, #8]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	80fb      	strh	r3, [r7, #6]
	int16_t steep = abs(y1 - y0) > abs(x1 - y0);
 8000bbe:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8000bc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bcc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bd0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	429a      	cmp	r2, r3
 8000be2:	bfcc      	ite	gt
 8000be4:	2301      	movgt	r3, #1
 8000be6:	2300      	movle	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	837b      	strh	r3, [r7, #26]
	if (steep)
 8000bec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <_ZN3GFX8drawLineEsssst+0x68>
	{
		int16_t temp = x0; x0 = y0; y0 = temp;
 8000bf4:	897b      	ldrh	r3, [r7, #10]
 8000bf6:	833b      	strh	r3, [r7, #24]
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	817b      	strh	r3, [r7, #10]
 8000bfc:	8b3b      	ldrh	r3, [r7, #24]
 8000bfe:	813b      	strh	r3, [r7, #8]
		temp = x1; x1 = y1; y1 = temp;
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	833b      	strh	r3, [r7, #24]
 8000c04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000c06:	80fb      	strh	r3, [r7, #6]
 8000c08:	8b3b      	ldrh	r3, [r7, #24]
 8000c0a:	863b      	strh	r3, [r7, #48]	@ 0x30
	}

	if (x0 > x1)
 8000c0c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dd0b      	ble.n	8000c30 <_ZN3GFX8drawLineEsssst+0x8c>
	{
		int16_t temp = x0; x0 = x1; x1 = temp;
 8000c18:	897b      	ldrh	r3, [r7, #10]
 8000c1a:	82fb      	strh	r3, [r7, #22]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	817b      	strh	r3, [r7, #10]
 8000c20:	8afb      	ldrh	r3, [r7, #22]
 8000c22:	80fb      	strh	r3, [r7, #6]
		temp = y0; y0 = y1; y1 = temp;
 8000c24:	893b      	ldrh	r3, [r7, #8]
 8000c26:	82fb      	strh	r3, [r7, #22]
 8000c28:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000c2a:	813b      	strh	r3, [r7, #8]
 8000c2c:	8afb      	ldrh	r3, [r7, #22]
 8000c2e:	863b      	strh	r3, [r7, #48]	@ 0x30
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	897b      	ldrh	r3, [r7, #10]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	82bb      	strh	r3, [r7, #20]
	dy = abs(y1 - y0);
 8000c3a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8000c3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bfb8      	it	lt
 8000c48:	425b      	neglt	r3, r3
 8000c4a:	827b      	strh	r3, [r7, #18]

	int16_t err = dx / 2;
 8000c4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c50:	0fda      	lsrs	r2, r3, #31
 8000c52:	4413      	add	r3, r2
 8000c54:	105b      	asrs	r3, r3, #1
 8000c56:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8000c58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000c5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000c60:	429a      	cmp	r2, r3
 8000c62:	da02      	bge.n	8000c6a <_ZN3GFX8drawLineEsssst+0xc6>
		ystep = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	83bb      	strh	r3, [r7, #28]
 8000c68:	e037      	b.n	8000cda <_ZN3GFX8drawLineEsssst+0x136>
	else
		ystep = -1;
 8000c6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c6e:	83bb      	strh	r3, [r7, #28]

	for (; x0 <= x1; x0++)
 8000c70:	e033      	b.n	8000cda <_ZN3GFX8drawLineEsssst+0x136>
	{
		if (steep)
 8000c72:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00b      	beq.n	8000c92 <_ZN3GFX8drawLineEsssst+0xee>
			this->drawPixel(y0, x0, color);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3308      	adds	r3, #8
 8000c80:	681c      	ldr	r4, [r3, #0]
 8000c82:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000c84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c88:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	47a0      	blx	r4
 8000c90:	e00a      	b.n	8000ca8 <_ZN3GFX8drawLineEsssst+0x104>
		else
			this->drawPixel(x0, y0, color);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3308      	adds	r3, #8
 8000c98:	681c      	ldr	r4, [r3, #0]
 8000c9a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000c9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ca0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	47a0      	blx	r4
		err -= dy;
 8000ca8:	8bfa      	ldrh	r2, [r7, #30]
 8000caa:	8a7b      	ldrh	r3, [r7, #18]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8000cb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da09      	bge.n	8000cce <_ZN3GFX8drawLineEsssst+0x12a>
		{
			y0 += ystep;
 8000cba:	893a      	ldrh	r2, [r7, #8]
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	813b      	strh	r3, [r7, #8]
			err += dx;
 8000cc4:	8bfa      	ldrh	r2, [r7, #30]
 8000cc6:	8abb      	ldrh	r3, [r7, #20]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 8000cce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	817b      	strh	r3, [r7, #10]
 8000cda:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	ddc5      	ble.n	8000c72 <_ZN3GFX8drawLineEsssst+0xce>
		}
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3724      	adds	r7, #36	@ 0x24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd90      	pop	{r4, r7, pc}

08000cf0 <_ZN3GFX8drawRectEsssst>:

void GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	817b      	strh	r3, [r7, #10]
 8000d02:	460b      	mov	r3, r1
 8000d04:	813b      	strh	r3, [r7, #8]
 8000d06:	4613      	mov	r3, r2
 8000d08:	80fb      	strh	r3, [r7, #6]
    this->drawLine(x, y, x + w - 1, y, color);
 8000d0a:	897a      	ldrh	r2, [r7, #10]
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4413      	add	r3, r2
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b218      	sxth	r0, r3
 8000d18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d1c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000d20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff ff39 	bl	8000ba4 <_ZN3GFX8drawLineEsssst>
    this->drawLine(x, y + h - 1, x + w - 1, y + h - 1, color);
 8000d32:	893a      	ldrh	r2, [r7, #8]
 8000d34:	8c3b      	ldrh	r3, [r7, #32]
 8000d36:	4413      	add	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b218      	sxth	r0, r3
 8000d40:	897a      	ldrh	r2, [r7, #10]
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b21c      	sxth	r4, r3
 8000d4e:	893a      	ldrh	r2, [r7, #8]
 8000d50:	8c3b      	ldrh	r3, [r7, #32]
 8000d52:	4413      	add	r3, r2
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000d60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	4623      	mov	r3, r4
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff ff1a 	bl	8000ba4 <_ZN3GFX8drawLineEsssst>
    this->drawLine(x, y, x, y + h - 1, color);
 8000d70:	893a      	ldrh	r2, [r7, #8]
 8000d72:	8c3b      	ldrh	r3, [r7, #32]
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000d82:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8000d86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000d8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d8c:	9201      	str	r2, [sp, #4]
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	4623      	mov	r3, r4
 8000d92:	4602      	mov	r2, r0
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff ff05 	bl	8000ba4 <_ZN3GFX8drawLineEsssst>
    this->drawLine(x + w - 1, y, x + w - 1, y + h - 1, color);
 8000d9a:	897a      	ldrh	r2, [r7, #10]
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4413      	add	r3, r2
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	3b01      	subs	r3, #1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	b219      	sxth	r1, r3
 8000da8:	897a      	ldrh	r2, [r7, #10]
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4413      	add	r3, r2
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	3b01      	subs	r3, #1
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b21c      	sxth	r4, r3
 8000db6:	893a      	ldrh	r2, [r7, #8]
 8000db8:	8c3b      	ldrh	r3, [r7, #32]
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8000dc8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dca:	9201      	str	r2, [sp, #4]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	4623      	mov	r3, r4
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f7ff fee6 	bl	8000ba4 <_ZN3GFX8drawLineEsssst>
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}

08000de0 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dea:	ed97 0a01 	vldr	s0, [r7, #4]
 8000dee:	f003 f9d7 	bl	80041a0 <cosf>
 8000df2:	eef0 7a40 	vmov.f32	s15, s0
 8000df6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e0a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e0e:	f003 fa0b 	bl	8004228 <sinf>
 8000e12:	eef0 7a40 	vmov.f32	s15, s0
 8000e16:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN3GFXD1Ev>:

class GFX
{
public:
	GFX(int16_t w, int16_t h);
	virtual ~GFX() = default;
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <_ZN3GFXD1Ev+0x1c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	08004e28 	.word	0x08004e28

08000e40 <_ZN3GFXD0Ev>:
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffe9 	bl	8000e20 <_ZN3GFXD1Ev>
 8000e4e:	2108      	movs	r1, #8
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f003 f9a0 	bl	8004196 <_ZdlPvj>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_ZN11OLED_DriverC1EP17I2C_HandleTypeDef>:
#include "OLED_Driver.hpp"
#include <math.h>

OLED_Driver::OLED_Driver(I2C_HandleTypeDef* i2cHandle) : GFX(OLED_WIDTH, OLED_HEIGHT), bus(i2cHandle)
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2240      	movs	r2, #64	@ 0x40
 8000e6e:	217c      	movs	r1, #124	@ 0x7c
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe7d 	bl	8000b70 <_ZN3GFXC1Ess>
 8000e76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <_ZN11OLED_DriverC1EP17I2C_HandleTypeDef+0x44>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3308      	adds	r3, #8
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fa62 	bl	800134c <_ZN7I2C_BusC1EP17I2C_HandleTypeDef>
{
	memset(framebuffer, 0 , sizeof(framebuffer));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	330c      	adds	r3, #12
 8000e8c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 ff0c 	bl	8004cb0 <memset>
}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08004e3c 	.word	0x08004e3c

08000ea8 <_ZN11OLED_Driver5beginEv>:

void OLED_Driver::begin(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	this->sendCommand(0xAE);
 8000eb0:	21ae      	movs	r1, #174	@ 0xae
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f98e 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xD5);
 8000eb8:	21d5      	movs	r1, #213	@ 0xd5
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f98a 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xA8);
 8000ec0:	21a8      	movs	r1, #168	@ 0xa8
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f986 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xD3);
 8000ec8:	21d3      	movs	r1, #211	@ 0xd3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f982 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0x40);
 8000ed0:	2140      	movs	r1, #64	@ 0x40
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f97e 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0x8D);
 8000ed8:	218d      	movs	r1, #141	@ 0x8d
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f97a 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0x20);
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f976 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xA1);
 8000ee8:	21a1      	movs	r1, #161	@ 0xa1
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f972 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xC8);
 8000ef0:	21c8      	movs	r1, #200	@ 0xc8
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f96e 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xDA);
 8000ef8:	21da      	movs	r1, #218	@ 0xda
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f96a 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0x81);
 8000f00:	2181      	movs	r1, #129	@ 0x81
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f966 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xD9);
 8000f08:	21d9      	movs	r1, #217	@ 0xd9
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f962 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xDB);
 8000f10:	21db      	movs	r1, #219	@ 0xdb
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f95e 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xA4);
 8000f18:	21a4      	movs	r1, #164	@ 0xa4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f95a 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xA6);
 8000f20:	21a6      	movs	r1, #166	@ 0xa6
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f956 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0xAF);
 8000f28:	21af      	movs	r1, #175	@ 0xaf
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f952 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	clearDisplay();
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f82f 	bl	8000f94 <_ZN11OLED_Driver12clearDisplayEv>
	display();
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f804 	bl	8000f44 <_ZN11OLED_Driver7displayEv>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN11OLED_Driver7displayEv>:

void OLED_Driver::display(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	this->sendCommand(0x21);
 8000f4c:	2121      	movs	r1, #33	@ 0x21
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f940 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f93c 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(OLED_WIDTH - 1);
 8000f5c:	217b      	movs	r1, #123	@ 0x7b
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f938 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0x22);
 8000f64:	2122      	movs	r1, #34	@ 0x22
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f934 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f930 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(OLED_HEIGHT / 8 - 1);
 8000f74:	2107      	movs	r1, #7
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f92c 	bl	80011d4 <_ZN11OLED_Driver11sendCommandEh>
	this->sendData(framebuffer, sizeof(framebuffer));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	330c      	adds	r3, #12
 8000f80:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f93b 	bl	8001202 <_ZN11OLED_Driver8sendDataEPht>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN11OLED_Driver12clearDisplayEv>:

void OLED_Driver::clearDisplay()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	memset(framebuffer, 0, sizeof(framebuffer));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fe82 	bl	8004cb0 <memset>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN11OLED_Driver9drawPixelEsst>:

void OLED_Driver::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	817b      	strh	r3, [r7, #10]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	813b      	strh	r3, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80fb      	strh	r3, [r7, #6]
	uint16_t index = x + (y / 8) * OLED_WIDTH;
 8000fce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da00      	bge.n	8000fd8 <_ZN11OLED_Driver9drawPixelEsst+0x24>
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	10db      	asrs	r3, r3, #3
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	0152      	lsls	r2, r2, #5
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	4413      	add	r3, r2
 8000fec:	82fb      	strh	r3, [r7, #22]

	if (color)
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01b      	beq.n	800102c <_ZN11OLED_Driver9drawPixelEsst+0x78>
	   framebuffer[index] |= (1 << (y % 8));
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	7b1b      	ldrb	r3, [r3, #12]
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001002:	4259      	negs	r1, r3
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	f001 0107 	and.w	r1, r1, #7
 800100c:	bf58      	it	pl
 800100e:	424b      	negpl	r3, r1
 8001010:	b21b      	sxth	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	2301      	movs	r3, #1
 8001016:	408b      	lsls	r3, r1
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b25a      	sxtb	r2, r3
 800101e:	8afb      	ldrh	r3, [r7, #22]
 8001020:	b2d1      	uxtb	r1, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	460a      	mov	r2, r1
 8001028:	731a      	strb	r2, [r3, #12]
	else
	   framebuffer[index] &= ~(1 << (y % 8));

}
 800102a:	e01c      	b.n	8001066 <_ZN11OLED_Driver9drawPixelEsst+0xb2>
	   framebuffer[index] &= ~(1 << (y % 8));
 800102c:	8afb      	ldrh	r3, [r7, #22]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	7b1b      	ldrb	r3, [r3, #12]
 8001034:	b25a      	sxtb	r2, r3
 8001036:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800103a:	4259      	negs	r1, r3
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	f001 0107 	and.w	r1, r1, #7
 8001044:	bf58      	it	pl
 8001046:	424b      	negpl	r3, r1
 8001048:	b21b      	sxth	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	2301      	movs	r3, #1
 800104e:	408b      	lsls	r3, r1
 8001050:	b25b      	sxtb	r3, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	b25b      	sxtb	r3, r3
 8001056:	4013      	ands	r3, r2
 8001058:	b25a      	sxtb	r2, r3
 800105a:	8afb      	ldrh	r3, [r7, #22]
 800105c:	b2d1      	uxtb	r1, r2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	460a      	mov	r2, r1
 8001064:	731a      	strb	r2, [r3, #12]
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	0000      	movs	r0, r0
 8001074:	0000      	movs	r0, r0
	...

08001078 <_ZN11OLED_Driver9drawServoEt>:

void OLED_Driver::drawServo(uint16_t angle_deg)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	ed2d 8b02 	vpush	{d8}
 800107e:	b08b      	sub	sp, #44	@ 0x2c
 8001080:	af02      	add	r7, sp, #8
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
	int16_t centerX = _width / 2;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	889b      	ldrh	r3, [r3, #4]
 800108c:	085b      	lsrs	r3, r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	83fb      	strh	r3, [r7, #30]
	int16_t centerY = _height / 2;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	88db      	ldrh	r3, [r3, #6]
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	83bb      	strh	r3, [r7, #28]

	int16_t bodyWidth = 40;
 800109c:	2328      	movs	r3, #40	@ 0x28
 800109e:	837b      	strh	r3, [r7, #26]
	int16_t bodyHeight = 24;
 80010a0:	2318      	movs	r3, #24
 80010a2:	833b      	strh	r3, [r7, #24]
	int16_t armLength = 28;
 80010a4:	231c      	movs	r3, #28
 80010a6:	82fb      	strh	r3, [r7, #22]

	this->clearDisplay();
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff73 	bl	8000f94 <_ZN11OLED_Driver12clearDisplayEv>
	this->drawRect(centerX - bodyWidth / 2, centerY - bodyHeight / 2, bodyWidth, bodyHeight, 1);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	8bfa      	ldrh	r2, [r7, #30]
 80010b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010b6:	0fd9      	lsrs	r1, r3, #31
 80010b8:	440b      	add	r3, r1
 80010ba:	105b      	asrs	r3, r3, #1
 80010bc:	b21b      	sxth	r3, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b21c      	sxth	r4, r3
 80010c6:	8bba      	ldrh	r2, [r7, #28]
 80010c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010cc:	0fd9      	lsrs	r1, r3, #31
 80010ce:	440b      	add	r3, r1
 80010d0:	105b      	asrs	r3, r3, #1
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	460b      	mov	r3, r1
 80010ec:	4621      	mov	r1, r4
 80010ee:	f7ff fdff 	bl	8000cf0 <_ZN3GFX8drawRectEsssst>

	float angle_rad = (angle_deg - 90.0f) * (M_PI / 180.0f);
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80011d0 <_ZN11OLED_Driver9drawServoEt+0x158>
 8001100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001104:	ee17 0a90 	vmov	r0, s15
 8001108:	f7ff faf4 	bl	80006f4 <__aeabi_f2d>
 800110c:	a32e      	add	r3, pc, #184	@ (adr r3, 80011c8 <_ZN11OLED_Driver9drawServoEt+0x150>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f861 	bl	80001d8 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fb41 	bl	80007a4 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	613b      	str	r3, [r7, #16]
	int16_t endX = centerX + armLength * cos(angle_rad);
 8001126:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800113e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001142:	f7ff fe4d 	bl	8000de0 <_ZSt3cosf>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800114e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001156:	ee17 3a90 	vmov	r3, s15
 800115a:	81fb      	strh	r3, [r7, #14]
	int16_t endY = centerY + armLength * sin(angle_rad);
 800115c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001174:	ed97 0a04 	vldr	s0, [r7, #16]
 8001178:	f7ff fe42 	bl	8000e00 <_ZSt3sinf>
 800117c:	eef0 7a40 	vmov.f32	s15, s0
 8001180:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001184:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118c:	ee17 3a90 	vmov	r3, s15
 8001190:	81bb      	strh	r3, [r7, #12]

	this->drawLine(centerX, centerY, endX, endY, 1);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001198:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800119c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4623      	mov	r3, r4
 80011ac:	f7ff fcfa 	bl	8000ba4 <_ZN3GFX8drawLineEsssst>

	this->display();
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fec7 	bl	8000f44 <_ZN11OLED_Driver7displayEv>
}
 80011b6:	bf00      	nop
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	ecbd 8b02 	vpop	{d8}
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	f3af 8000 	nop.w
 80011c8:	a2529d39 	.word	0xa2529d39
 80011cc:	3f91df46 	.word	0x3f91df46
 80011d0:	42b40000 	.word	0x42b40000

080011d4 <_ZN11OLED_Driver11sendCommandEh>:

void OLED_Driver::sendCommand(uint8_t cmd)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0x00, cmd};
 80011e0:	2300      	movs	r3, #0
 80011e2:	81bb      	strh	r3, [r7, #12]
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	737b      	strb	r3, [r7, #13]
	this->bus.write(OLED_I2C_ADDR, buffer, 2);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0008 	add.w	r0, r3, #8
 80011ee:	f107 020c 	add.w	r2, r7, #12
 80011f2:	2302      	movs	r3, #2
 80011f4:	213c      	movs	r1, #60	@ 0x3c
 80011f6:	f000 f8f7 	bl	80013e8 <_ZN7I2C_Bus5writeEhPht>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_ZN11OLED_Driver8sendDataEPht>:

void OLED_Driver::sendData(uint8_t* data, uint16_t size)
{
 8001202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	80fb      	strh	r3, [r7, #6]
	uint8_t transmit_buffer[size + 1];
	transmit_buffer[0] = 0x40;
	memcpy(transmit_buffer + 1, data, size);
	this->bus.write(OLED_I2C_ADDR, transmit_buffer, size + 1);
}
 8001212:	466b      	mov	r3, sp
 8001214:	461e      	mov	r6, r3
	uint8_t transmit_buffer[size + 1];
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	1c59      	adds	r1, r3, #1
 800121a:	1e4b      	subs	r3, r1, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	460a      	mov	r2, r1
 8001220:	2300      	movs	r3, #0
 8001222:	4690      	mov	r8, r2
 8001224:	4699      	mov	r9, r3
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800123a:	460a      	mov	r2, r1
 800123c:	2300      	movs	r3, #0
 800123e:	4614      	mov	r4, r2
 8001240:	461d      	mov	r5, r3
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	00eb      	lsls	r3, r5, #3
 800124c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001250:	00e2      	lsls	r2, r4, #3
 8001252:	460b      	mov	r3, r1
 8001254:	3307      	adds	r3, #7
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	ebad 0d03 	sub.w	sp, sp, r3
 800125e:	466b      	mov	r3, sp
 8001260:	3300      	adds	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
	transmit_buffer[0] = 0x40;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2240      	movs	r2, #64	@ 0x40
 8001268:	701a      	strb	r2, [r3, #0]
	memcpy(transmit_buffer + 1, data, size);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fd4a 	bl	8004d0c <memcpy>
	this->bus.write(OLED_I2C_ADDR, transmit_buffer, size + 1);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f103 0008 	add.w	r0, r3, #8
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	213c      	movs	r1, #60	@ 0x3c
 8001288:	f000 f8ae 	bl	80013e8 <_ZN7I2C_Bus5writeEhPht>
 800128c:	46b5      	mov	sp, r6
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001298 <_ZN11OLED_DriverD1Ev>:
#define OLED_I2C_ADDR 0x3C
#define OLED_WIDTH 124
#define OLED_HEIGHT 64


class OLED_Driver : public GFX
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <_ZN11OLED_DriverD1Ev+0x20>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdb9 	bl	8000e20 <_ZN3GFXD1Ev>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08004e3c 	.word	0x08004e3c

080012bc <_ZN11OLED_DriverD0Ev>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffe7 	bl	8001298 <_ZN11OLED_DriverD1Ev>
 80012ca:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f002 ff61 	bl	8004196 <_ZdlPvj>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <Encoder_Init>:
#include <encoder.hpp>

HAL_StatusTypeDef Encoder_Init(TIM_HandleTypeDef *timHandle)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	timHandle->Instance = ENCODER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ee:	601a      	str	r2, [r3, #0]
	timHandle->Init.Prescaler = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
	timHandle->Init.Period = ENCODER_MAX;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	22b4      	movs	r2, #180	@ 0xb4
 80012fa:	60da      	str	r2, [r3, #12]
	timHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
	timHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]

	TIM_Encoder_InitTypeDef sConfig = {
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <Encoder_Init+0x68>)
 800130a:	f107 040c 	add.w	r4, r7, #12
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	6023      	str	r3, [r4, #0]
		.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING,
		.IC2Selection = TIM_ICSELECTION_DIRECTTI,
		.IC2Prescaler = TIM_ICPSC_DIV1,
		.IC2Filter = 1
	};
	if (HAL_TIM_Encoder_Init(timHandle, &sConfig) != HAL_OK) Error_Handler();
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f002 fb0a 	bl	800393c <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <Encoder_Init+0x5c>
 8001338:	f000 fba0 	bl	8001a7c <Error_Handler>

	return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3730      	adds	r7, #48	@ 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bdb0      	pop	{r4, r5, r7, pc}
 8001346:	bf00      	nop
 8001348:	08004dd4 	.word	0x08004dd4

0800134c <_ZN7I2C_BusC1EP17I2C_HandleTypeDef>:
#include <i2c.hpp>

extern DMA_HandleTypeDef hdma_i2c;

I2C_Bus::I2C_Bus(I2C_HandleTypeDef* i2cHandle) : i2cHandle(i2cHandle) {}
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <_ZN7I2C_Bus7i2cInitEv>:

HAL_StatusTypeDef I2C_Bus::i2cInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	i2cHandle->Instance = I2C1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <_ZN7I2C_Bus7i2cInitEv+0x74>)
 800137a:	601a      	str	r2, [r3, #0]
	i2cHandle->Init.ClockSpeed = 400000;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <_ZN7I2C_Bus7i2cInitEv+0x78>)
 8001382:	605a      	str	r2, [r3, #4]
	i2cHandle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
	i2cHandle->Init.OwnAddress1 = 0;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
	i2cHandle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139c:	611a      	str	r2, [r3, #16]
	i2cHandle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
	i2cHandle->Init.OwnAddress2 = 0;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
	i2cHandle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
	i2cHandle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2cHandle) != HAL_OK) this->Error_Handler();
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 f904 	bl	80025d0 <HAL_I2C_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <_ZN7I2C_Bus7i2cInitEv+0x72>
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f81e 	bl	800141a <_ZN7I2C_Bus13Error_HandlerEv>
 80013de:	deff      	udf	#255	@ 0xff
 80013e0:	40005400 	.word	0x40005400
 80013e4:	00061a80 	.word	0x00061a80

080013e8 <_ZN7I2C_Bus5writeEhPht>:
			__HAL_LINKDMA(i2cHandle, hdmarx, hdma_i2c);
		}
}

HAL_StatusTypeDef I2C_Bus::write(uint8_t device_addr, uint8_t* data, uint16_t size)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	461a      	mov	r2, r3
 80013f4:	460b      	mov	r3, r1
 80013f6:	72fb      	strb	r3, [r7, #11]
 80013f8:	4613      	mov	r3, r2
 80013fa:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Master_Transmit_DMA(i2cHandle, (device_addr << 1), data, size);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	b29b      	uxth	r3, r3
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b299      	uxth	r1, r3
 8001408:	893b      	ldrh	r3, [r7, #8]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	f001 fa2e 	bl	800286c <HAL_I2C_Master_Transmit_DMA>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN7I2C_Bus13Error_HandlerEv>:

void I2C_Bus::Error_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001422:	b672      	cpsid	i
}
 8001424:	bf00      	nop
	__disable_irq();
	while (1)
 8001426:	bf00      	nop
 8001428:	e7fd      	b.n	8001426 <_ZN7I2C_Bus13Error_HandlerEv+0xc>
	...

0800142c <main>:

void SystemClock_Config(void);
void HAL_DMA_CpltCallback(struct __DMA_HandleTypeDef * hdma);

int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  HAL_Init();
 8001432:	f000 fb7f 	bl	8001b34 <HAL_Init>
  SystemClock_Config();
 8001436:	f000 f883 	bl	8001540 <_Z18SystemClock_Configv>

  I2C_Bus bus(&i2cHandle);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4938      	ldr	r1, [pc, #224]	@ (8001520 <main+0xf4>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff84 	bl	800134c <_ZN7I2C_BusC1EP17I2C_HandleTypeDef>
  bus.i2cInit();
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff90 	bl	800136c <_ZN7I2C_Bus7i2cInitEv>
  oled.begin();
 800144c:	4835      	ldr	r0, [pc, #212]	@ (8001524 <main+0xf8>)
 800144e:	f7ff fd2b 	bl	8000ea8 <_ZN11OLED_Driver5beginEv>

  Encoder_Init(&encoderHandle);
 8001452:	4835      	ldr	r0, [pc, #212]	@ (8001528 <main+0xfc>)
 8001454:	f7ff ff44 	bl	80012e0 <Encoder_Init>
  Timer_Init(&timerHandle);
 8001458:	4834      	ldr	r0, [pc, #208]	@ (800152c <main+0x100>)
 800145a:	f000 fb15 	bl	8001a88 <Timer_Init>
  PWM_Init(&pwmHandle);
 800145e:	4834      	ldr	r0, [pc, #208]	@ (8001530 <main+0x104>)
 8001460:	f000 f94a 	bl	80016f8 <PWM_Init>

  if (HAL_TIM_Encoder_Start(&encoderHandle, TIM_CHANNEL_ALL) != HAL_OK) Error_Handler();
 8001464:	213c      	movs	r1, #60	@ 0x3c
 8001466:	4830      	ldr	r0, [pc, #192]	@ (8001528 <main+0xfc>)
 8001468:	f002 fb0e 	bl	8003a88 <HAL_TIM_Encoder_Start>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf14      	ite	ne
 8001472:	2301      	movne	r3, #1
 8001474:	2300      	moveq	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <main+0x54>
 800147c:	f000 f916 	bl	80016ac <_Z13Error_Handlerv>
  if (HAL_TIM_PWM_Start(&pwmHandle, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8001480:	2100      	movs	r1, #0
 8001482:	482b      	ldr	r0, [pc, #172]	@ (8001530 <main+0x104>)
 8001484:	f002 f9aa 	bl	80037dc <HAL_TIM_PWM_Start>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <main+0x70>
 8001498:	f000 f908 	bl	80016ac <_Z13Error_Handlerv>

  if (HAL_DMA_RegisterCallback(&hdma_timer, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CpltCallback) != HAL_OK) Error_Handler();
 800149c:	4a25      	ldr	r2, [pc, #148]	@ (8001534 <main+0x108>)
 800149e:	2100      	movs	r1, #0
 80014a0:	4825      	ldr	r0, [pc, #148]	@ (8001538 <main+0x10c>)
 80014a2:	f000 fdd1 	bl	8002048 <HAL_DMA_RegisterCallback>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <main+0x8e>
 80014b6:	f000 f8f9 	bl	80016ac <_Z13Error_Handlerv>
  __HAL_TIM_ENABLE_DMA(&timerHandle, TIM_DMA_UPDATE);
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <main+0x100>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <main+0x100>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014c8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA_Start_IT(&hdma_timer, (uint32_t)&encoderHandle.Instance->CNT, (uint32_t)&buffer, 1) != HAL_OK) Error_Handler();
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <main+0xfc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3324      	adds	r3, #36	@ 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4a1a      	ldr	r2, [pc, #104]	@ (800153c <main+0x110>)
 80014d4:	2301      	movs	r3, #1
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <main+0x10c>)
 80014d8:	f000 fd5e 	bl	8001f98 <HAL_DMA_Start_IT>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <main+0xc4>
 80014ec:	f000 f8de 	bl	80016ac <_Z13Error_Handlerv>


  if (HAL_TIM_Base_Start(&timerHandle) != HAL_OK) Error_Handler();
 80014f0:	480e      	ldr	r0, [pc, #56]	@ (800152c <main+0x100>)
 80014f2:	f002 f8c9 	bl	8003688 <HAL_TIM_Base_Start>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <main+0xde>
 8001506:	f000 f8d1 	bl	80016ac <_Z13Error_Handlerv>

  __HAL_TIM_SET_COMPARE(&pwmHandle, TIM_CHANNEL_1, (uint16_t)((SERVO_MIN_PULSE + SERVO_MAX_PULSE) / 2.0f));
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <main+0x104>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	224b      	movs	r2, #75	@ 0x4b
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34
  oled.drawServo(90);
 8001512:	215a      	movs	r1, #90	@ 0x5a
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <main+0xf8>)
 8001516:	f7ff fdaf 	bl	8001078 <_ZN11OLED_Driver9drawServoEt>

  while (1)
 800151a:	bf00      	nop
 800151c:	e7fd      	b.n	800151a <main+0xee>
 800151e:	bf00      	nop
 8001520:	20000158 	.word	0x20000158
 8001524:	200001ac 	.word	0x200001ac
 8001528:	20000080 	.word	0x20000080
 800152c:	200000c8 	.word	0x200000c8
 8001530:	20000110 	.word	0x20000110
 8001534:	08001611 	.word	0x08001611
 8001538:	20000598 	.word	0x20000598
 800153c:	20000000 	.word	0x20000000

08001540 <_Z18SystemClock_Configv>:

  }
}

void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	@ 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	@ 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fbae 	bl	8004cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <_Z18SystemClock_Configv+0xc8>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <_Z18SystemClock_Configv+0xc8>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <_Z18SystemClock_Configv+0xc8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <_Z18SystemClock_Configv+0xcc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a20      	ldr	r2, [pc, #128]	@ (800160c <_Z18SystemClock_Configv+0xcc>)
 800158a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_Z18SystemClock_Configv+0xcc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a4:	2310      	movs	r3, #16
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fbd5 	bl	8002d60 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80015c6:	f000 f871 	bl	80016ac <_Z13Error_Handlerv>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fe33 	bl	8003250 <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80015fa:	f000 f857 	bl	80016ac <_Z13Error_Handlerv>
  }
}
 80015fe:	bf00      	nop
 8001600:	3750      	adds	r7, #80	@ 0x50
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef>:

void HAL_DMA_CpltCallback(struct __DMA_HandleTypeDef * hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    if (hdma->Instance == hdma_timer.Instance)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x84>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d134      	bne.n	800168e <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x7e>
    {
        if (buffer > ENCODER_MAX)
 8001624:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2bb4      	cmp	r3, #180	@ 0xb4
 800162a:	bf8c      	ite	hi
 800162c:	2301      	movhi	r3, #1
 800162e:	2300      	movls	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x2c>
            buffer = ENCODER_MAX;
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 8001638:	22b4      	movs	r2, #180	@ 0xb4
 800163a:	601a      	str	r2, [r3, #0]
        if (buffer == last_buffer)
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x8c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11c      	bne.n	800168c <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x7c>
        	return;
        last_buffer = buffer;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x8c>)
 8001658:	6013      	str	r3, [r2, #0]

        uint16_t new_pulse = SERVO_MIN_PULSE + (((uint32_t)buffer * (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / (uint32_t)ENCODER_MAX);
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2264      	movs	r2, #100	@ 0x64
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x90>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	b29b      	uxth	r3, r3
 8001670:	3319      	adds	r3, #25
 8001672:	81fb      	strh	r3, [r7, #14]
        __HAL_TIM_SET_COMPARE(&pwmHandle, TIM_CHANNEL_1, new_pulse);
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x94>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	89fa      	ldrh	r2, [r7, #14]
 800167a:	635a      	str	r2, [r3, #52]	@ 0x34

        oled.drawServo(buffer);
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x98>)
 8001686:	f7ff fcf7 	bl	8001078 <_ZN11OLED_Driver9drawServoEt>
 800168a:	e000      	b.n	800168e <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x7e>
        	return;
 800168c:	bf00      	nop
    }
}
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000598 	.word	0x20000598
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004
 80016a0:	16c16c17 	.word	0x16c16c17
 80016a4:	20000110 	.word	0x20000110
 80016a8:	200001ac 	.word	0x200001ac

080016ac <_Z13Error_Handlerv>:

void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  __disable_irq();
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <_Z13Error_Handlerv+0x8>

080016b8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
}
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
OLED_Driver oled(&i2cHandle);
 80016bc:	4902      	ldr	r1, [pc, #8]	@ (80016c8 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80016be:	4803      	ldr	r0, [pc, #12]	@ (80016cc <_Z41__static_initialization_and_destruction_0v+0x14>)
 80016c0:	f7ff fbce 	bl	8000e60 <_ZN11OLED_DriverC1EP17I2C_HandleTypeDef>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000158 	.word	0x20000158
 80016cc:	200001ac 	.word	0x200001ac

080016d0 <_Z41__static_initialization_and_destruction_1v>:
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
OLED_Driver oled(&i2cHandle);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80016d6:	f7ff fddf 	bl	8001298 <_ZN11OLED_DriverD1Ev>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001ac 	.word	0x200001ac

080016e4 <_GLOBAL__sub_I_buffer>:
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	f7ff ffe6 	bl	80016b8 <_Z41__static_initialization_and_destruction_0v>
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_GLOBAL__sub_D_buffer>:
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	f7ff ffed 	bl	80016d0 <_Z41__static_initialization_and_destruction_1v>
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <PWM_Init>:
#include <pwm.hpp>

HAL_StatusTypeDef PWM_Init(TIM_HandleTypeDef* pwmHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	pwmHandle->Instance = PWM;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <PWM_Init+0x90>)
 8001704:	601a      	str	r2, [r3, #0]
	pwmHandle->Init.Period = 999;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800170c:	60da      	str	r2, [r3, #12]
	pwmHandle->Init.Prescaler = 319;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f240 123f 	movw	r2, #319	@ 0x13f
 8001714:	605a      	str	r2, [r3, #4]
	pwmHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
	pwmHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
	pwmHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(pwmHandle) != HAL_OK) Error_Handler();
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f002 f807 	bl	800373c <HAL_TIM_PWM_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf14      	ite	ne
 8001734:	2301      	movne	r3, #1
 8001736:	2300      	moveq	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <PWM_Init+0x4a>
 800173e:	f000 f99d 	bl	8001a7c <Error_Handler>

	TIM_OC_InitTypeDef sConfigOC = {
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]
 8001756:	2360      	movs	r3, #96	@ 0x60
 8001758:	60fb      	str	r3, [r7, #12]
			.OCMode = TIM_OCMODE_PWM1,
			.Pulse = 0,
			.OCPolarity = TIM_OCPOLARITY_HIGH,
			.OCFastMode = TIM_OCFAST_DISABLE
	};
	if (HAL_TIM_PWM_ConfigChannel(pwmHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2200      	movs	r2, #0
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f002 fa1e 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <PWM_Init+0x84>
 8001778:	f000 f980 	bl	8001a7c <Error_Handler>

	return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40010000 	.word	0x40010000

0800178c <HAL_MspInit>:

DMA_HandleTypeDef hdma_timer = {0};
DMA_HandleTypeDef hdma_i2c = {0};

void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	4a0f      	ldr	r2, [pc, #60]	@ (80017d8 <HAL_MspInit+0x4c>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_MspInit+0x4c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance == PWM)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a18      	ldr	r2, [pc, #96]	@ (800184c <HAL_TIM_PWM_MspInit+0x70>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d129      	bne.n	8001842 <HAL_TIM_PWM_MspInit+0x66>
  {
	  __HAL_RCC_TIM1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <HAL_TIM_PWM_MspInit+0x74>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <HAL_TIM_PWM_MspInit+0x74>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <HAL_TIM_PWM_MspInit+0x74>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <HAL_TIM_PWM_MspInit+0x74>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a0f      	ldr	r2, [pc, #60]	@ (8001850 <HAL_TIM_PWM_MspInit+0x74>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <HAL_TIM_PWM_MspInit+0x74>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

	  GPIO_InitTypeDef GPIO_InitSturct = {
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_TIM_PWM_MspInit+0x78>)
 8001828:	f107 0414 	add.w	r4, r7, #20
 800182c:	461d      	mov	r5, r3
 800182e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	6023      	str	r3, [r4, #0]
			  .Mode = GPIO_MODE_AF_PP,
			  .Pull = GPIO_NOPULL,
			  .Speed = GPIO_SPEED_LOW,
			  .Alternate = GPIO_AF1_TIM1
	  };
	  HAL_GPIO_Init(PWM_PORT, &GPIO_InitSturct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4806      	ldr	r0, [pc, #24]	@ (8001858 <HAL_TIM_PWM_MspInit+0x7c>)
 800183e:	f000 fd43 	bl	80022c8 <HAL_GPIO_Init>
  }
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bdb0      	pop	{r4, r5, r7, pc}
 800184a:	bf00      	nop
 800184c:	40010000 	.word	0x40010000
 8001850:	40023800 	.word	0x40023800
 8001854:	08004df8 	.word	0x08004df8
 8001858:	40020000 	.word	0x40020000

0800185c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	if (htim_encoder->Instance == ENCODER)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800186c:	d129      	bne.n	80018c2 <HAL_TIM_Encoder_MspInit+0x66>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x70>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x70>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x70>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x70>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x70>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_TIM_Encoder_MspInit+0x70>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

		GPIO_InitTypeDef GPIO_InitStruct = {
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_TIM_Encoder_MspInit+0x74>)
 80018a8:	f107 0414 	add.w	r4, r7, #20
 80018ac:	461d      	mov	r5, r3
 80018ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	6023      	str	r3, [r4, #0]
				.Mode = GPIO_MODE_AF_PP,
				.Pull = GPIO_PULLUP,
				.Speed = GPIO_SPEED_FREQ_LOW,
				.Alternate = GPIO_AF1_TIM2
		};
		HAL_GPIO_Init(ENCODER_PORT, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <HAL_TIM_Encoder_MspInit+0x78>)
 80018be:	f000 fd03 	bl	80022c8 <HAL_GPIO_Init>
	}
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	@ 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08004e0c 	.word	0x08004e0c
 80018d4:	40020000 	.word	0x40020000

080018d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if (htim->Instance == TIMER)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2e      	ldr	r2, [pc, #184]	@ (80019b0 <HAL_TIM_Base_MspInit+0xd8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d155      	bne.n	80019a6 <HAL_TIM_Base_MspInit+0xce>
  {
	__HAL_RCC_TIM3_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <HAL_TIM_Base_MspInit+0xdc>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	4a2c      	ldr	r2, [pc, #176]	@ (80019b4 <HAL_TIM_Base_MspInit+0xdc>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6413      	str	r3, [r2, #64]	@ 0x40
 800190a:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <HAL_TIM_Base_MspInit+0xdc>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <HAL_TIM_Base_MspInit+0xdc>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a25      	ldr	r2, [pc, #148]	@ (80019b4 <HAL_TIM_Base_MspInit+0xdc>)
 8001920:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b23      	ldr	r3, [pc, #140]	@ (80019b4 <HAL_TIM_Base_MspInit+0xdc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

	hdma_timer.Instance = DMA1_Stream2;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_TIM_Base_MspInit+0xe4>)
 8001936:	601a      	str	r2, [r3, #0]
	hdma_timer.Init.Channel = DMA_CHANNEL_5;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 800193a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800193e:	605a      	str	r2, [r3, #4]
	hdma_timer.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
	hdma_timer.Init.PeriphInc = DMA_PINC_DISABLE;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
	hdma_timer.Init.MemInc = DMA_MINC_DISABLE;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
	hdma_timer.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001954:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001958:	615a      	str	r2, [r3, #20]
	hdma_timer.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 800195c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001960:	619a      	str	r2, [r3, #24]
	hdma_timer.Init.Mode = DMA_CIRCULAR;
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001968:	61da      	str	r2, [r3, #28]
	hdma_timer.Init.Priority = DMA_PRIORITY_LOW;
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_timer) != HAL_OK) Error_Handler();
 8001970:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001972:	f000 fa63 	bl	8001e3c <HAL_DMA_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_TIM_Base_MspInit+0xb2>
 8001986:	f7ff fe91 	bl	80016ac <_Z13Error_Handlerv>

	__HAL_LINKDMA(htim, hdma[TIM_DMA_ID_UPDATE], hdma_timer);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 800198e:	621a      	str	r2, [r3, #32]
 8001990:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_TIM_Base_MspInit+0xe0>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6393      	str	r3, [r2, #56]	@ 0x38

	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	200d      	movs	r0, #13
 800199c:	f000 fa17 	bl	8001dce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019a0:	200d      	movs	r0, #13
 80019a2:	f000 fa30 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	@ 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	20000598 	.word	0x20000598
 80019bc:	40026040 	.word	0x40026040

080019c0 <NMI_Handler>:
{
	HAL_DMA_IRQHandler(&hdma_timer);
}

void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
   while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e8 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001a16:	f000 f8df 	bl	8001bd8 <HAL_IncTick>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Error_Handler>:
#include <timer.hpp>

void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  __disable_irq();
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <Error_Handler+0x8>

08001a88 <Timer_Init>:
  {
  }
}

HAL_StatusTypeDef Timer_Init(TIM_HandleTypeDef* timerHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	timerHandle->Instance = TIMER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <Timer_Init+0x54>)
 8001a94:	601a      	str	r2, [r3, #0]
	timerHandle->Init.Prescaler = 15999;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001a9c:	605a      	str	r2, [r3, #4]
	timerHandle->Init.Period = 9;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2209      	movs	r2, #9
 8001aa2:	60da      	str	r2, [r3, #12]
	timerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
	timerHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
	timerHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2280      	movs	r2, #128	@ 0x80
 8001ab4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(timerHandle) != HAL_OK) Error_Handler();
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f001 fd96 	bl	80035e8 <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <Timer_Init+0x48>
 8001acc:	f7ff ffd6 	bl	8001a7c <Error_Handler>

	return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40000400 	.word	0x40000400

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae4:	f7ff ffb8 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f003 f8d7 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff fc8b 	bl	800142c <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b24:	08005250 	.word	0x08005250
  ldr r2, =_sbss
 8001b28:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b2c:	2000073c 	.word	0x2000073c

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f92b 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fe10 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f943 	bl	8001e22 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bb4:	f000 f90b 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000010 	.word	0x20000010
 8001bd4:	2000000c 	.word	0x2000000c

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	200005f8 	.word	0x200005f8

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200005f8 	.word	0x200005f8

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	@ (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff29 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff3e 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8e 	bl	8001d0c <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff31 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff feda 	bl	8001c00 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e099      	b.n	8001f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e78:	e00f      	b.n	8001e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7a:	f7ff fec1 	bl	8001c00 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d908      	bls.n	8001e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2203      	movs	r2, #3
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e078      	b.n	8001f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e8      	bne.n	8001e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_DMA_Init+0x158>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d107      	bne.n	8001f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	4313      	orrs	r3, r2
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0307 	bic.w	r3, r3, #7
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d117      	bne.n	8001f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f945 	bl	80021d0 <DMA_CheckFifoParam>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2240      	movs	r2, #64	@ 0x40
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e016      	b.n	8001f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8fc 	bl	8002164 <DMA_CalcBaseAndBitshift>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	223f      	movs	r2, #63	@ 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	f010803f 	.word	0xf010803f

08001f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_Start_IT+0x26>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e040      	b.n	8002040 <HAL_DMA_Start_IT+0xa8>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12f      	bne.n	8002032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f88e 	bl	8002108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	223f      	movs	r2, #63	@ 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0216 	orr.w	r2, r2, #22
 8002006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0208 	orr.w	r2, r2, #8
 800201e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e005      	b.n	800203e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	460b      	mov	r3, r1
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_DMA_RegisterCallback+0x20>
 8002064:	2302      	movs	r3, #2
 8002066:	e03d      	b.n	80020e4 <HAL_DMA_RegisterCallback+0x9c>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d12c      	bne.n	80020d6 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d826      	bhi.n	80020d0 <HAL_DMA_RegisterCallback+0x88>
 8002082:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <HAL_DMA_RegisterCallback+0x40>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	080020a1 	.word	0x080020a1
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020b1 	.word	0x080020b1
 8002094:	080020b9 	.word	0x080020b9
 8002098:	080020c1 	.word	0x080020c1
 800209c:	080020c9 	.word	0x080020c9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80020a6:	e018      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80020ae:	e014      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 80020b6:	e010      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 80020be:	e00c      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 80020c6:	e008      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80020ce:	e004      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	75fb      	strb	r3, [r7, #23]
      break;
 80020d4:	e001      	b.n	80020da <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b40      	cmp	r3, #64	@ 0x40
 8002134:	d108      	bne.n	8002148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002146:	e007      	b.n	8002158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3b10      	subs	r3, #16
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800217e:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <DMA_CalcBaseAndBitshift+0x68>)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d909      	bls.n	80021a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021a4:	e007      	b.n	80021b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	aaaaaaab 	.word	0xaaaaaaab
 80021cc:	08004e60 	.word	0x08004e60

080021d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11f      	bne.n	800222a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d856      	bhi.n	800229e <DMA_CheckFifoParam+0xce>
 80021f0:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <DMA_CheckFifoParam+0x28>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800221b 	.word	0x0800221b
 8002200:	08002209 	.word	0x08002209
 8002204:	0800229f 	.word	0x0800229f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d046      	beq.n	80022a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e043      	b.n	80022a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002222:	d140      	bne.n	80022a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002228:	e03d      	b.n	80022a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002232:	d121      	bne.n	8002278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d837      	bhi.n	80022aa <DMA_CheckFifoParam+0xda>
 800223a:	a201      	add	r2, pc, #4	@ (adr r2, 8002240 <DMA_CheckFifoParam+0x70>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002251 	.word	0x08002251
 8002244:	08002257 	.word	0x08002257
 8002248:	08002251 	.word	0x08002251
 800224c:	08002269 	.word	0x08002269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e030      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002266:	e022      	b.n	80022ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002270:	d11f      	bne.n	80022b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002276:	e01c      	b.n	80022b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d903      	bls.n	8002286 <DMA_CheckFifoParam+0xb6>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d003      	beq.n	800228c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002284:	e018      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      break;
 800228a:	e015      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e00b      	b.n	80022b6 <DMA_CheckFifoParam+0xe6>
      break;
 800229e:	bf00      	nop
 80022a0:	e00a      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e008      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e006      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
    }
  } 
  
  return status; 
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e159      	b.n	8002598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8148 	bne.w	8002592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d130      	bne.n	800237c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 0201 	and.w	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d017      	beq.n	80023b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a2 	beq.w	8002592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b57      	ldr	r3, [pc, #348]	@ (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	4a56      	ldr	r2, [pc, #344]	@ (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800245c:	6453      	str	r3, [r2, #68]	@ 0x44
 800245e:	4b54      	ldr	r3, [pc, #336]	@ (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <HAL_GPIO_Init+0x2ec>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	@ (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x202>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a48      	ldr	r2, [pc, #288]	@ (80025bc <HAL_GPIO_Init+0x2f4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x1fe>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a47      	ldr	r2, [pc, #284]	@ (80025c0 <HAL_GPIO_Init+0x2f8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x1fa>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a46      	ldr	r2, [pc, #280]	@ (80025c4 <HAL_GPIO_Init+0x2fc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x1f6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a45      	ldr	r2, [pc, #276]	@ (80025c8 <HAL_GPIO_Init+0x300>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x1f2>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	@ (80025b4 <HAL_GPIO_Init+0x2ec>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ea:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_GPIO_Init+0x304>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800250e:	4a2f      	ldr	r2, [pc, #188]	@ (80025cc <HAL_GPIO_Init+0x304>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002514:	4b2d      	ldr	r3, [pc, #180]	@ (80025cc <HAL_GPIO_Init+0x304>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002538:	4a24      	ldr	r2, [pc, #144]	@ (80025cc <HAL_GPIO_Init+0x304>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800253e:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <HAL_GPIO_Init+0x304>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002562:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_GPIO_Init+0x304>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_GPIO_Init+0x304>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258c:	4a0f      	ldr	r2, [pc, #60]	@ (80025cc <HAL_GPIO_Init+0x304>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f aea2 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	@ 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e12b      	b.n	800283a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f92e 	bl	8002858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2224      	movs	r2, #36	@ 0x24
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002622:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002632:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002634:	f000 ffc4 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8002638:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a81      	ldr	r2, [pc, #516]	@ (8002844 <HAL_I2C_Init+0x274>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d807      	bhi.n	8002654 <HAL_I2C_Init+0x84>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a80      	ldr	r2, [pc, #512]	@ (8002848 <HAL_I2C_Init+0x278>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e006      	b.n	8002662 <HAL_I2C_Init+0x92>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a7d      	ldr	r2, [pc, #500]	@ (800284c <HAL_I2C_Init+0x27c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0e7      	b.n	800283a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a78      	ldr	r2, [pc, #480]	@ (8002850 <HAL_I2C_Init+0x280>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0c9b      	lsrs	r3, r3, #18
 8002674:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a6a      	ldr	r2, [pc, #424]	@ (8002844 <HAL_I2C_Init+0x274>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d802      	bhi.n	80026a4 <HAL_I2C_Init+0xd4>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	e009      	b.n	80026b8 <HAL_I2C_Init+0xe8>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	4a69      	ldr	r2, [pc, #420]	@ (8002854 <HAL_I2C_Init+0x284>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	3301      	adds	r3, #1
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	495c      	ldr	r1, [pc, #368]	@ (8002844 <HAL_I2C_Init+0x274>)
 80026d4:	428b      	cmp	r3, r1
 80026d6:	d819      	bhi.n	800270c <HAL_I2C_Init+0x13c>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e59      	subs	r1, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e6:	1c59      	adds	r1, r3, #1
 80026e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026ec:	400b      	ands	r3, r1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_I2C_Init+0x138>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1e59      	subs	r1, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002700:	3301      	adds	r3, #1
 8002702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002706:	e051      	b.n	80027ac <HAL_I2C_Init+0x1dc>
 8002708:	2304      	movs	r3, #4
 800270a:	e04f      	b.n	80027ac <HAL_I2C_Init+0x1dc>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d111      	bne.n	8002738 <HAL_I2C_Init+0x168>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e012      	b.n	800275e <HAL_I2C_Init+0x18e>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	0099      	lsls	r1, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Init+0x196>
 8002762:	2301      	movs	r3, #1
 8002764:	e022      	b.n	80027ac <HAL_I2C_Init+0x1dc>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10e      	bne.n	800278c <HAL_I2C_Init+0x1bc>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e58      	subs	r0, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	440b      	add	r3, r1
 800277c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800278a:	e00f      	b.n	80027ac <HAL_I2C_Init+0x1dc>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1e58      	subs	r0, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	0099      	lsls	r1, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	6809      	ldr	r1, [r1, #0]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6911      	ldr	r1, [r2, #16]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68d2      	ldr	r2, [r2, #12]
 80027e6:	4311      	orrs	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	430b      	orrs	r3, r1
 80027ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	000186a0 	.word	0x000186a0
 8002848:	001e847f 	.word	0x001e847f
 800284c:	003d08ff 	.word	0x003d08ff
 8002850:	431bde83 	.word	0x431bde83
 8002854:	10624dd3 	.word	0x10624dd3

08002858 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	460b      	mov	r3, r1
 800287a:	817b      	strh	r3, [r7, #10]
 800287c:	4613      	mov	r3, r2
 800287e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 8109 	bne.w	8002aa4 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002892:	4b87      	ldr	r3, [pc, #540]	@ (8002ab0 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	4a86      	ldr	r2, [pc, #536]	@ (8002ab4 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a1a      	lsrs	r2, r3, #8
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d112      	bne.n	80028de <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	e0e3      	b.n	8002aa6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d0df      	beq.n	80028ac <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Master_Transmit_DMA+0x8e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0d5      	b.n	8002aa6 <HAL_I2C_Master_Transmit_DMA+0x23a>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d007      	beq.n	8002920 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	@ 0x21
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2210      	movs	r2, #16
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	893a      	ldrh	r2, [r7, #8]
 8002950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a56      	ldr	r2, [pc, #344]	@ (8002ab8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002960:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002962:	897a      	ldrh	r2, [r7, #10]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	d07b      	beq.n	8002a68 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02a      	beq.n	80029ce <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	4a4f      	ldr	r2, [pc, #316]	@ (8002abc <HAL_I2C_Master_Transmit_DMA+0x250>)
 800297e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002984:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002986:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298c:	2200      	movs	r2, #0
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002994:	2200      	movs	r2, #0
 8002996:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299c:	2200      	movs	r2, #0
 800299e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a4:	2200      	movs	r2, #0
 80029a6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3310      	adds	r3, #16
 80029b8:	461a      	mov	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	f7ff faeb 	bl	8001f98 <HAL_DMA_Start_IT>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d139      	bne.n	8002a40 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 80029cc:	e013      	b.n	80029f6 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e057      	b.n	8002aa6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a0c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a1c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e02f      	b.n	8002aa0 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f043 0210 	orr.w	r2, r3, #16
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e01e      	b.n	8002aa6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a76:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a86:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002a9e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	14f8b589 	.word	0x14f8b589
 8002ab8:	ffff0000 	.word	0xffff0000
 8002abc:	08002b29 	.word	0x08002b29
 8002ac0:	08002ce7 	.word	0x08002ce7

08002ac4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b44:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	2200      	movs	r2, #0
 8002b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	2200      	movs	r2, #0
 8002b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002b82:	2b21      	cmp	r3, #33	@ 0x21
 8002b84:	d007      	beq.n	8002b96 <I2C_DMAXferCplt+0x6e>
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8002b8c:	2b22      	cmp	r3, #34	@ 0x22
 8002b8e:	d131      	bne.n	8002bf4 <I2C_DMAXferCplt+0xcc>
 8002b90:	7cbb      	ldrb	r3, [r7, #18]
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d12e      	bne.n	8002bf4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b29      	cmp	r3, #41	@ 0x29
 8002bb0:	d10a      	bne.n	8002bc8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2221      	movs	r2, #33	@ 0x21
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2228      	movs	r2, #40	@ 0x28
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f7ff ff89 	bl	8002ad8 <HAL_I2C_SlaveTxCpltCallback>
 8002bc6:	e00c      	b.n	8002be2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bcc:	d109      	bne.n	8002be2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2222      	movs	r2, #34	@ 0x22
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2228      	movs	r2, #40	@ 0x28
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f7ff ff85 	bl	8002aec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002bf0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002bf2:	e074      	b.n	8002cde <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d06e      	beq.n	8002cde <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c18:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c30:	d009      	beq.n	8002c46 <I2C_DMAXferCplt+0x11e>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d006      	beq.n	8002c46 <I2C_DMAXferCplt+0x11e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c3e:	d002      	beq.n	8002c46 <I2C_DMAXferCplt+0x11e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d107      	bne.n	8002c56 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c54:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c64:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c74:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f7ff ff45 	bl	8002b14 <HAL_I2C_ErrorCallback>
}
 8002c8a:	e028      	b.n	8002cde <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b40      	cmp	r3, #64	@ 0x40
 8002c9e:	d10a      	bne.n	8002cb6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff26 	bl	8002b00 <HAL_I2C_MemRxCpltCallback>
}
 8002cb4:	e013      	b.n	8002cde <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d002      	beq.n	8002cca <I2C_DMAXferCplt+0x1a2>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d103      	bne.n	8002cd2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cd0:	e002      	b.n	8002cd8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2212      	movs	r2, #18
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f7ff fef3 	bl	8002ac4 <HAL_I2C_MasterRxCpltCallback>
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d00:	2200      	movs	r2, #0
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	2200      	movs	r2, #0
 8002d12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff f9eb 	bl	80020f0 <HAL_DMA_GetError>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d01b      	beq.n	8002d58 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fede 	bl	8002b14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e267      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d075      	beq.n	8002e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d00c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b85      	ldr	r3, [pc, #532]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d112      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b82      	ldr	r3, [pc, #520]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05b      	beq.n	8002e68 <HAL_RCC_OscConfig+0x108>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d157      	bne.n	8002e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e242      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x74>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e01d      	b.n	8002e10 <HAL_RCC_OscConfig+0xb0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x98>
 8002dde:	4b70      	ldr	r3, [pc, #448]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6f      	ldr	r2, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0xb0>
 8002df8:	4b69      	ldr	r3, [pc, #420]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a68      	ldr	r2, [pc, #416]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fe fef2 	bl	8001c00 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe feee 	bl	8001c00 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	@ 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e207      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0xc0>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fede 	bl	8001c00 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe feda 	bl	8001c00 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	@ 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1f3      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b51      	ldr	r3, [pc, #324]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0xe8>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b44      	ldr	r3, [pc, #272]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x152>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1c7      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e03a      	b.n	8002f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_RCC_OscConfig+0x244>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fe93 	bl	8001c00 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ede:	f7fe fe8f 	bl	8001c00 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1a8      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4925      	ldr	r1, [pc, #148]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f12:	4b24      	ldr	r3, [pc, #144]	@ (8002fa4 <HAL_RCC_OscConfig+0x244>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fe72 	bl	8001c00 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe fe6e 	bl	8001c00 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e187      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d036      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_RCC_OscConfig+0x248>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe fe52 	bl	8001c00 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fe fe4e 	bl	8001c00 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e167      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x200>
 8002f7e:	e01b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <HAL_RCC_OscConfig+0x248>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe fe3b 	bl	8001c00 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e00e      	b.n	8002fac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fe37 	bl	8001c00 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d907      	bls.n	8002fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e150      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
 8002fa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ea      	bne.n	8002f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8097 	beq.w	80030f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b81      	ldr	r3, [pc, #516]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b7d      	ldr	r3, [pc, #500]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a7c      	ldr	r2, [pc, #496]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b77      	ldr	r3, [pc, #476]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b74      	ldr	r3, [pc, #464]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a73      	ldr	r2, [pc, #460]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe fdf7 	bl	8001c00 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fe fdf3 	bl	8001c00 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e10c      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b6a      	ldr	r3, [pc, #424]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x2ea>
 800303c:	4b64      	ldr	r3, [pc, #400]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a63      	ldr	r2, [pc, #396]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x324>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x30c>
 8003052:	4b5f      	ldr	r3, [pc, #380]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a5e      	ldr	r2, [pc, #376]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	4b5c      	ldr	r3, [pc, #368]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a5b      	ldr	r2, [pc, #364]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x324>
 800306c:	4b58      	ldr	r3, [pc, #352]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a57      	ldr	r2, [pc, #348]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	4b55      	ldr	r3, [pc, #340]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a54      	ldr	r2, [pc, #336]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fe fdb8 	bl	8001c00 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fdb4 	bl	8001c00 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0cb      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	4b49      	ldr	r3, [pc, #292]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <HAL_RCC_OscConfig+0x334>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7fe fda2 	bl	8001c00 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe fd9e 	bl	8001c00 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0b5      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	4b3e      	ldr	r3, [pc, #248]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a1 	beq.w	8003240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d05c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d141      	bne.n	8003196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <HAL_RCC_OscConfig+0x478>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fd72 	bl	8001c00 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fd6e 	bl	8001c00 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e087      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	491b      	ldr	r1, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x478>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe fd47 	bl	8001c00 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe fd43 	bl	8001c00 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e05c      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x416>
 8003194:	e054      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_RCC_OscConfig+0x478>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe fd30 	bl	8001c00 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fd2c 	bl	8001c00 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e045      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x444>
 80031c2:	e03d      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e038      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <HAL_RCC_OscConfig+0x4ec>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d028      	beq.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d121      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d11a      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003214:	4293      	cmp	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	3b01      	subs	r3, #1
 8003226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d107      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7fe fc5e 	bl	8001c00 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7fe fc5a 	bl	8001c00 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fbbe 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08004e48 	.word	0x08004e48
 8003414:	20000008 	.word	0x20000008
 8003418:	2000000c 	.word	0x2000000c

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b090      	sub	sp, #64	@ 0x40
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d00d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x40>
 8003440:	2b08      	cmp	r3, #8
 8003442:	f200 80a1 	bhi.w	8003588 <HAL_RCC_GetSysClockFreq+0x16c>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x3a>
 800344e:	e09b      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003452:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003454:	e09b      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b53      	ldr	r3, [pc, #332]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003458:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800345a:	e098      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003464:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003466:	4b4d      	ldr	r3, [pc, #308]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	627a      	str	r2, [r7, #36]	@ 0x24
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003484:	2100      	movs	r1, #0
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003488:	fb03 f201 	mul.w	r2, r3, r1
 800348c:	2300      	movs	r3, #0
 800348e:	fb00 f303 	mul.w	r3, r0, r3
 8003492:	4413      	add	r3, r2
 8003494:	4a43      	ldr	r2, [pc, #268]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003496:	fba0 1202 	umull	r1, r2, r0, r2
 800349a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800349c:	460a      	mov	r2, r1
 800349e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a2:	4413      	add	r3, r2
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a8:	2200      	movs	r2, #0
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	61fa      	str	r2, [r7, #28]
 80034ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034b6:	f7fd f9c5 	bl	8000844 <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4613      	mov	r3, r2
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034c2:	e053      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b35      	ldr	r3, [pc, #212]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	2200      	movs	r2, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	617a      	str	r2, [r7, #20]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034d6:	f04f 0b00 	mov.w	fp, #0
 80034da:	4652      	mov	r2, sl
 80034dc:	465b      	mov	r3, fp
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	ebb2 080a 	subs.w	r8, r2, sl
 80034f6:	eb63 090b 	sbc.w	r9, r3, fp
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003506:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800350a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800350e:	ebb2 0408 	subs.w	r4, r2, r8
 8003512:	eb63 0509 	sbc.w	r5, r3, r9
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	00eb      	lsls	r3, r5, #3
 8003520:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003524:	00e2      	lsls	r2, r4, #3
 8003526:	4614      	mov	r4, r2
 8003528:	461d      	mov	r5, r3
 800352a:	eb14 030a 	adds.w	r3, r4, sl
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	eb45 030b 	adc.w	r3, r5, fp
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003542:	4629      	mov	r1, r5
 8003544:	028b      	lsls	r3, r1, #10
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354c:	4621      	mov	r1, r4
 800354e:	028a      	lsls	r2, r1, #10
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003560:	f7fd f970 	bl	8000844 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800357c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003590:	4618      	mov	r0, r3
 8003592:	3740      	adds	r7, #64	@ 0x40
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	017d7840 	.word	0x017d7840

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000008 	.word	0x20000008

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c4:	f7ff fff0 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0a9b      	lsrs	r3, r3, #10
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08004e58 	.word	0x08004e58

080035e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e041      	b.n	800367e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fe f962 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f000 fb7e 	bl	8003d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e03c      	b.n	800371a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003728 <HAL_TIM_Base_Start+0xa0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_TIM_Base_Start+0x5c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ba:	d013      	beq.n	80036e4 <HAL_TIM_Base_Start+0x5c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <HAL_TIM_Base_Start+0xa4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_TIM_Base_Start+0x5c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a19      	ldr	r2, [pc, #100]	@ (8003730 <HAL_TIM_Base_Start+0xa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIM_Base_Start+0x5c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a17      	ldr	r2, [pc, #92]	@ (8003734 <HAL_TIM_Base_Start+0xac>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIM_Base_Start+0x5c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a16      	ldr	r2, [pc, #88]	@ (8003738 <HAL_TIM_Base_Start+0xb0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d111      	bne.n	8003708 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d010      	beq.n	8003718 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	e007      	b.n	8003718 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000

0800373c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e041      	b.n	80037d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe f83a 	bl	80017dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fad4 	bl	8003d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_TIM_PWM_Start+0x24>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e022      	b.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d109      	bne.n	800381a <HAL_TIM_PWM_Start+0x3e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e015      	b.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d109      	bne.n	8003834 <HAL_TIM_PWM_Start+0x58>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e008      	b.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e068      	b.n	8003920 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0x82>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800385c:	e013      	b.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0x92>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800386c:	e00b      	b.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0xa2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387c:	e003      	b.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fc5c 	bl	800414c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <HAL_TIM_PWM_Start+0x14c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d107      	bne.n	80038ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <HAL_TIM_PWM_Start+0x14c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d013      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a19      	ldr	r2, [pc, #100]	@ (800392c <HAL_TIM_PWM_Start+0x150>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_TIM_PWM_Start+0x154>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a16      	ldr	r2, [pc, #88]	@ (8003934 <HAL_TIM_PWM_Start+0x158>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_PWM_Start+0x10e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_TIM_PWM_Start+0x15c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d111      	bne.n	800390e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d010      	beq.n	800391e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	e007      	b.n	800391e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0201 	orr.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000

0800393c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e097      	b.n	8003a80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fd ff79 	bl	800185c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f000 f9c9 	bl	8003d28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	4313      	orrs	r3, r2
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039dc:	f023 030c 	bic.w	r3, r3, #12
 80039e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	4313      	orrs	r3, r2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	031b      	lsls	r3, r3, #12
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003aa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ab0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d110      	bne.n	8003ada <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003abe:	7b7b      	ldrb	r3, [r7, #13]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e069      	b.n	8003b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ad8:	e031      	b.n	8003b3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d110      	bne.n	8003b02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d102      	bne.n	8003aec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ae6:	7b3b      	ldrb	r3, [r7, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e055      	b.n	8003b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b00:	e01d      	b.n	8003b3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d108      	bne.n	8003b1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b08:	7bbb      	ldrb	r3, [r7, #14]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b0e:	7b7b      	ldrb	r3, [r7, #13]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b14:	7b3b      	ldrb	r3, [r7, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e03e      	b.n	8003b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_Encoder_Start+0xc4>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d008      	beq.n	8003b5c <HAL_TIM_Encoder_Start+0xd4>
 8003b4a:	e00f      	b.n	8003b6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 faf9 	bl	800414c <TIM_CCxChannelCmd>
      break;
 8003b5a:	e016      	b.n	8003b8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2201      	movs	r2, #1
 8003b62:	2104      	movs	r1, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 faf1 	bl	800414c <TIM_CCxChannelCmd>
      break;
 8003b6a:	e00e      	b.n	8003b8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2201      	movs	r2, #1
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fae9 	bl	800414c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2104      	movs	r1, #4
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fae2 	bl	800414c <TIM_CCxChannelCmd>
      break;
 8003b88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0ae      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f200 809f 	bhi.w	8003d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003d11 	.word	0x08003d11
 8003be0:	08003d11 	.word	0x08003d11
 8003be4:	08003d11 	.word	0x08003d11
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003d11 	.word	0x08003d11
 8003bf0:	08003d11 	.word	0x08003d11
 8003bf4:	08003d11 	.word	0x08003d11
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003d11 	.word	0x08003d11
 8003c00:	08003d11 	.word	0x08003d11
 8003c04:	08003d11 	.word	0x08003d11
 8003c08:	08003ccf 	.word	0x08003ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f90e 	bl	8003e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0208 	orr.w	r2, r2, #8
 8003c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0204 	bic.w	r2, r2, #4
 8003c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6999      	ldr	r1, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	619a      	str	r2, [r3, #24]
      break;
 8003c4a:	e064      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f954 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
      break;
 8003c8c:	e043      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f99f 	bl	8003fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0208 	orr.w	r2, r2, #8
 8003ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0204 	bic.w	r2, r2, #4
 8003cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
      break;
 8003ccc:	e023      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f9e9 	bl	80040ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	021a      	lsls	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      break;
 8003d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a37      	ldr	r2, [pc, #220]	@ (8003e18 <TIM_Base_SetConfig+0xf0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <TIM_Base_SetConfig+0x38>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0x38>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a34      	ldr	r2, [pc, #208]	@ (8003e1c <TIM_Base_SetConfig+0xf4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0x38>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <TIM_Base_SetConfig+0xf8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0x38>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <TIM_Base_SetConfig+0xfc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d108      	bne.n	8003d72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a28      	ldr	r2, [pc, #160]	@ (8003e18 <TIM_Base_SetConfig+0xf0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01b      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d80:	d017      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a25      	ldr	r2, [pc, #148]	@ (8003e1c <TIM_Base_SetConfig+0xf4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	@ (8003e20 <TIM_Base_SetConfig+0xf8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a23      	ldr	r2, [pc, #140]	@ (8003e24 <TIM_Base_SetConfig+0xfc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	@ (8003e28 <TIM_Base_SetConfig+0x100>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a21      	ldr	r2, [pc, #132]	@ (8003e2c <TIM_Base_SetConfig+0x104>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0x8a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a20      	ldr	r2, [pc, #128]	@ (8003e30 <TIM_Base_SetConfig+0x108>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a0c      	ldr	r2, [pc, #48]	@ (8003e18 <TIM_Base_SetConfig+0xf0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d103      	bne.n	8003df2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f043 0204 	orr.w	r2, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40014400 	.word	0x40014400
 8003e30:	40014800 	.word	0x40014800

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f023 0201 	bic.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10c      	bne.n	8003eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0308 	bic.w	r3, r3, #8
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <TIM_OC1_SetConfig+0xc8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40010000 	.word	0x40010000

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f023 0210 	bic.w	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <TIM_OC2_SetConfig+0xd4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <TIM_OC2_SetConfig+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d113      	bne.n	8003fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000

08003fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <TIM_OC3_SetConfig+0xd0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10d      	bne.n	8004052 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800403c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a14      	ldr	r2, [pc, #80]	@ (80040a8 <TIM_OC3_SetConfig+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d113      	bne.n	8004082 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	621a      	str	r2, [r3, #32]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40010000 	.word	0x40010000

080040ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	031b      	lsls	r3, r3, #12
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a10      	ldr	r2, [pc, #64]	@ (8004148 <TIM_OC4_SetConfig+0x9c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000

0800414c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2201      	movs	r2, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	43db      	mvns	r3, r3
 800416e:	401a      	ands	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZdlPvj>:
 8004196:	f000 b800 	b.w	800419a <_ZdlPv>

0800419a <_ZdlPv>:
 800419a:	f000 bd75 	b.w	8004c88 <free>
	...

080041a0 <cosf>:
 80041a0:	ee10 3a10 	vmov	r3, s0
 80041a4:	b507      	push	{r0, r1, r2, lr}
 80041a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004220 <cosf+0x80>)
 80041a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d806      	bhi.n	80041be <cosf+0x1e>
 80041b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004224 <cosf+0x84>
 80041b4:	b003      	add	sp, #12
 80041b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80041ba:	f000 b87b 	b.w	80042b4 <__kernel_cosf>
 80041be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80041c2:	d304      	bcc.n	80041ce <cosf+0x2e>
 80041c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80041c8:	b003      	add	sp, #12
 80041ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ce:	4668      	mov	r0, sp
 80041d0:	f000 f910 	bl	80043f4 <__ieee754_rem_pio2f>
 80041d4:	f000 0003 	and.w	r0, r0, #3
 80041d8:	2801      	cmp	r0, #1
 80041da:	d009      	beq.n	80041f0 <cosf+0x50>
 80041dc:	2802      	cmp	r0, #2
 80041de:	d010      	beq.n	8004202 <cosf+0x62>
 80041e0:	b9b0      	cbnz	r0, 8004210 <cosf+0x70>
 80041e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80041e6:	ed9d 0a00 	vldr	s0, [sp]
 80041ea:	f000 f863 	bl	80042b4 <__kernel_cosf>
 80041ee:	e7eb      	b.n	80041c8 <cosf+0x28>
 80041f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80041f4:	ed9d 0a00 	vldr	s0, [sp]
 80041f8:	f000 f8b4 	bl	8004364 <__kernel_sinf>
 80041fc:	eeb1 0a40 	vneg.f32	s0, s0
 8004200:	e7e2      	b.n	80041c8 <cosf+0x28>
 8004202:	eddd 0a01 	vldr	s1, [sp, #4]
 8004206:	ed9d 0a00 	vldr	s0, [sp]
 800420a:	f000 f853 	bl	80042b4 <__kernel_cosf>
 800420e:	e7f5      	b.n	80041fc <cosf+0x5c>
 8004210:	eddd 0a01 	vldr	s1, [sp, #4]
 8004214:	ed9d 0a00 	vldr	s0, [sp]
 8004218:	2001      	movs	r0, #1
 800421a:	f000 f8a3 	bl	8004364 <__kernel_sinf>
 800421e:	e7d3      	b.n	80041c8 <cosf+0x28>
 8004220:	3f490fd8 	.word	0x3f490fd8
 8004224:	00000000 	.word	0x00000000

08004228 <sinf>:
 8004228:	ee10 3a10 	vmov	r3, s0
 800422c:	b507      	push	{r0, r1, r2, lr}
 800422e:	4a1f      	ldr	r2, [pc, #124]	@ (80042ac <sinf+0x84>)
 8004230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004234:	4293      	cmp	r3, r2
 8004236:	d807      	bhi.n	8004248 <sinf+0x20>
 8004238:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80042b0 <sinf+0x88>
 800423c:	2000      	movs	r0, #0
 800423e:	b003      	add	sp, #12
 8004240:	f85d eb04 	ldr.w	lr, [sp], #4
 8004244:	f000 b88e 	b.w	8004364 <__kernel_sinf>
 8004248:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800424c:	d304      	bcc.n	8004258 <sinf+0x30>
 800424e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004252:	b003      	add	sp, #12
 8004254:	f85d fb04 	ldr.w	pc, [sp], #4
 8004258:	4668      	mov	r0, sp
 800425a:	f000 f8cb 	bl	80043f4 <__ieee754_rem_pio2f>
 800425e:	f000 0003 	and.w	r0, r0, #3
 8004262:	2801      	cmp	r0, #1
 8004264:	d00a      	beq.n	800427c <sinf+0x54>
 8004266:	2802      	cmp	r0, #2
 8004268:	d00f      	beq.n	800428a <sinf+0x62>
 800426a:	b9c0      	cbnz	r0, 800429e <sinf+0x76>
 800426c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004270:	ed9d 0a00 	vldr	s0, [sp]
 8004274:	2001      	movs	r0, #1
 8004276:	f000 f875 	bl	8004364 <__kernel_sinf>
 800427a:	e7ea      	b.n	8004252 <sinf+0x2a>
 800427c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004280:	ed9d 0a00 	vldr	s0, [sp]
 8004284:	f000 f816 	bl	80042b4 <__kernel_cosf>
 8004288:	e7e3      	b.n	8004252 <sinf+0x2a>
 800428a:	eddd 0a01 	vldr	s1, [sp, #4]
 800428e:	ed9d 0a00 	vldr	s0, [sp]
 8004292:	2001      	movs	r0, #1
 8004294:	f000 f866 	bl	8004364 <__kernel_sinf>
 8004298:	eeb1 0a40 	vneg.f32	s0, s0
 800429c:	e7d9      	b.n	8004252 <sinf+0x2a>
 800429e:	eddd 0a01 	vldr	s1, [sp, #4]
 80042a2:	ed9d 0a00 	vldr	s0, [sp]
 80042a6:	f000 f805 	bl	80042b4 <__kernel_cosf>
 80042aa:	e7f5      	b.n	8004298 <sinf+0x70>
 80042ac:	3f490fd8 	.word	0x3f490fd8
 80042b0:	00000000 	.word	0x00000000

080042b4 <__kernel_cosf>:
 80042b4:	ee10 3a10 	vmov	r3, s0
 80042b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042bc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80042c0:	eef0 6a40 	vmov.f32	s13, s0
 80042c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80042c8:	d204      	bcs.n	80042d4 <__kernel_cosf+0x20>
 80042ca:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80042ce:	ee17 2a90 	vmov	r2, s15
 80042d2:	b342      	cbz	r2, 8004326 <__kernel_cosf+0x72>
 80042d4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80042d8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004344 <__kernel_cosf+0x90>
 80042dc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004348 <__kernel_cosf+0x94>
 80042e0:	4a1a      	ldr	r2, [pc, #104]	@ (800434c <__kernel_cosf+0x98>)
 80042e2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80042e6:	4293      	cmp	r3, r2
 80042e8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004350 <__kernel_cosf+0x9c>
 80042ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80042f0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004354 <__kernel_cosf+0xa0>
 80042f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80042f8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004358 <__kernel_cosf+0xa4>
 80042fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004300:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800435c <__kernel_cosf+0xa8>
 8004304:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004308:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800430c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004310:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004314:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431c:	d804      	bhi.n	8004328 <__kernel_cosf+0x74>
 800431e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004322:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004326:	4770      	bx	lr
 8004328:	4a0d      	ldr	r2, [pc, #52]	@ (8004360 <__kernel_cosf+0xac>)
 800432a:	4293      	cmp	r3, r2
 800432c:	bf9a      	itte	ls
 800432e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004332:	ee07 3a10 	vmovls	s14, r3
 8004336:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800433a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800433e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004342:	e7ec      	b.n	800431e <__kernel_cosf+0x6a>
 8004344:	ad47d74e 	.word	0xad47d74e
 8004348:	310f74f6 	.word	0x310f74f6
 800434c:	3e999999 	.word	0x3e999999
 8004350:	b493f27c 	.word	0xb493f27c
 8004354:	37d00d01 	.word	0x37d00d01
 8004358:	bab60b61 	.word	0xbab60b61
 800435c:	3d2aaaab 	.word	0x3d2aaaab
 8004360:	3f480000 	.word	0x3f480000

08004364 <__kernel_sinf>:
 8004364:	ee10 3a10 	vmov	r3, s0
 8004368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800436c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004370:	d204      	bcs.n	800437c <__kernel_sinf+0x18>
 8004372:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004376:	ee17 3a90 	vmov	r3, s15
 800437a:	b35b      	cbz	r3, 80043d4 <__kernel_sinf+0x70>
 800437c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004380:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80043d8 <__kernel_sinf+0x74>
 8004384:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80043dc <__kernel_sinf+0x78>
 8004388:	eea7 6a27 	vfma.f32	s12, s14, s15
 800438c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80043e0 <__kernel_sinf+0x7c>
 8004390:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004394:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80043e4 <__kernel_sinf+0x80>
 8004398:	eea7 6a87 	vfma.f32	s12, s15, s14
 800439c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80043e8 <__kernel_sinf+0x84>
 80043a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80043a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80043a8:	b930      	cbnz	r0, 80043b8 <__kernel_sinf+0x54>
 80043aa:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80043ec <__kernel_sinf+0x88>
 80043ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 80043b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80043b6:	4770      	bx	lr
 80043b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80043bc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80043c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80043c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80043c8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80043f0 <__kernel_sinf+0x8c>
 80043cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80043d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2f2ec9d3 	.word	0x2f2ec9d3
 80043dc:	b2d72f34 	.word	0xb2d72f34
 80043e0:	3638ef1b 	.word	0x3638ef1b
 80043e4:	b9500d01 	.word	0xb9500d01
 80043e8:	3c088889 	.word	0x3c088889
 80043ec:	be2aaaab 	.word	0xbe2aaaab
 80043f0:	3e2aaaab 	.word	0x3e2aaaab

080043f4 <__ieee754_rem_pio2f>:
 80043f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f6:	ee10 6a10 	vmov	r6, s0
 80043fa:	4b88      	ldr	r3, [pc, #544]	@ (800461c <__ieee754_rem_pio2f+0x228>)
 80043fc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004400:	429d      	cmp	r5, r3
 8004402:	b087      	sub	sp, #28
 8004404:	4604      	mov	r4, r0
 8004406:	d805      	bhi.n	8004414 <__ieee754_rem_pio2f+0x20>
 8004408:	2300      	movs	r3, #0
 800440a:	ed80 0a00 	vstr	s0, [r0]
 800440e:	6043      	str	r3, [r0, #4]
 8004410:	2000      	movs	r0, #0
 8004412:	e022      	b.n	800445a <__ieee754_rem_pio2f+0x66>
 8004414:	4b82      	ldr	r3, [pc, #520]	@ (8004620 <__ieee754_rem_pio2f+0x22c>)
 8004416:	429d      	cmp	r5, r3
 8004418:	d83a      	bhi.n	8004490 <__ieee754_rem_pio2f+0x9c>
 800441a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800441e:	2e00      	cmp	r6, #0
 8004420:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004624 <__ieee754_rem_pio2f+0x230>
 8004424:	4a80      	ldr	r2, [pc, #512]	@ (8004628 <__ieee754_rem_pio2f+0x234>)
 8004426:	f023 030f 	bic.w	r3, r3, #15
 800442a:	dd18      	ble.n	800445e <__ieee754_rem_pio2f+0x6a>
 800442c:	4293      	cmp	r3, r2
 800442e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004432:	bf09      	itett	eq
 8004434:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800462c <__ieee754_rem_pio2f+0x238>
 8004438:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004630 <__ieee754_rem_pio2f+0x23c>
 800443c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004634 <__ieee754_rem_pio2f+0x240>
 8004440:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004444:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800444c:	ed80 7a00 	vstr	s14, [r0]
 8004450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004454:	edc0 7a01 	vstr	s15, [r0, #4]
 8004458:	2001      	movs	r0, #1
 800445a:	b007      	add	sp, #28
 800445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445e:	4293      	cmp	r3, r2
 8004460:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004464:	bf09      	itett	eq
 8004466:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800462c <__ieee754_rem_pio2f+0x238>
 800446a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004630 <__ieee754_rem_pio2f+0x23c>
 800446e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004634 <__ieee754_rem_pio2f+0x240>
 8004472:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004476:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800447a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800447e:	ed80 7a00 	vstr	s14, [r0]
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	edc0 7a01 	vstr	s15, [r0, #4]
 800448a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800448e:	e7e4      	b.n	800445a <__ieee754_rem_pio2f+0x66>
 8004490:	4b69      	ldr	r3, [pc, #420]	@ (8004638 <__ieee754_rem_pio2f+0x244>)
 8004492:	429d      	cmp	r5, r3
 8004494:	d873      	bhi.n	800457e <__ieee754_rem_pio2f+0x18a>
 8004496:	f000 f8dd 	bl	8004654 <fabsf>
 800449a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800463c <__ieee754_rem_pio2f+0x248>
 800449e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80044a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80044a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044ae:	ee17 0a90 	vmov	r0, s15
 80044b2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004624 <__ieee754_rem_pio2f+0x230>
 80044b6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80044ba:	281f      	cmp	r0, #31
 80044bc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004630 <__ieee754_rem_pio2f+0x23c>
 80044c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c4:	eeb1 6a47 	vneg.f32	s12, s14
 80044c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80044cc:	ee16 1a90 	vmov	r1, s13
 80044d0:	dc09      	bgt.n	80044e6 <__ieee754_rem_pio2f+0xf2>
 80044d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004640 <__ieee754_rem_pio2f+0x24c>)
 80044d4:	1e47      	subs	r7, r0, #1
 80044d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80044da:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80044de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d107      	bne.n	80044f6 <__ieee754_rem_pio2f+0x102>
 80044e6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80044ea:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80044ee:	2a08      	cmp	r2, #8
 80044f0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80044f4:	dc14      	bgt.n	8004520 <__ieee754_rem_pio2f+0x12c>
 80044f6:	6021      	str	r1, [r4, #0]
 80044f8:	ed94 7a00 	vldr	s14, [r4]
 80044fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004500:	2e00      	cmp	r6, #0
 8004502:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004506:	ed84 0a01 	vstr	s0, [r4, #4]
 800450a:	daa6      	bge.n	800445a <__ieee754_rem_pio2f+0x66>
 800450c:	eeb1 7a47 	vneg.f32	s14, s14
 8004510:	eeb1 0a40 	vneg.f32	s0, s0
 8004514:	ed84 7a00 	vstr	s14, [r4]
 8004518:	ed84 0a01 	vstr	s0, [r4, #4]
 800451c:	4240      	negs	r0, r0
 800451e:	e79c      	b.n	800445a <__ieee754_rem_pio2f+0x66>
 8004520:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800462c <__ieee754_rem_pio2f+0x238>
 8004524:	eef0 6a40 	vmov.f32	s13, s0
 8004528:	eee6 6a25 	vfma.f32	s13, s12, s11
 800452c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004530:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004534:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004634 <__ieee754_rem_pio2f+0x240>
 8004538:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800453c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004540:	ee15 2a90 	vmov	r2, s11
 8004544:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004548:	1a5b      	subs	r3, r3, r1
 800454a:	2b19      	cmp	r3, #25
 800454c:	dc04      	bgt.n	8004558 <__ieee754_rem_pio2f+0x164>
 800454e:	edc4 5a00 	vstr	s11, [r4]
 8004552:	eeb0 0a66 	vmov.f32	s0, s13
 8004556:	e7cf      	b.n	80044f8 <__ieee754_rem_pio2f+0x104>
 8004558:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004644 <__ieee754_rem_pio2f+0x250>
 800455c:	eeb0 0a66 	vmov.f32	s0, s13
 8004560:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004564:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004568:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004648 <__ieee754_rem_pio2f+0x254>
 800456c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004570:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004574:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004578:	ed84 7a00 	vstr	s14, [r4]
 800457c:	e7bc      	b.n	80044f8 <__ieee754_rem_pio2f+0x104>
 800457e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004582:	d306      	bcc.n	8004592 <__ieee754_rem_pio2f+0x19e>
 8004584:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004588:	edc0 7a01 	vstr	s15, [r0, #4]
 800458c:	edc0 7a00 	vstr	s15, [r0]
 8004590:	e73e      	b.n	8004410 <__ieee754_rem_pio2f+0x1c>
 8004592:	15ea      	asrs	r2, r5, #23
 8004594:	3a86      	subs	r2, #134	@ 0x86
 8004596:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80045a2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800464c <__ieee754_rem_pio2f+0x258>
 80045a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80045b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80045ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80045c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80045d6:	d11e      	bne.n	8004616 <__ieee754_rem_pio2f+0x222>
 80045d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80045dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2302      	movne	r3, #2
 80045e6:	491a      	ldr	r1, [pc, #104]	@ (8004650 <__ieee754_rem_pio2f+0x25c>)
 80045e8:	9101      	str	r1, [sp, #4]
 80045ea:	2102      	movs	r1, #2
 80045ec:	9100      	str	r1, [sp, #0]
 80045ee:	a803      	add	r0, sp, #12
 80045f0:	4621      	mov	r1, r4
 80045f2:	f000 f837 	bl	8004664 <__kernel_rem_pio2f>
 80045f6:	2e00      	cmp	r6, #0
 80045f8:	f6bf af2f 	bge.w	800445a <__ieee754_rem_pio2f+0x66>
 80045fc:	edd4 7a00 	vldr	s15, [r4]
 8004600:	eef1 7a67 	vneg.f32	s15, s15
 8004604:	edc4 7a00 	vstr	s15, [r4]
 8004608:	edd4 7a01 	vldr	s15, [r4, #4]
 800460c:	eef1 7a67 	vneg.f32	s15, s15
 8004610:	edc4 7a01 	vstr	s15, [r4, #4]
 8004614:	e782      	b.n	800451c <__ieee754_rem_pio2f+0x128>
 8004616:	2303      	movs	r3, #3
 8004618:	e7e5      	b.n	80045e6 <__ieee754_rem_pio2f+0x1f2>
 800461a:	bf00      	nop
 800461c:	3f490fd8 	.word	0x3f490fd8
 8004620:	4016cbe3 	.word	0x4016cbe3
 8004624:	3fc90f80 	.word	0x3fc90f80
 8004628:	3fc90fd0 	.word	0x3fc90fd0
 800462c:	37354400 	.word	0x37354400
 8004630:	37354443 	.word	0x37354443
 8004634:	2e85a308 	.word	0x2e85a308
 8004638:	43490f80 	.word	0x43490f80
 800463c:	3f22f984 	.word	0x3f22f984
 8004640:	08004e68 	.word	0x08004e68
 8004644:	2e85a300 	.word	0x2e85a300
 8004648:	248d3132 	.word	0x248d3132
 800464c:	43800000 	.word	0x43800000
 8004650:	08004ee8 	.word	0x08004ee8

08004654 <fabsf>:
 8004654:	ee10 3a10 	vmov	r3, s0
 8004658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800465c:	ee00 3a10 	vmov	s0, r3
 8004660:	4770      	bx	lr
	...

08004664 <__kernel_rem_pio2f>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	ed2d 8b04 	vpush	{d8-d9}
 800466c:	b0d9      	sub	sp, #356	@ 0x164
 800466e:	4690      	mov	r8, r2
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	4ab6      	ldr	r2, [pc, #728]	@ (800494c <__kernel_rem_pio2f+0x2e8>)
 8004674:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004676:	f118 0f04 	cmn.w	r8, #4
 800467a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800467e:	460f      	mov	r7, r1
 8004680:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004684:	db26      	blt.n	80046d4 <__kernel_rem_pio2f+0x70>
 8004686:	f1b8 0203 	subs.w	r2, r8, #3
 800468a:	bf48      	it	mi
 800468c:	f108 0204 	addmi.w	r2, r8, #4
 8004690:	10d2      	asrs	r2, r2, #3
 8004692:	1c55      	adds	r5, r2, #1
 8004694:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004696:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 800469a:	00e8      	lsls	r0, r5, #3
 800469c:	eba2 060b 	sub.w	r6, r2, fp
 80046a0:	9002      	str	r0, [sp, #8]
 80046a2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80046a6:	eb0a 0c0b 	add.w	ip, sl, fp
 80046aa:	ac1c      	add	r4, sp, #112	@ 0x70
 80046ac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80046b0:	2000      	movs	r0, #0
 80046b2:	4560      	cmp	r0, ip
 80046b4:	dd10      	ble.n	80046d8 <__kernel_rem_pio2f+0x74>
 80046b6:	a91c      	add	r1, sp, #112	@ 0x70
 80046b8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80046bc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80046c0:	2600      	movs	r6, #0
 80046c2:	4556      	cmp	r6, sl
 80046c4:	dc24      	bgt.n	8004710 <__kernel_rem_pio2f+0xac>
 80046c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80046ca:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 80046ce:	4684      	mov	ip, r0
 80046d0:	2400      	movs	r4, #0
 80046d2:	e016      	b.n	8004702 <__kernel_rem_pio2f+0x9e>
 80046d4:	2200      	movs	r2, #0
 80046d6:	e7dc      	b.n	8004692 <__kernel_rem_pio2f+0x2e>
 80046d8:	42c6      	cmn	r6, r0
 80046da:	bf5d      	ittte	pl
 80046dc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80046e0:	ee07 1a90 	vmovpl	s15, r1
 80046e4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80046e8:	eef0 7a47 	vmovmi.f32	s15, s14
 80046ec:	ece4 7a01 	vstmia	r4!, {s15}
 80046f0:	3001      	adds	r0, #1
 80046f2:	e7de      	b.n	80046b2 <__kernel_rem_pio2f+0x4e>
 80046f4:	ecfe 6a01 	vldmia	lr!, {s13}
 80046f8:	ed3c 7a01 	vldmdb	ip!, {s14}
 80046fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004700:	3401      	adds	r4, #1
 8004702:	455c      	cmp	r4, fp
 8004704:	ddf6      	ble.n	80046f4 <__kernel_rem_pio2f+0x90>
 8004706:	ece9 7a01 	vstmia	r9!, {s15}
 800470a:	3601      	adds	r6, #1
 800470c:	3004      	adds	r0, #4
 800470e:	e7d8      	b.n	80046c2 <__kernel_rem_pio2f+0x5e>
 8004710:	a908      	add	r1, sp, #32
 8004712:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004716:	9104      	str	r1, [sp, #16]
 8004718:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800471a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8004958 <__kernel_rem_pio2f+0x2f4>
 800471e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8004954 <__kernel_rem_pio2f+0x2f0>
 8004722:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004726:	9203      	str	r2, [sp, #12]
 8004728:	4654      	mov	r4, sl
 800472a:	00a2      	lsls	r2, r4, #2
 800472c:	9205      	str	r2, [sp, #20]
 800472e:	aa58      	add	r2, sp, #352	@ 0x160
 8004730:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004734:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004738:	a944      	add	r1, sp, #272	@ 0x110
 800473a:	aa08      	add	r2, sp, #32
 800473c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004740:	4694      	mov	ip, r2
 8004742:	4626      	mov	r6, r4
 8004744:	2e00      	cmp	r6, #0
 8004746:	dc4c      	bgt.n	80047e2 <__kernel_rem_pio2f+0x17e>
 8004748:	4628      	mov	r0, r5
 800474a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800474e:	f000 fa35 	bl	8004bbc <scalbnf>
 8004752:	eeb0 8a40 	vmov.f32	s16, s0
 8004756:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800475a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800475e:	f000 f9e9 	bl	8004b34 <floorf>
 8004762:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004766:	eea0 8a67 	vfms.f32	s16, s0, s15
 800476a:	2d00      	cmp	r5, #0
 800476c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004770:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004774:	ee17 9a90 	vmov	r9, s15
 8004778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004780:	dd41      	ble.n	8004806 <__kernel_rem_pio2f+0x1a2>
 8004782:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8004786:	a908      	add	r1, sp, #32
 8004788:	f1c5 0e08 	rsb	lr, r5, #8
 800478c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8004790:	fa46 f00e 	asr.w	r0, r6, lr
 8004794:	4481      	add	r9, r0
 8004796:	fa00 f00e 	lsl.w	r0, r0, lr
 800479a:	1a36      	subs	r6, r6, r0
 800479c:	f1c5 0007 	rsb	r0, r5, #7
 80047a0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80047a4:	4106      	asrs	r6, r0
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	dd3c      	ble.n	8004824 <__kernel_rem_pio2f+0x1c0>
 80047aa:	f04f 0e00 	mov.w	lr, #0
 80047ae:	f109 0901 	add.w	r9, r9, #1
 80047b2:	4670      	mov	r0, lr
 80047b4:	4574      	cmp	r4, lr
 80047b6:	dc68      	bgt.n	800488a <__kernel_rem_pio2f+0x226>
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	dd03      	ble.n	80047c4 <__kernel_rem_pio2f+0x160>
 80047bc:	2d01      	cmp	r5, #1
 80047be:	d074      	beq.n	80048aa <__kernel_rem_pio2f+0x246>
 80047c0:	2d02      	cmp	r5, #2
 80047c2:	d07d      	beq.n	80048c0 <__kernel_rem_pio2f+0x25c>
 80047c4:	2e02      	cmp	r6, #2
 80047c6:	d12d      	bne.n	8004824 <__kernel_rem_pio2f+0x1c0>
 80047c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80047cc:	ee30 8a48 	vsub.f32	s16, s0, s16
 80047d0:	b340      	cbz	r0, 8004824 <__kernel_rem_pio2f+0x1c0>
 80047d2:	4628      	mov	r0, r5
 80047d4:	9306      	str	r3, [sp, #24]
 80047d6:	f000 f9f1 	bl	8004bbc <scalbnf>
 80047da:	9b06      	ldr	r3, [sp, #24]
 80047dc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80047e0:	e020      	b.n	8004824 <__kernel_rem_pio2f+0x1c0>
 80047e2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80047e6:	3e01      	subs	r6, #1
 80047e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80047f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80047f8:	ecac 0a01 	vstmia	ip!, {s0}
 80047fc:	ed30 0a01 	vldmdb	r0!, {s0}
 8004800:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004804:	e79e      	b.n	8004744 <__kernel_rem_pio2f+0xe0>
 8004806:	d105      	bne.n	8004814 <__kernel_rem_pio2f+0x1b0>
 8004808:	1e60      	subs	r0, r4, #1
 800480a:	a908      	add	r1, sp, #32
 800480c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004810:	11f6      	asrs	r6, r6, #7
 8004812:	e7c8      	b.n	80047a6 <__kernel_rem_pio2f+0x142>
 8004814:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004818:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800481c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004820:	da31      	bge.n	8004886 <__kernel_rem_pio2f+0x222>
 8004822:	2600      	movs	r6, #0
 8004824:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482c:	f040 8098 	bne.w	8004960 <__kernel_rem_pio2f+0x2fc>
 8004830:	1e60      	subs	r0, r4, #1
 8004832:	2200      	movs	r2, #0
 8004834:	4550      	cmp	r0, sl
 8004836:	da4b      	bge.n	80048d0 <__kernel_rem_pio2f+0x26c>
 8004838:	2a00      	cmp	r2, #0
 800483a:	d065      	beq.n	8004908 <__kernel_rem_pio2f+0x2a4>
 800483c:	3c01      	subs	r4, #1
 800483e:	ab08      	add	r3, sp, #32
 8004840:	3d08      	subs	r5, #8
 8004842:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f8      	beq.n	800483c <__kernel_rem_pio2f+0x1d8>
 800484a:	4628      	mov	r0, r5
 800484c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004850:	f000 f9b4 	bl	8004bbc <scalbnf>
 8004854:	1c63      	adds	r3, r4, #1
 8004856:	aa44      	add	r2, sp, #272	@ 0x110
 8004858:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004958 <__kernel_rem_pio2f+0x2f4>
 800485c:	0099      	lsls	r1, r3, #2
 800485e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004862:	4623      	mov	r3, r4
 8004864:	2b00      	cmp	r3, #0
 8004866:	f280 80a9 	bge.w	80049bc <__kernel_rem_pio2f+0x358>
 800486a:	4623      	mov	r3, r4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f2c0 80c7 	blt.w	8004a00 <__kernel_rem_pio2f+0x39c>
 8004872:	aa44      	add	r2, sp, #272	@ 0x110
 8004874:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004878:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004950 <__kernel_rem_pio2f+0x2ec>
 800487c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 8004880:	2000      	movs	r0, #0
 8004882:	1ae2      	subs	r2, r4, r3
 8004884:	e0b1      	b.n	80049ea <__kernel_rem_pio2f+0x386>
 8004886:	2602      	movs	r6, #2
 8004888:	e78f      	b.n	80047aa <__kernel_rem_pio2f+0x146>
 800488a:	f852 1b04 	ldr.w	r1, [r2], #4
 800488e:	b948      	cbnz	r0, 80048a4 <__kernel_rem_pio2f+0x240>
 8004890:	b121      	cbz	r1, 800489c <__kernel_rem_pio2f+0x238>
 8004892:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004896:	f842 1c04 	str.w	r1, [r2, #-4]
 800489a:	2101      	movs	r1, #1
 800489c:	f10e 0e01 	add.w	lr, lr, #1
 80048a0:	4608      	mov	r0, r1
 80048a2:	e787      	b.n	80047b4 <__kernel_rem_pio2f+0x150>
 80048a4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80048a8:	e7f5      	b.n	8004896 <__kernel_rem_pio2f+0x232>
 80048aa:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80048ae:	aa08      	add	r2, sp, #32
 80048b0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80048b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048b8:	a908      	add	r1, sp, #32
 80048ba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80048be:	e781      	b.n	80047c4 <__kernel_rem_pio2f+0x160>
 80048c0:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80048c4:	aa08      	add	r2, sp, #32
 80048c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80048ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80048ce:	e7f3      	b.n	80048b8 <__kernel_rem_pio2f+0x254>
 80048d0:	a908      	add	r1, sp, #32
 80048d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80048d6:	3801      	subs	r0, #1
 80048d8:	430a      	orrs	r2, r1
 80048da:	e7ab      	b.n	8004834 <__kernel_rem_pio2f+0x1d0>
 80048dc:	3201      	adds	r2, #1
 80048de:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80048e2:	2e00      	cmp	r6, #0
 80048e4:	d0fa      	beq.n	80048dc <__kernel_rem_pio2f+0x278>
 80048e6:	9905      	ldr	r1, [sp, #20]
 80048e8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80048ec:	eb0d 0001 	add.w	r0, sp, r1
 80048f0:	18e6      	adds	r6, r4, r3
 80048f2:	a91c      	add	r1, sp, #112	@ 0x70
 80048f4:	f104 0c01 	add.w	ip, r4, #1
 80048f8:	384c      	subs	r0, #76	@ 0x4c
 80048fa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80048fe:	4422      	add	r2, r4
 8004900:	4562      	cmp	r2, ip
 8004902:	da04      	bge.n	800490e <__kernel_rem_pio2f+0x2aa>
 8004904:	4614      	mov	r4, r2
 8004906:	e710      	b.n	800472a <__kernel_rem_pio2f+0xc6>
 8004908:	9804      	ldr	r0, [sp, #16]
 800490a:	2201      	movs	r2, #1
 800490c:	e7e7      	b.n	80048de <__kernel_rem_pio2f+0x27a>
 800490e:	9903      	ldr	r1, [sp, #12]
 8004910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004914:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	ee07 1a90 	vmov	s15, r1
 800491e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004922:	2400      	movs	r4, #0
 8004924:	ece6 7a01 	vstmia	r6!, {s15}
 8004928:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 800492c:	46b1      	mov	r9, r6
 800492e:	455c      	cmp	r4, fp
 8004930:	dd04      	ble.n	800493c <__kernel_rem_pio2f+0x2d8>
 8004932:	ece0 7a01 	vstmia	r0!, {s15}
 8004936:	f10c 0c01 	add.w	ip, ip, #1
 800493a:	e7e1      	b.n	8004900 <__kernel_rem_pio2f+0x29c>
 800493c:	ecfe 6a01 	vldmia	lr!, {s13}
 8004940:	ed39 7a01 	vldmdb	r9!, {s14}
 8004944:	3401      	adds	r4, #1
 8004946:	eee6 7a87 	vfma.f32	s15, s13, s14
 800494a:	e7f0      	b.n	800492e <__kernel_rem_pio2f+0x2ca>
 800494c:	0800522c 	.word	0x0800522c
 8004950:	08005200 	.word	0x08005200
 8004954:	43800000 	.word	0x43800000
 8004958:	3b800000 	.word	0x3b800000
 800495c:	00000000 	.word	0x00000000
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	eeb0 0a48 	vmov.f32	s0, s16
 8004966:	eba3 0008 	sub.w	r0, r3, r8
 800496a:	f000 f927 	bl	8004bbc <scalbnf>
 800496e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004954 <__kernel_rem_pio2f+0x2f0>
 8004972:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	db19      	blt.n	80049b0 <__kernel_rem_pio2f+0x34c>
 800497c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004958 <__kernel_rem_pio2f+0x2f4>
 8004980:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004984:	aa08      	add	r2, sp, #32
 8004986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800498a:	3508      	adds	r5, #8
 800498c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004990:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004998:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800499c:	ee10 3a10 	vmov	r3, s0
 80049a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80049a4:	ee17 3a90 	vmov	r3, s15
 80049a8:	3401      	adds	r4, #1
 80049aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80049ae:	e74c      	b.n	800484a <__kernel_rem_pio2f+0x1e6>
 80049b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80049b4:	aa08      	add	r2, sp, #32
 80049b6:	ee10 3a10 	vmov	r3, s0
 80049ba:	e7f6      	b.n	80049aa <__kernel_rem_pio2f+0x346>
 80049bc:	a808      	add	r0, sp, #32
 80049be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80049c2:	9001      	str	r0, [sp, #4]
 80049c4:	ee07 0a90 	vmov	s15, r0
 80049c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049cc:	3b01      	subs	r3, #1
 80049ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80049d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80049d6:	ed62 7a01 	vstmdb	r2!, {s15}
 80049da:	e743      	b.n	8004864 <__kernel_rem_pio2f+0x200>
 80049dc:	ecfc 6a01 	vldmia	ip!, {s13}
 80049e0:	ecb5 7a01 	vldmia	r5!, {s14}
 80049e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80049e8:	3001      	adds	r0, #1
 80049ea:	4550      	cmp	r0, sl
 80049ec:	dc01      	bgt.n	80049f2 <__kernel_rem_pio2f+0x38e>
 80049ee:	4290      	cmp	r0, r2
 80049f0:	ddf4      	ble.n	80049dc <__kernel_rem_pio2f+0x378>
 80049f2:	a858      	add	r0, sp, #352	@ 0x160
 80049f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80049f8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80049fc:	3b01      	subs	r3, #1
 80049fe:	e735      	b.n	800486c <__kernel_rem_pio2f+0x208>
 8004a00:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	dc09      	bgt.n	8004a1a <__kernel_rem_pio2f+0x3b6>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dc27      	bgt.n	8004a5a <__kernel_rem_pio2f+0x3f6>
 8004a0a:	d040      	beq.n	8004a8e <__kernel_rem_pio2f+0x42a>
 8004a0c:	f009 0007 	and.w	r0, r9, #7
 8004a10:	b059      	add	sp, #356	@ 0x164
 8004a12:	ecbd 8b04 	vpop	{d8-d9}
 8004a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d1f5      	bne.n	8004a0c <__kernel_rem_pio2f+0x3a8>
 8004a20:	aa30      	add	r2, sp, #192	@ 0xc0
 8004a22:	1f0b      	subs	r3, r1, #4
 8004a24:	4413      	add	r3, r2
 8004a26:	461a      	mov	r2, r3
 8004a28:	4620      	mov	r0, r4
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	dc50      	bgt.n	8004ad0 <__kernel_rem_pio2f+0x46c>
 8004a2e:	4622      	mov	r2, r4
 8004a30:	2a01      	cmp	r2, #1
 8004a32:	dc5d      	bgt.n	8004af0 <__kernel_rem_pio2f+0x48c>
 8004a34:	ab30      	add	r3, sp, #192	@ 0xc0
 8004a36:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 8004a3a:	440b      	add	r3, r1
 8004a3c:	2c01      	cmp	r4, #1
 8004a3e:	dc67      	bgt.n	8004b10 <__kernel_rem_pio2f+0x4ac>
 8004a40:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004a44:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	d167      	bne.n	8004b1c <__kernel_rem_pio2f+0x4b8>
 8004a4c:	edc7 6a00 	vstr	s13, [r7]
 8004a50:	ed87 7a01 	vstr	s14, [r7, #4]
 8004a54:	edc7 7a02 	vstr	s15, [r7, #8]
 8004a58:	e7d8      	b.n	8004a0c <__kernel_rem_pio2f+0x3a8>
 8004a5a:	ab30      	add	r3, sp, #192	@ 0xc0
 8004a5c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 8004a60:	440b      	add	r3, r1
 8004a62:	4622      	mov	r2, r4
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	da24      	bge.n	8004ab2 <__kernel_rem_pio2f+0x44e>
 8004a68:	b34e      	cbz	r6, 8004abe <__kernel_rem_pio2f+0x45a>
 8004a6a:	eef1 7a47 	vneg.f32	s15, s14
 8004a6e:	edc7 7a00 	vstr	s15, [r7]
 8004a72:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a7a:	aa31      	add	r2, sp, #196	@ 0xc4
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	da20      	bge.n	8004ac4 <__kernel_rem_pio2f+0x460>
 8004a82:	b10e      	cbz	r6, 8004a88 <__kernel_rem_pio2f+0x424>
 8004a84:	eef1 7a67 	vneg.f32	s15, s15
 8004a88:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a8c:	e7be      	b.n	8004a0c <__kernel_rem_pio2f+0x3a8>
 8004a8e:	ab30      	add	r3, sp, #192	@ 0xc0
 8004a90:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800495c <__kernel_rem_pio2f+0x2f8>
 8004a94:	440b      	add	r3, r1
 8004a96:	2c00      	cmp	r4, #0
 8004a98:	da05      	bge.n	8004aa6 <__kernel_rem_pio2f+0x442>
 8004a9a:	b10e      	cbz	r6, 8004aa0 <__kernel_rem_pio2f+0x43c>
 8004a9c:	eef1 7a67 	vneg.f32	s15, s15
 8004aa0:	edc7 7a00 	vstr	s15, [r7]
 8004aa4:	e7b2      	b.n	8004a0c <__kernel_rem_pio2f+0x3a8>
 8004aa6:	ed33 7a01 	vldmdb	r3!, {s14}
 8004aaa:	3c01      	subs	r4, #1
 8004aac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ab0:	e7f1      	b.n	8004a96 <__kernel_rem_pio2f+0x432>
 8004ab2:	ed73 7a01 	vldmdb	r3!, {s15}
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004abc:	e7d2      	b.n	8004a64 <__kernel_rem_pio2f+0x400>
 8004abe:	eef0 7a47 	vmov.f32	s15, s14
 8004ac2:	e7d4      	b.n	8004a6e <__kernel_rem_pio2f+0x40a>
 8004ac4:	ecb2 7a01 	vldmia	r2!, {s14}
 8004ac8:	3301      	adds	r3, #1
 8004aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ace:	e7d6      	b.n	8004a7e <__kernel_rem_pio2f+0x41a>
 8004ad0:	ed72 7a01 	vldmdb	r2!, {s15}
 8004ad4:	edd2 6a01 	vldr	s13, [r2, #4]
 8004ad8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004adc:	3801      	subs	r0, #1
 8004ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ae2:	ed82 7a00 	vstr	s14, [r2]
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	edc2 7a01 	vstr	s15, [r2, #4]
 8004aee:	e79c      	b.n	8004a2a <__kernel_rem_pio2f+0x3c6>
 8004af0:	ed73 7a01 	vldmdb	r3!, {s15}
 8004af4:	edd3 6a01 	vldr	s13, [r3, #4]
 8004af8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004afc:	3a01      	subs	r2, #1
 8004afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b02:	ed83 7a00 	vstr	s14, [r3]
 8004b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004b0e:	e78f      	b.n	8004a30 <__kernel_rem_pio2f+0x3cc>
 8004b10:	ed33 7a01 	vldmdb	r3!, {s14}
 8004b14:	3c01      	subs	r4, #1
 8004b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b1a:	e78f      	b.n	8004a3c <__kernel_rem_pio2f+0x3d8>
 8004b1c:	eef1 6a66 	vneg.f32	s13, s13
 8004b20:	eeb1 7a47 	vneg.f32	s14, s14
 8004b24:	edc7 6a00 	vstr	s13, [r7]
 8004b28:	ed87 7a01 	vstr	s14, [r7, #4]
 8004b2c:	eef1 7a67 	vneg.f32	s15, s15
 8004b30:	e790      	b.n	8004a54 <__kernel_rem_pio2f+0x3f0>
 8004b32:	bf00      	nop

08004b34 <floorf>:
 8004b34:	ee10 3a10 	vmov	r3, s0
 8004b38:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004b3c:	3a7f      	subs	r2, #127	@ 0x7f
 8004b3e:	2a16      	cmp	r2, #22
 8004b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b44:	dc2b      	bgt.n	8004b9e <floorf+0x6a>
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	da12      	bge.n	8004b70 <floorf+0x3c>
 8004b4a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004bb0 <floorf+0x7c>
 8004b4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	dd06      	ble.n	8004b6a <floorf+0x36>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da24      	bge.n	8004baa <floorf+0x76>
 8004b60:	2900      	cmp	r1, #0
 8004b62:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <floorf+0x80>)
 8004b64:	bf08      	it	eq
 8004b66:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004b6a:	ee00 3a10 	vmov	s0, r3
 8004b6e:	4770      	bx	lr
 8004b70:	4911      	ldr	r1, [pc, #68]	@ (8004bb8 <floorf+0x84>)
 8004b72:	4111      	asrs	r1, r2
 8004b74:	420b      	tst	r3, r1
 8004b76:	d0fa      	beq.n	8004b6e <floorf+0x3a>
 8004b78:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004bb0 <floorf+0x7c>
 8004b7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b88:	ddef      	ble.n	8004b6a <floorf+0x36>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfbe      	ittt	lt
 8004b8e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8004b92:	fa40 f202 	asrlt.w	r2, r0, r2
 8004b96:	189b      	addlt	r3, r3, r2
 8004b98:	ea23 0301 	bic.w	r3, r3, r1
 8004b9c:	e7e5      	b.n	8004b6a <floorf+0x36>
 8004b9e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004ba2:	d3e4      	bcc.n	8004b6e <floorf+0x3a>
 8004ba4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004ba8:	4770      	bx	lr
 8004baa:	2300      	movs	r3, #0
 8004bac:	e7dd      	b.n	8004b6a <floorf+0x36>
 8004bae:	bf00      	nop
 8004bb0:	7149f2ca 	.word	0x7149f2ca
 8004bb4:	bf800000 	.word	0xbf800000
 8004bb8:	007fffff 	.word	0x007fffff

08004bbc <scalbnf>:
 8004bbc:	ee10 3a10 	vmov	r3, s0
 8004bc0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004bc4:	d02b      	beq.n	8004c1e <scalbnf+0x62>
 8004bc6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004bca:	d302      	bcc.n	8004bd2 <scalbnf+0x16>
 8004bcc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004bd0:	4770      	bx	lr
 8004bd2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004bd6:	d123      	bne.n	8004c20 <scalbnf+0x64>
 8004bd8:	4b24      	ldr	r3, [pc, #144]	@ (8004c6c <scalbnf+0xb0>)
 8004bda:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8004c70 <scalbnf+0xb4>
 8004bde:	4298      	cmp	r0, r3
 8004be0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004be4:	db17      	blt.n	8004c16 <scalbnf+0x5a>
 8004be6:	ee10 3a10 	vmov	r3, s0
 8004bea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004bee:	3a19      	subs	r2, #25
 8004bf0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004bf4:	4288      	cmp	r0, r1
 8004bf6:	dd15      	ble.n	8004c24 <scalbnf+0x68>
 8004bf8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8004c74 <scalbnf+0xb8>
 8004bfc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8004c78 <scalbnf+0xbc>
 8004c00:	ee10 3a10 	vmov	r3, s0
 8004c04:	eeb0 7a67 	vmov.f32	s14, s15
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bfb8      	it	lt
 8004c0c:	eef0 7a66 	vmovlt.f32	s15, s13
 8004c10:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004c14:	4770      	bx	lr
 8004c16:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004c7c <scalbnf+0xc0>
 8004c1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004c1e:	4770      	bx	lr
 8004c20:	0dd2      	lsrs	r2, r2, #23
 8004c22:	e7e5      	b.n	8004bf0 <scalbnf+0x34>
 8004c24:	4410      	add	r0, r2
 8004c26:	28fe      	cmp	r0, #254	@ 0xfe
 8004c28:	dce6      	bgt.n	8004bf8 <scalbnf+0x3c>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	dd06      	ble.n	8004c3c <scalbnf+0x80>
 8004c2e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004c32:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004c36:	ee00 3a10 	vmov	s0, r3
 8004c3a:	4770      	bx	lr
 8004c3c:	f110 0f16 	cmn.w	r0, #22
 8004c40:	da09      	bge.n	8004c56 <scalbnf+0x9a>
 8004c42:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8004c7c <scalbnf+0xc0>
 8004c46:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004c80 <scalbnf+0xc4>
 8004c4a:	ee10 3a10 	vmov	r3, s0
 8004c4e:	eeb0 7a67 	vmov.f32	s14, s15
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	e7d9      	b.n	8004c0a <scalbnf+0x4e>
 8004c56:	3019      	adds	r0, #25
 8004c58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004c5c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004c60:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004c84 <scalbnf+0xc8>
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	e7d7      	b.n	8004c1a <scalbnf+0x5e>
 8004c6a:	bf00      	nop
 8004c6c:	ffff3cb0 	.word	0xffff3cb0
 8004c70:	4c000000 	.word	0x4c000000
 8004c74:	7149f2ca 	.word	0x7149f2ca
 8004c78:	f149f2ca 	.word	0xf149f2ca
 8004c7c:	0da24260 	.word	0x0da24260
 8004c80:	8da24260 	.word	0x8da24260
 8004c84:	33000000 	.word	0x33000000

08004c88 <free>:
 8004c88:	4b02      	ldr	r3, [pc, #8]	@ (8004c94 <free+0xc>)
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	f000 b84b 	b.w	8004d28 <_free_r>
 8004c92:	bf00      	nop
 8004c94:	20000014 	.word	0x20000014

08004c98 <__malloc_lock>:
 8004c98:	4801      	ldr	r0, [pc, #4]	@ (8004ca0 <__malloc_lock+0x8>)
 8004c9a:	f000 b835 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20000738 	.word	0x20000738

08004ca4 <__malloc_unlock>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	@ (8004cac <__malloc_unlock+0x8>)
 8004ca6:	f000 b830 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000738 	.word	0x20000738

08004cb0 <memset>:
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memset+0xa>
 8004cb8:	4770      	bx	lr
 8004cba:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbe:	e7f9      	b.n	8004cb4 <memset+0x4>

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 f872 	bl	8004dbc <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08005240 	.word	0x08005240
 8004cfc:	08005240 	.word	0x08005240
 8004d00:	08005240 	.word	0x08005240
 8004d04:	08005248 	.word	0x08005248

08004d08 <__retarget_lock_acquire_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <__retarget_lock_release_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <memcpy>:
 8004d0c:	440a      	add	r2, r1
 8004d0e:	4291      	cmp	r1, r2
 8004d10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d14:	d100      	bne.n	8004d18 <memcpy+0xc>
 8004d16:	4770      	bx	lr
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d22:	4291      	cmp	r1, r2
 8004d24:	d1f9      	bne.n	8004d1a <memcpy+0xe>
 8004d26:	bd10      	pop	{r4, pc}

08004d28 <_free_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	d041      	beq.n	8004db4 <_free_r+0x8c>
 8004d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d34:	1f0c      	subs	r4, r1, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfb8      	it	lt
 8004d3a:	18e4      	addlt	r4, r4, r3
 8004d3c:	f7ff ffac 	bl	8004c98 <__malloc_lock>
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <_free_r+0x90>)
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	b933      	cbnz	r3, 8004d54 <_free_r+0x2c>
 8004d46:	6063      	str	r3, [r4, #4]
 8004d48:	6014      	str	r4, [r2, #0]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d50:	f7ff bfa8 	b.w	8004ca4 <__malloc_unlock>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d908      	bls.n	8004d6a <_free_r+0x42>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	1821      	adds	r1, r4, r0
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf01      	itttt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	1809      	addeq	r1, r1, r0
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	e7ed      	b.n	8004d46 <_free_r+0x1e>
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b10b      	cbz	r3, 8004d74 <_free_r+0x4c>
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d9fa      	bls.n	8004d6a <_free_r+0x42>
 8004d74:	6811      	ldr	r1, [r2, #0]
 8004d76:	1850      	adds	r0, r2, r1
 8004d78:	42a0      	cmp	r0, r4
 8004d7a:	d10b      	bne.n	8004d94 <_free_r+0x6c>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	4401      	add	r1, r0
 8004d80:	1850      	adds	r0, r2, r1
 8004d82:	4283      	cmp	r3, r0
 8004d84:	6011      	str	r1, [r2, #0]
 8004d86:	d1e0      	bne.n	8004d4a <_free_r+0x22>
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	6053      	str	r3, [r2, #4]
 8004d8e:	4408      	add	r0, r1
 8004d90:	6010      	str	r0, [r2, #0]
 8004d92:	e7da      	b.n	8004d4a <_free_r+0x22>
 8004d94:	d902      	bls.n	8004d9c <_free_r+0x74>
 8004d96:	230c      	movs	r3, #12
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	e7d6      	b.n	8004d4a <_free_r+0x22>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	1821      	adds	r1, r4, r0
 8004da0:	428b      	cmp	r3, r1
 8004da2:	bf04      	itt	eq
 8004da4:	6819      	ldreq	r1, [r3, #0]
 8004da6:	685b      	ldreq	r3, [r3, #4]
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	bf04      	itt	eq
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	6054      	str	r4, [r2, #4]
 8004db2:	e7ca      	b.n	8004d4a <_free_r+0x22>
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
 8004db6:	bf00      	nop
 8004db8:	200005fc 	.word	0x200005fc

08004dbc <_init>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_fini>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr
