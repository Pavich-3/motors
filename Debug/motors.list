
motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006440  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080065d8  080065d8  000075d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a50  08006a50  00008064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a58  08006a58  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006a68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000064  08006acc  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  08006acc  00008ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018288  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e18  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00023138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0c  00000000  00000000  00023e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019540  00000000  00000000  00024834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a83  00000000  00000000  0003dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915a9  00000000  00000000  000507f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1da0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  000e1de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e5820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065c0 	.word	0x080065c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	080065c0 	.word	0x080065c0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_ZN3GFXC1Ess>:
#include "GFX.hpp"

GFX::GFX(int16_t w, int16_t h) : _width(w), _height(h) {}
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
 8000510:	4613      	mov	r3, r2
 8000512:	803b      	strh	r3, [r7, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <_ZN3GFXC1Ess+0x30>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	887a      	ldrh	r2, [r7, #2]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	809a      	strh	r2, [r3, #4]
 8000520:	883a      	ldrh	r2, [r7, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	80da      	strh	r2, [r3, #6]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	08006640 	.word	0x08006640

08000538 <_ZN3GFX8drawLineEsssst>:

void GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b089      	sub	sp, #36	@ 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	4608      	mov	r0, r1
 8000542:	4611      	mov	r1, r2
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	817b      	strh	r3, [r7, #10]
 800054a:	460b      	mov	r3, r1
 800054c:	813b      	strh	r3, [r7, #8]
 800054e:	4613      	mov	r3, r2
 8000550:	80fb      	strh	r3, [r7, #6]
    int16_t dx = abs(x1 - x0);
 8000552:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000556:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	bfb8      	it	lt
 8000560:	425b      	neglt	r3, r3
 8000562:	83bb      	strh	r3, [r7, #28]
    int16_t sx = x0 < x1 ? 1 : -1;
 8000564:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056c:	429a      	cmp	r2, r3
 800056e:	da01      	bge.n	8000574 <_ZN3GFX8drawLineEsssst+0x3c>
 8000570:	2301      	movs	r3, #1
 8000572:	e001      	b.n	8000578 <_ZN3GFX8drawLineEsssst+0x40>
 8000574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000578:	837b      	strh	r3, [r7, #26]
    int16_t dy = -abs(y1 - y0);
 800057a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800057e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	bfb8      	it	lt
 8000588:	425b      	neglt	r3, r3
 800058a:	b29b      	uxth	r3, r3
 800058c:	425b      	negs	r3, r3
 800058e:	b29b      	uxth	r3, r3
 8000590:	833b      	strh	r3, [r7, #24]
    int16_t sy = y0 < y1 ? 1 : -1;
 8000592:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000596:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800059a:	429a      	cmp	r2, r3
 800059c:	da01      	bge.n	80005a2 <_ZN3GFX8drawLineEsssst+0x6a>
 800059e:	2301      	movs	r3, #1
 80005a0:	e001      	b.n	80005a6 <_ZN3GFX8drawLineEsssst+0x6e>
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a6:	82fb      	strh	r3, [r7, #22]
    int16_t err = dx + dy;
 80005a8:	8bba      	ldrh	r2, [r7, #28]
 80005aa:	8b3b      	ldrh	r3, [r7, #24]
 80005ac:	4413      	add	r3, r2
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	83fb      	strh	r3, [r7, #30]
    int16_t e2;

    for (;;) {
        drawPixel(x0, y0, color);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3308      	adds	r3, #8
 80005b8:	681c      	ldr	r4, [r3, #0]
 80005ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80005bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005c0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	47a0      	blx	r4
        if (x0 == x1 && y0 == y1) break;
 80005c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d105      	bne.n	80005e0 <_ZN3GFX8drawLineEsssst+0xa8>
 80005d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005d8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80005dc:	429a      	cmp	r2, r3
 80005de:	d024      	beq.n	800062a <_ZN3GFX8drawLineEsssst+0xf2>
        e2 = 2 * err;
 80005e0:	8bfb      	ldrh	r3, [r7, #30]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	82bb      	strh	r3, [r7, #20]
        if (e2 >= dy) {
 80005e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80005ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	db09      	blt.n	8000608 <_ZN3GFX8drawLineEsssst+0xd0>
            err += dy;
 80005f4:	8bfa      	ldrh	r2, [r7, #30]
 80005f6:	8b3b      	ldrh	r3, [r7, #24]
 80005f8:	4413      	add	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	83fb      	strh	r3, [r7, #30]
            x0 += sx;
 80005fe:	897a      	ldrh	r2, [r7, #10]
 8000600:	8b7b      	ldrh	r3, [r7, #26]
 8000602:	4413      	add	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	817b      	strh	r3, [r7, #10]
        }
        if (e2 <= dx) {
 8000608:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800060c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000610:	429a      	cmp	r2, r3
 8000612:	dcce      	bgt.n	80005b2 <_ZN3GFX8drawLineEsssst+0x7a>
            err += dx;
 8000614:	8bfa      	ldrh	r2, [r7, #30]
 8000616:	8bbb      	ldrh	r3, [r7, #28]
 8000618:	4413      	add	r3, r2
 800061a:	b29b      	uxth	r3, r3
 800061c:	83fb      	strh	r3, [r7, #30]
            y0 += sy;
 800061e:	893a      	ldrh	r2, [r7, #8]
 8000620:	8afb      	ldrh	r3, [r7, #22]
 8000622:	4413      	add	r3, r2
 8000624:	b29b      	uxth	r3, r3
 8000626:	813b      	strh	r3, [r7, #8]
        drawPixel(x0, y0, color);
 8000628:	e7c3      	b.n	80005b2 <_ZN3GFX8drawLineEsssst+0x7a>
        if (x0 == x1 && y0 == y1) break;
 800062a:	bf00      	nop
        }
    }
}
 800062c:	bf00      	nop
 800062e:	3724      	adds	r7, #36	@ 0x24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <_ZN3GFX8drawRectEsssst>:

void GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af02      	add	r7, sp, #8
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	461a      	mov	r2, r3
 8000642:	4603      	mov	r3, r0
 8000644:	817b      	strh	r3, [r7, #10]
 8000646:	460b      	mov	r3, r1
 8000648:	813b      	strh	r3, [r7, #8]
 800064a:	4613      	mov	r3, r2
 800064c:	80fb      	strh	r3, [r7, #6]
    drawLine(x, y, x + w - 1, y, color);
 800064e:	897a      	ldrh	r2, [r7, #10]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4413      	add	r3, r2
 8000654:	b29b      	uxth	r3, r3
 8000656:	3b01      	subs	r3, #1
 8000658:	b29b      	uxth	r3, r3
 800065a:	b218      	sxth	r0, r3
 800065c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000660:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4603      	mov	r3, r0
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ff61 	bl	8000538 <_ZN3GFX8drawLineEsssst>
    drawLine(x, y + h - 1, x + w - 1, y + h - 1, color);
 8000676:	893a      	ldrh	r2, [r7, #8]
 8000678:	8c3b      	ldrh	r3, [r7, #32]
 800067a:	4413      	add	r3, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	3b01      	subs	r3, #1
 8000680:	b29b      	uxth	r3, r3
 8000682:	b218      	sxth	r0, r3
 8000684:	897a      	ldrh	r2, [r7, #10]
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4413      	add	r3, r2
 800068a:	b29b      	uxth	r3, r3
 800068c:	3b01      	subs	r3, #1
 800068e:	b29b      	uxth	r3, r3
 8000690:	b21c      	sxth	r4, r3
 8000692:	893a      	ldrh	r2, [r7, #8]
 8000694:	8c3b      	ldrh	r3, [r7, #32]
 8000696:	4413      	add	r3, r2
 8000698:	b29b      	uxth	r3, r3
 800069a:	3b01      	subs	r3, #1
 800069c:	b29b      	uxth	r3, r3
 800069e:	b21b      	sxth	r3, r3
 80006a0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4623      	mov	r3, r4
 80006ac:	4602      	mov	r2, r0
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff ff42 	bl	8000538 <_ZN3GFX8drawLineEsssst>
    drawLine(x, y, x, y + h - 1, color);
 80006b4:	893a      	ldrh	r2, [r7, #8]
 80006b6:	8c3b      	ldrh	r3, [r7, #32]
 80006b8:	4413      	add	r3, r2
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 80006c6:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80006ca:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4623      	mov	r3, r4
 80006d6:	4602      	mov	r2, r0
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff ff2d 	bl	8000538 <_ZN3GFX8drawLineEsssst>
    drawLine(x + w - 1, y, x + w - 1, y + h - 1, color);
 80006de:	897a      	ldrh	r2, [r7, #10]
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	b219      	sxth	r1, r3
 80006ec:	897a      	ldrh	r2, [r7, #10]
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	4413      	add	r3, r2
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b21c      	sxth	r4, r3
 80006fa:	893a      	ldrh	r2, [r7, #8]
 80006fc:	8c3b      	ldrh	r3, [r7, #32]
 80006fe:	4413      	add	r3, r2
 8000700:	b29b      	uxth	r3, r3
 8000702:	3b01      	subs	r3, #1
 8000704:	b29b      	uxth	r3, r3
 8000706:	b21b      	sxth	r3, r3
 8000708:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800070c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	4623      	mov	r3, r4
 8000714:	4602      	mov	r2, r0
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff0e 	bl	8000538 <_ZN3GFX8drawLineEsssst>
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <_ZN3GFXD1Ev>:

class GFX
{
public:
	GFX(int16_t w, int16_t h);
	virtual ~GFX() = default;
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <_ZN3GFXD1Ev+0x1c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	08006640 	.word	0x08006640

08000744 <_ZN3GFXD0Ev>:
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ffe9 	bl	8000724 <_ZN3GFXD1Ev>
 8000752:	2108      	movs	r1, #8
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f005 f920 	bl	800599a <_ZdlPvj>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZN11OLED_DriverC1EP17I2C_HandleTypeDef>:
#include "OLED_Driver.hpp"
#include <math.h>

OLED_Driver::OLED_Driver(I2C_HandleTypeDef* i2cHandle) : GFX(OLED_WIDTH, OLED_HEIGHT), bus(i2cHandle)
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2240      	movs	r2, #64	@ 0x40
 8000772:	217c      	movs	r1, #124	@ 0x7c
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fec5 	bl	8000504 <_ZN3GFXC1Ess>
 800077a:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <_ZN11OLED_DriverC1EP17I2C_HandleTypeDef+0x44>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3308      	adds	r3, #8
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fa72 	bl	8000c70 <_ZN7I2C_BusC1EP17I2C_HandleTypeDef>
{
	memset(framebuffer, 0 , sizeof(framebuffer));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	330c      	adds	r3, #12
 8000790:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fe8c 	bl	80064b4 <memset>
}
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	08006654 	.word	0x08006654

080007ac <_ZN11OLED_Driver5beginEv>:

void OLED_Driver::begin(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    sendCommand(0xAE);
 80007b4:	21ae      	movs	r1, #174	@ 0xae
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f9b2 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xD5);
 80007bc:	21d5      	movs	r1, #213	@ 0xd5
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f9ae 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x80);
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f9aa 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xA8);
 80007cc:	21a8      	movs	r1, #168	@ 0xa8
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f9a6 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x3F);
 80007d4:	213f      	movs	r1, #63	@ 0x3f
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f9a2 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xD3);
 80007dc:	21d3      	movs	r1, #211	@ 0xd3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f99e 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x00);
 80007e4:	2100      	movs	r1, #0
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 f99a 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0x40 | 0x0);
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f996 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0x8D);
 80007f4:	218d      	movs	r1, #141	@ 0x8d
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f992 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x14);
 80007fc:	2114      	movs	r1, #20
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f98e 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0x20);
 8000804:	2120      	movs	r1, #32
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f98a 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x00);
 800080c:	2100      	movs	r1, #0
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f986 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xA0 | 0x1);
 8000814:	21a1      	movs	r1, #161	@ 0xa1
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f982 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0xC8);
 800081c:	21c8      	movs	r1, #200	@ 0xc8
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f97e 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xDA);
 8000824:	21da      	movs	r1, #218	@ 0xda
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f97a 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x12);
 800082c:	2112      	movs	r1, #18
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f976 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0x81);
 8000834:	2181      	movs	r1, #129	@ 0x81
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 f972 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0xCF);
 800083c:	21cf      	movs	r1, #207	@ 0xcf
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f96e 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xD9);
 8000844:	21d9      	movs	r1, #217	@ 0xd9
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f96a 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0xF1);
 800084c:	21f1      	movs	r1, #241	@ 0xf1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f966 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xDB);
 8000854:	21db      	movs	r1, #219	@ 0xdb
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f962 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0x40);
 800085c:	2140      	movs	r1, #64	@ 0x40
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f95e 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    sendCommand(0xA4);
 8000864:	21a4      	movs	r1, #164	@ 0xa4
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 f95a 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
    sendCommand(0xA6);
 800086c:	21a6      	movs	r1, #166	@ 0xa6
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f956 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>

    clearDisplay();
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f833 	bl	80008e0 <_ZN11OLED_Driver12clearDisplayEv>
    display();
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f808 	bl	8000890 <_ZN11OLED_Driver7displayEv>

    sendCommand(0xAF);
 8000880:	21af      	movs	r1, #175	@ 0xaf
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f94c 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_ZN11OLED_Driver7displayEv>:

void OLED_Driver::display(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	this->sendCommand(0x21);
 8000898:	2121      	movs	r1, #33	@ 0x21
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f940 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f93c 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(OLED_WIDTH - 1);
 80008a8:	217b      	movs	r1, #123	@ 0x7b
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 f938 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0x22);
 80008b0:	2122      	movs	r1, #34	@ 0x22
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f934 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f930 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
	this->sendCommand(OLED_HEIGHT / 8 - 1);
 80008c0:	2107      	movs	r1, #7
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 f92c 	bl	8000b20 <_ZN11OLED_Driver11sendCommandEh>
	this->sendData(framebuffer, sizeof(framebuffer));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	330c      	adds	r3, #12
 80008cc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80008d0:	4619      	mov	r1, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f948 	bl	8000b68 <_ZN11OLED_Driver8sendDataEPht>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_ZN11OLED_Driver12clearDisplayEv>:

void OLED_Driver::clearDisplay()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	memset(framebuffer, 0, sizeof(framebuffer));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	330c      	adds	r3, #12
 80008ec:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fdde 	bl	80064b4 <memset>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN11OLED_Driver9drawPixelEsst>:

void OLED_Driver::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	4608      	mov	r0, r1
 800090a:	4611      	mov	r1, r2
 800090c:	461a      	mov	r2, r3
 800090e:	4603      	mov	r3, r0
 8000910:	817b      	strh	r3, [r7, #10]
 8000912:	460b      	mov	r3, r1
 8000914:	813b      	strh	r3, [r7, #8]
 8000916:	4613      	mov	r3, r2
 8000918:	80fb      	strh	r3, [r7, #6]
    if (x < 0 || x >= _width || y < 0 || y >= _height) {
 800091a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db60      	blt.n	80009e4 <_ZN11OLED_Driver9drawPixelEsst+0xe4>
 8000922:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	8892      	ldrh	r2, [r2, #4]
 800092a:	4293      	cmp	r3, r2
 800092c:	da5a      	bge.n	80009e4 <_ZN11OLED_Driver9drawPixelEsst+0xe4>
 800092e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db56      	blt.n	80009e4 <_ZN11OLED_Driver9drawPixelEsst+0xe4>
 8000936:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	88d2      	ldrh	r2, [r2, #6]
 800093e:	4293      	cmp	r3, r2
 8000940:	da50      	bge.n	80009e4 <_ZN11OLED_Driver9drawPixelEsst+0xe4>
        return;
    }

    uint16_t index = x + (y / 8) * OLED_WIDTH;
 8000942:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	da00      	bge.n	800094c <_ZN11OLED_Driver9drawPixelEsst+0x4c>
 800094a:	3307      	adds	r3, #7
 800094c:	10db      	asrs	r3, r3, #3
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	0152      	lsls	r2, r2, #5
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	b29a      	uxth	r2, r3
 800095c:	897b      	ldrh	r3, [r7, #10]
 800095e:	4413      	add	r3, r2
 8000960:	82fb      	strh	r3, [r7, #22]

    if (index >= sizeof(framebuffer)) {
 8000962:	8afb      	ldrh	r3, [r7, #22]
 8000964:	f5b3 7f78 	cmp.w	r3, #992	@ 0x3e0
 8000968:	d23e      	bcs.n	80009e8 <_ZN11OLED_Driver9drawPixelEsst+0xe8>
        return;
    }

	if (color)
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d01b      	beq.n	80009a8 <_ZN11OLED_Driver9drawPixelEsst+0xa8>
	   framebuffer[index] |= (1 << (y % 8));
 8000970:	8afb      	ldrh	r3, [r7, #22]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4413      	add	r3, r2
 8000976:	7b1b      	ldrb	r3, [r3, #12]
 8000978:	b25a      	sxtb	r2, r3
 800097a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800097e:	4259      	negs	r1, r3
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	f001 0107 	and.w	r1, r1, #7
 8000988:	bf58      	it	pl
 800098a:	424b      	negpl	r3, r1
 800098c:	b21b      	sxth	r3, r3
 800098e:	4619      	mov	r1, r3
 8000990:	2301      	movs	r3, #1
 8000992:	408b      	lsls	r3, r1
 8000994:	b25b      	sxtb	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b25a      	sxtb	r2, r3
 800099a:	8afb      	ldrh	r3, [r7, #22]
 800099c:	b2d1      	uxtb	r1, r2
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4413      	add	r3, r2
 80009a2:	460a      	mov	r2, r1
 80009a4:	731a      	strb	r2, [r3, #12]
 80009a6:	e020      	b.n	80009ea <_ZN11OLED_Driver9drawPixelEsst+0xea>
	else
	   framebuffer[index] &= ~(1 << (y % 8));
 80009a8:	8afb      	ldrh	r3, [r7, #22]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	7b1b      	ldrb	r3, [r3, #12]
 80009b0:	b25a      	sxtb	r2, r3
 80009b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009b6:	4259      	negs	r1, r3
 80009b8:	f003 0307 	and.w	r3, r3, #7
 80009bc:	f001 0107 	and.w	r1, r1, #7
 80009c0:	bf58      	it	pl
 80009c2:	424b      	negpl	r3, r1
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	2301      	movs	r3, #1
 80009ca:	408b      	lsls	r3, r1
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	4013      	ands	r3, r2
 80009d4:	b25a      	sxtb	r2, r3
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	b2d1      	uxtb	r1, r2
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	460a      	mov	r2, r1
 80009e0:	731a      	strb	r2, [r3, #12]
 80009e2:	e002      	b.n	80009ea <_ZN11OLED_Driver9drawPixelEsst+0xea>
        return;
 80009e4:	bf00      	nop
 80009e6:	e000      	b.n	80009ea <_ZN11OLED_Driver9drawPixelEsst+0xea>
        return;
 80009e8:	bf00      	nop
}
 80009ea:	371c      	adds	r7, #28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_ZN11OLED_Driver9drawServoEt>:

void OLED_Driver::drawServo(uint16_t angle_deg) {
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	ed2d 8b02 	vpush	{d8}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
	clearDisplay();
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff6b 	bl	80008e0 <_ZN11OLED_Driver12clearDisplayEv>

    if (angle_deg > 180) {
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	2bb4      	cmp	r3, #180	@ 0xb4
 8000a0e:	d901      	bls.n	8000a14 <_ZN11OLED_Driver9drawServoEt+0x20>
        angle_deg = 180;
 8000a10:	23b4      	movs	r3, #180	@ 0xb4
 8000a12:	807b      	strh	r3, [r7, #2]
    }

    int16_t centerX = _width / 2;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	83fb      	strh	r3, [r7, #30]
    int16_t centerY = _height / 2;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	88db      	ldrh	r3, [r3, #6]
 8000a22:	085b      	lsrs	r3, r3, #1
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	83bb      	strh	r3, [r7, #28]
    int16_t armLength = 28;
 8000a28:	231c      	movs	r3, #28
 8000a2a:	837b      	strh	r3, [r7, #26]

    drawRect(centerX - 20, centerY - 12, 40, 24, 1);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	8bfb      	ldrh	r3, [r7, #30]
 8000a30:	3b14      	subs	r3, #20
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b219      	sxth	r1, r3
 8000a36:	8bbb      	ldrh	r3, [r7, #28]
 8000a38:	3b0c      	subs	r3, #12
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2318      	movs	r3, #24
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2328      	movs	r3, #40	@ 0x28
 8000a48:	f7ff fdf4 	bl	8000634 <_ZN3GFX8drawRectEsssst>

    float angle_rad = (180.0f - angle_deg) * 3.14159f / 180.0f;
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a56:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000b18 <_ZN11OLED_Driver9drawServoEt+0x124>
 8000a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a5e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000b1c <_ZN11OLED_Driver9drawServoEt+0x128>
 8000a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a66:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000b18 <_ZN11OLED_Driver9drawServoEt+0x124>
 8000a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6e:	edc7 7a05 	vstr	s15, [r7, #20]

    float endX_f = centerX + armLength * cosf(angle_rad);
 8000a72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a76:	ee07 3a90 	vmov	s15, r3
 8000a7a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000a7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8000a8a:	ed97 0a05 	vldr	s0, [r7, #20]
 8000a8e:	f004 ff89 	bl	80059a4 <cosf>
 8000a92:	eef0 7a40 	vmov.f32	s15, s0
 8000a96:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000a9a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000a9e:	edc7 7a04 	vstr	s15, [r7, #16]
    float endY_f = centerY + armLength * sinf(angle_rad);
 8000aa2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000aae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8000aba:	ed97 0a05 	vldr	s0, [r7, #20]
 8000abe:	f004 ffb5 	bl	8005a2c <sinf>
 8000ac2:	eef0 7a40 	vmov.f32	s15, s0
 8000ac6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000aca:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000ace:	edc7 7a03 	vstr	s15, [r7, #12]

    drawLine(centerX, centerY, (int16_t)endX_f, (int16_t)endY_f, 1);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000adc:	ee17 3a90 	vmov	r3, s15
 8000ae0:	b21c      	sxth	r4, r3
 8000ae2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aea:	ee17 3a90 	vmov	r3, s15
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000af4:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8000af8:	2501      	movs	r5, #1
 8000afa:	9501      	str	r5, [sp, #4]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	4623      	mov	r3, r4
 8000b00:	f7ff fd1a 	bl	8000538 <_ZN3GFX8drawLineEsssst>

    display();
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fec3 	bl	8000890 <_ZN11OLED_Driver7displayEv>
}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	ecbd 8b02 	vpop	{d8}
 8000b14:	bdb0      	pop	{r4, r5, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	43340000 	.word	0x43340000
 8000b1c:	40490fd0 	.word	0x40490fd0

08000b20 <_ZN11OLED_Driver11sendCommandEh>:

void OLED_Driver::sendCommand(uint8_t cmd)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]
    while (this->bus.isBusy());
 8000b2c:	bf00      	nop
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3308      	adds	r3, #8
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f90e 	bl	8000d54 <_ZN7I2C_Bus6isBusyEv>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f7      	bne.n	8000b2e <_ZN11OLED_Driver11sendCommandEh+0xe>

    static uint8_t command_buffer[2];
    command_buffer[0] = 0x00;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <_ZN11OLED_Driver11sendCommandEh+0x44>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
    command_buffer[1] = cmd;
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <_ZN11OLED_Driver11sendCommandEh+0x44>)
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	7053      	strb	r3, [r2, #1]

    this->bus.write(OLED_I2C_ADDR, command_buffer, 2);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f103 0008 	add.w	r0, r3, #8
 8000b50:	2302      	movs	r3, #2
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <_ZN11OLED_Driver11sendCommandEh+0x44>)
 8000b54:	213c      	movs	r1, #60	@ 0x3c
 8000b56:	f000 f8dd 	bl	8000d14 <_ZN7I2C_Bus5writeEhPht>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000080 	.word	0x20000080

08000b68 <_ZN11OLED_Driver8sendDataEPht>:

void OLED_Driver::sendData(uint8_t* data, uint16_t size)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	80fb      	strh	r3, [r7, #6]
    static uint8_t transmit_buffer[1025];
    if ((size + 1) > sizeof(transmit_buffer))	return;
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f240 4301 	movw	r3, #1025	@ 0x401
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d813      	bhi.n	8000bac <_ZN11OLED_Driver8sendDataEPht+0x44>

    transmit_buffer[0] = 0x40;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <_ZN11OLED_Driver8sendDataEPht+0x4c>)
 8000b86:	2240      	movs	r2, #64	@ 0x40
 8000b88:	701a      	strb	r2, [r3, #0]
    memcpy(transmit_buffer + 1, data, size);
 8000b8a:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <_ZN11OLED_Driver8sendDataEPht+0x50>)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	f005 fcbd 	bl	8006510 <memcpy>

    this->bus.write(OLED_I2C_ADDR, transmit_buffer, size + 1);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f103 0008 	add.w	r0, r3, #8
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <_ZN11OLED_Driver8sendDataEPht+0x4c>)
 8000ba4:	213c      	movs	r1, #60	@ 0x3c
 8000ba6:	f000 f8b5 	bl	8000d14 <_ZN7I2C_Bus5writeEhPht>
 8000baa:	e000      	b.n	8000bae <_ZN11OLED_Driver8sendDataEPht+0x46>
    if ((size + 1) > sizeof(transmit_buffer))	return;
 8000bac:	bf00      	nop
}
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000084 	.word	0x20000084
 8000bb8:	20000085 	.word	0x20000085

08000bbc <_ZN11OLED_DriverD1Ev>:
#define OLED_I2C_ADDR 0x3C
#define OLED_WIDTH 124
#define OLED_HEIGHT 64


class OLED_Driver : public GFX
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_ZN11OLED_DriverD1Ev+0x20>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fda9 	bl	8000724 <_ZN3GFXD1Ev>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08006654 	.word	0x08006654

08000be0 <_ZN11OLED_DriverD0Ev>:
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ffe7 	bl	8000bbc <_ZN11OLED_DriverD1Ev>
 8000bee:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f004 fed1 	bl	800599a <_ZdlPvj>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <Encoder_Init>:
#include <encoder.hpp>

HAL_StatusTypeDef Encoder_Init(TIM_HandleTypeDef *timHandle)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b08c      	sub	sp, #48	@ 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	timHandle->Instance = ENCODER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
	timHandle->Init.Prescaler = 0;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
	timHandle->Init.Period = ENCODER_MAX;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	22b4      	movs	r2, #180	@ 0xb4
 8000c1e:	60da      	str	r2, [r3, #12]
	timHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
	timHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]

	TIM_Encoder_InitTypeDef sConfig = {
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <Encoder_Init+0x68>)
 8000c2e:	f107 040c 	add.w	r4, r7, #12
 8000c32:	461d      	mov	r5, r3
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	6023      	str	r3, [r4, #0]
		.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING,
		.IC2Selection = TIM_ICSELECTION_DIRECTTI,
		.IC2Prescaler = TIM_ICPSC_DIV1,
		.IC2Filter = 1
	};
	if (HAL_TIM_Encoder_Init(timHandle, &sConfig) != HAL_OK) Error_Handler();
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f004 fa7a 	bl	8005140 <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf14      	ite	ne
 8000c52:	2301      	movne	r3, #1
 8000c54:	2300      	moveq	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <Encoder_Init+0x5c>
 8000c5c:	f000 fc76 	bl	800154c <Error_Handler>

	return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3730      	adds	r7, #48	@ 0x30
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	080065d8 	.word	0x080065d8

08000c70 <_ZN7I2C_BusC1EP17I2C_HandleTypeDef>:
#include <i2c.hpp>

extern DMA_HandleTypeDef hdma_i2c;

I2C_Bus::I2C_Bus(I2C_HandleTypeDef* i2cHandle) : i2cHandle(i2cHandle) {}
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_ZN7I2C_Bus7i2cInitEv>:

HAL_StatusTypeDef I2C_Bus::i2cInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	i2cHandle->Instance = I2C1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <_ZN7I2C_Bus7i2cInitEv+0x7c>)
 8000c9e:	601a      	str	r2, [r3, #0]
	i2cHandle->Init.ClockSpeed = 400000;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d10 <_ZN7I2C_Bus7i2cInitEv+0x80>)
 8000ca6:	605a      	str	r2, [r3, #4]
	i2cHandle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
	i2cHandle->Init.OwnAddress1 = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
	i2cHandle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cc0:	611a      	str	r2, [r3, #16]
	i2cHandle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
	i2cHandle->Init.OwnAddress2 = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
	i2cHandle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
	i2cHandle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2cHandle) != HAL_OK) this->Error_Handler();
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fb94 	bl	8002414 <HAL_I2C_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <_ZN7I2C_Bus7i2cInitEv+0x72>
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f83c 	bl	8000d7a <_ZN7I2C_Bus13Error_HandlerEv>

	return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	00061a80 	.word	0x00061a80

08000d14 <_ZN7I2C_Bus5writeEhPht>:

HAL_StatusTypeDef I2C_Bus::write(uint8_t device_addr, uint8_t* data, uint16_t size)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	460b      	mov	r3, r1
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	4613      	mov	r3, r2
 8000d26:	813b      	strh	r3, [r7, #8]
    while (isBusy());
 8000d28:	bf00      	nop
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f812 	bl	8000d54 <_ZN7I2C_Bus6isBusyEv>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f9      	bne.n	8000d2a <_ZN7I2C_Bus5writeEhPht+0x16>

	return HAL_I2C_Master_Transmit_DMA(i2cHandle, (device_addr << 1), data, size);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	b299      	uxth	r1, r3
 8000d42:	893b      	ldrh	r3, [r7, #8]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	f001 fcbf 	bl	80026c8 <HAL_I2C_Master_Transmit_DMA>
 8000d4a:	4603      	mov	r3, r0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_ZN7I2C_Bus6isBusyEv>:

bool I2C_Bus::isBusy()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    return HAL_I2C_GetState(i2cHandle) != HAL_I2C_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 f85d 	bl	8002e20 <HAL_I2C_GetState>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b20      	cmp	r3, #32
 8000d6a:	bf14      	ite	ne
 8000d6c:	2301      	movne	r3, #1
 8000d6e:	2300      	moveq	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_ZN7I2C_Bus13Error_HandlerEv>:

void I2C_Bus::Error_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d82:	b672      	cpsid	i
}
 8000d84:	bf00      	nop
	__disable_irq();
	while (1)
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <_ZN7I2C_Bus13Error_HandlerEv+0xc>
	...

08000d8c <main>:

void SystemClock_Config(void);
void HAL_DMA_CpltCallback(struct __DMA_HandleTypeDef * hdma);

int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  HAL_Init();
 8000d92:	f000 fc37 	bl	8001604 <HAL_Init>
  SystemClock_Config();
 8000d96:	f000 f893 	bl	8000ec0 <_Z18SystemClock_Configv>

  I2C_Bus bus(&i2cHandle);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	493f      	ldr	r1, [pc, #252]	@ (8000e9c <main+0x110>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff66 	bl	8000c70 <_ZN7I2C_BusC1EP17I2C_HandleTypeDef>
  bus.i2cInit();
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff72 	bl	8000c90 <_ZN7I2C_Bus7i2cInitEv>
  oled.begin();
 8000dac:	483c      	ldr	r0, [pc, #240]	@ (8000ea0 <main+0x114>)
 8000dae:	f7ff fcfd 	bl	80007ac <_ZN11OLED_Driver5beginEv>

  Encoder_Init(&encoderHandle);
 8000db2:	483c      	ldr	r0, [pc, #240]	@ (8000ea4 <main+0x118>)
 8000db4:	f7ff ff26 	bl	8000c04 <Encoder_Init>
  Timer_Init(&timerHandle);
 8000db8:	483b      	ldr	r0, [pc, #236]	@ (8000ea8 <main+0x11c>)
 8000dba:	f000 fbcd 	bl	8001558 <Timer_Init>
  PWM_Init(&pwmHandle);
 8000dbe:	483b      	ldr	r0, [pc, #236]	@ (8000eac <main+0x120>)
 8000dc0:	f000 f958 	bl	8001074 <PWM_Init>

  if (HAL_TIM_Encoder_Start(&encoderHandle, TIM_CHANNEL_ALL) != HAL_OK) Error_Handler();
 8000dc4:	213c      	movs	r1, #60	@ 0x3c
 8000dc6:	4837      	ldr	r0, [pc, #220]	@ (8000ea4 <main+0x118>)
 8000dc8:	f004 fa60 	bl	800528c <HAL_TIM_Encoder_Start>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <main+0x54>
 8000ddc:	f000 f924 	bl	8001028 <_Z13Error_Handlerv>
  if (HAL_TIM_PWM_Start(&pwmHandle, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000de0:	2100      	movs	r1, #0
 8000de2:	4832      	ldr	r0, [pc, #200]	@ (8000eac <main+0x120>)
 8000de4:	f004 f8fc 	bl	8004fe0 <HAL_TIM_PWM_Start>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf14      	ite	ne
 8000dee:	2301      	movne	r3, #1
 8000df0:	2300      	moveq	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <main+0x70>
 8000df8:	f000 f916 	bl	8001028 <_Z13Error_Handlerv>


  if (HAL_DMA_RegisterCallback(&hdma_timer, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CpltCallback) != HAL_OK) Error_Handler();
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb0 <main+0x124>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	482c      	ldr	r0, [pc, #176]	@ (8000eb4 <main+0x128>)
 8000e02:	f001 f835 	bl	8001e70 <HAL_DMA_RegisterCallback>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <main+0x8e>
 8000e16:	f000 f907 	bl	8001028 <_Z13Error_Handlerv>
  __HAL_TIM_ENABLE_DMA(&timerHandle, TIM_DMA_UPDATE);
 8000e1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <main+0x11c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <main+0x11c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e28:	60da      	str	r2, [r3, #12]
  if (HAL_DMA_Start_IT(&hdma_timer, (uint32_t)&encoderHandle.Instance->CNT, (uint32_t)&buffer, 1) != HAL_OK) Error_Handler();
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <main+0x118>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3324      	adds	r3, #36	@ 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <main+0x12c>)
 8000e34:	2301      	movs	r3, #1
 8000e36:	481f      	ldr	r0, [pc, #124]	@ (8000eb4 <main+0x128>)
 8000e38:	f000 fe16 	bl	8001a68 <HAL_DMA_Start_IT>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <main+0xc4>
 8000e4c:	f000 f8ec 	bl	8001028 <_Z13Error_Handlerv>
  if (HAL_TIM_Base_Start(&timerHandle) != HAL_OK) Error_Handler();
 8000e50:	4815      	ldr	r0, [pc, #84]	@ (8000ea8 <main+0x11c>)
 8000e52:	f004 f81b 	bl	8004e8c <HAL_TIM_Base_Start>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf14      	ite	ne
 8000e5c:	2301      	movne	r3, #1
 8000e5e:	2300      	moveq	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <main+0xde>
 8000e66:	f000 f8df 	bl	8001028 <_Z13Error_Handlerv>

  __HAL_TIM_SET_COMPARE(&pwmHandle, TIM_CHANNEL_1, (uint16_t)((SERVO_MIN_PULSE + SERVO_MAX_PULSE) / 2.0f));
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <main+0x120>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	224b      	movs	r2, #75	@ 0x4b
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
  oled.drawServo(90);
 8000e72:	215a      	movs	r1, #90	@ 0x5a
 8000e74:	480a      	ldr	r0, [pc, #40]	@ (8000ea0 <main+0x114>)
 8000e76:	f7ff fdbd 	bl	80009f4 <_ZN11OLED_Driver9drawServoEt>

  while (1)
  {
      if (screen_update_needed)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <main+0x130>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0fa      	beq.n	8000e7a <main+0xee>
      {
          screen_update_needed = false;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <main+0x130>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
          oled.drawServo(buffer);
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <main+0x12c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <main+0x114>)
 8000e94:	f7ff fdae 	bl	80009f4 <_ZN11OLED_Driver9drawServoEt>
      if (screen_update_needed)
 8000e98:	e7ef      	b.n	8000e7a <main+0xee>
 8000e9a:	bf00      	nop
 8000e9c:	20000560 	.word	0x20000560
 8000ea0:	200005b4 	.word	0x200005b4
 8000ea4:	20000488 	.word	0x20000488
 8000ea8:	200004d0 	.word	0x200004d0
 8000eac:	20000518 	.word	0x20000518
 8000eb0:	08000f91 	.word	0x08000f91
 8000eb4:	200009a0 	.word	0x200009a0
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000485 	.word	0x20000485

08000ec0 <_Z18SystemClock_Configv>:
      }
  }
}

void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	@ 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	@ 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 faf0 	bl	80064b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <_Z18SystemClock_Configv+0xc8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <_Z18SystemClock_Configv+0xc8>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <_Z18SystemClock_Configv+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <_Z18SystemClock_Configv+0xcc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <_Z18SystemClock_Configv+0xcc>)
 8000f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <_Z18SystemClock_Configv+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f24:	2310      	movs	r3, #16
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fb17 	bl	8004564 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000f46:	f000 f86f 	bl	8001028 <_Z13Error_Handlerv>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fd75 	bl	8004a54 <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8000f7a:	f000 f855 	bl	8001028 <_Z13Error_Handlerv>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3750      	adds	r7, #80	@ 0x50
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef>:

void HAL_DMA_CpltCallback(struct __DMA_HandleTypeDef * hdma)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    if (hdma->Instance == hdma_timer.Instance)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x80>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d130      	bne.n	8001006 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x76>
    {
        if (buffer > ENCODER_MAX)
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x84>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2bb4      	cmp	r3, #180	@ 0xb4
 8000faa:	bf8c      	ite	hi
 8000fac:	2301      	movhi	r3, #1
 8000fae:	2300      	movls	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x2c>
            buffer = ENCODER_MAX;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x84>)
 8000fb8:	22b4      	movs	r2, #180	@ 0xb4
 8000fba:	601a      	str	r2, [r3, #0]
        if (buffer == last_buffer)
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x84>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d118      	bne.n	8001004 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x74>
        	return;
        last_buffer = buffer;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x84>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x88>)
 8000fd8:	6013      	str	r3, [r2, #0]

        uint16_t new_pulse = SERVO_MIN_PULSE + (((uint32_t)buffer * (uint32_t)(SERVO_MAX_PULSE - SERVO_MIN_PULSE)) / (uint32_t)ENCODER_MAX);
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x84>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2264      	movs	r2, #100	@ 0x64
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x8c>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3319      	adds	r3, #25
 8000ff2:	81fb      	strh	r3, [r7, #14]
        __HAL_TIM_SET_COMPARE(&pwmHandle, TIM_CHANNEL_1, new_pulse);
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x90>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	89fa      	ldrh	r2, [r7, #14]
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34

        screen_update_needed = true;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x94>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e000      	b.n	8001006 <_Z20HAL_DMA_CpltCallbackP19__DMA_HandleTypeDef+0x76>
        	return;
 8001004:	bf00      	nop
    }
}
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	200009a0 	.word	0x200009a0
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004
 800101c:	16c16c17 	.word	0x16c16c17
 8001020:	20000518 	.word	0x20000518
 8001024:	20000485 	.word	0x20000485

08001028 <_Z13Error_Handlerv>:

void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <_Z13Error_Handlerv+0x8>

08001034 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
}
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
OLED_Driver oled(&i2cHandle);
 8001038:	4902      	ldr	r1, [pc, #8]	@ (8001044 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800103c:	f7ff fb92 	bl	8000764 <_ZN11OLED_DriverC1EP17I2C_HandleTypeDef>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000560 	.word	0x20000560
 8001048:	200005b4 	.word	0x200005b4

0800104c <_Z41__static_initialization_and_destruction_1v>:
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
OLED_Driver oled(&i2cHandle);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <_Z41__static_initialization_and_destruction_1v+0x10>)
 8001052:	f7ff fdb3 	bl	8000bbc <_ZN11OLED_DriverD1Ev>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200005b4 	.word	0x200005b4

08001060 <_GLOBAL__sub_I_buffer>:
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
 8001064:	f7ff ffe6 	bl	8001034 <_Z41__static_initialization_and_destruction_0v>
 8001068:	bd80      	pop	{r7, pc}

0800106a <_GLOBAL__sub_D_buffer>:
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
 800106e:	f7ff ffed 	bl	800104c <_Z41__static_initialization_and_destruction_1v>
 8001072:	bd80      	pop	{r7, pc}

08001074 <PWM_Init>:
#include <pwm.hpp>

HAL_StatusTypeDef PWM_Init(TIM_HandleTypeDef* pwmHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	pwmHandle->Instance = PWM;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <PWM_Init+0x90>)
 8001080:	601a      	str	r2, [r3, #0]
	pwmHandle->Init.Period = 999;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001088:	60da      	str	r2, [r3, #12]
	pwmHandle->Init.Prescaler = 319;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f240 123f 	movw	r2, #319	@ 0x13f
 8001090:	605a      	str	r2, [r3, #4]
	pwmHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
	pwmHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
	pwmHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(pwmHandle) != HAL_OK) Error_Handler();
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f003 ff4b 	bl	8004f40 <HAL_TIM_PWM_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <PWM_Init+0x4a>
 80010ba:	f000 fa47 	bl	800154c <Error_Handler>

	TIM_OC_InitTypeDef sConfigOC = {
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]
 80010d0:	619a      	str	r2, [r3, #24]
 80010d2:	2360      	movs	r3, #96	@ 0x60
 80010d4:	60fb      	str	r3, [r7, #12]
			.OCMode = TIM_OCMODE_PWM1,
			.Pulse = 0,
			.OCPolarity = TIM_OCPOLARITY_HIGH,
			.OCFastMode = TIM_OCFAST_DISABLE
	};
	if (HAL_TIM_PWM_ConfigChannel(pwmHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f004 f962 	bl	80053a8 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <PWM_Init+0x84>
 80010f4:	f000 fa2a 	bl	800154c <Error_Handler>

	return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3728      	adds	r7, #40	@ 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_MspInit>:

DMA_HandleTypeDef hdma_timer = {0};
DMA_HandleTypeDef hdma_i2c = {0};

void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance == PWM)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <HAL_TIM_PWM_MspInit+0x70>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d129      	bne.n	80011be <HAL_TIM_PWM_MspInit+0x66>
  {
	  __HAL_RCC_TIM1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_TIM_PWM_MspInit+0x74>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	4a16      	ldr	r2, [pc, #88]	@ (80011cc <HAL_TIM_PWM_MspInit+0x74>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6453      	str	r3, [r2, #68]	@ 0x44
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_TIM_PWM_MspInit+0x74>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_TIM_PWM_MspInit+0x74>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <HAL_TIM_PWM_MspInit+0x74>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <HAL_TIM_PWM_MspInit+0x74>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

	  GPIO_InitTypeDef GPIO_InitSturct = {
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_TIM_PWM_MspInit+0x78>)
 80011a4:	f107 0414 	add.w	r4, r7, #20
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	6023      	str	r3, [r4, #0]
			  .Mode = GPIO_MODE_AF_PP,
			  .Pull = GPIO_NOPULL,
			  .Speed = GPIO_SPEED_LOW,
			  .Alternate = GPIO_AF1_TIM1
	  };
	  HAL_GPIO_Init(PWM_PORT, &GPIO_InitSturct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <HAL_TIM_PWM_MspInit+0x7c>)
 80011ba:	f000 ffa7 	bl	800210c <HAL_GPIO_Init>
  }
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdb0      	pop	{r4, r5, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	080065fc 	.word	0x080065fc
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if (htim_encoder->Instance == ENCODER)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011e8:	d129      	bne.n	800123e <HAL_TIM_Encoder_MspInit+0x66>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x70>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a15      	ldr	r2, [pc, #84]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x70>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x70>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x70>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x70>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x70>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

		GPIO_InitTypeDef GPIO_InitStruct = {
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_TIM_Encoder_MspInit+0x74>)
 8001224:	f107 0414 	add.w	r4, r7, #20
 8001228:	461d      	mov	r5, r3
 800122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	6023      	str	r3, [r4, #0]
				.Mode = GPIO_MODE_AF_PP,
				.Pull = GPIO_PULLUP,
				.Speed = GPIO_SPEED_FREQ_LOW,
				.Alternate = GPIO_AF1_TIM2
		};
		HAL_GPIO_Init(ENCODER_PORT, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x78>)
 800123a:	f000 ff67 	bl	800210c <HAL_GPIO_Init>
	}
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	@ 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	08006610 	.word	0x08006610
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIMER)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2e      	ldr	r2, [pc, #184]	@ (800131c <HAL_TIM_Base_MspInit+0xc8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d155      	bne.n	8001312 <HAL_TIM_Base_MspInit+0xbe>
  {
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_TIM_Base_MspInit+0xcc>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	4a2c      	ldr	r2, [pc, #176]	@ (8001320 <HAL_TIM_Base_MspInit+0xcc>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6413      	str	r3, [r2, #64]	@ 0x40
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_TIM_Base_MspInit+0xcc>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_TIM_Base_MspInit+0xcc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a25      	ldr	r2, [pc, #148]	@ (8001320 <HAL_TIM_Base_MspInit+0xcc>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_TIM_Base_MspInit+0xcc>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]

	hdma_timer.Instance = DMA1_Stream2;
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012a0:	4a21      	ldr	r2, [pc, #132]	@ (8001328 <HAL_TIM_Base_MspInit+0xd4>)
 80012a2:	601a      	str	r2, [r3, #0]
	hdma_timer.Init.Channel = DMA_CHANNEL_5;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012a6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80012aa:	605a      	str	r2, [r3, #4]
	hdma_timer.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
	hdma_timer.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
	hdma_timer.Init.MemInc = DMA_MINC_DISABLE;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	hdma_timer.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c4:	615a      	str	r2, [r3, #20]
	hdma_timer.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012cc:	619a      	str	r2, [r3, #24]
	hdma_timer.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d4:	61da      	str	r2, [r3, #28]
	hdma_timer.Init.Priority = DMA_PRIORITY_LOW;
 80012d6:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_timer) != HAL_OK) Error_Handler();
 80012dc:	4811      	ldr	r0, [pc, #68]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012de:	f000 fb15 	bl	800190c <HAL_DMA_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2301      	movne	r3, #1
 80012ea:	2300      	moveq	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_TIM_Base_MspInit+0xa2>
 80012f2:	f7ff fe99 	bl	8001028 <_Z13Error_Handlerv>

	__HAL_LINKDMA(htim, hdma[TIM_DMA_ID_UPDATE], hdma_timer);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012fa:	621a      	str	r2, [r3, #32]
 80012fc:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_TIM_Base_MspInit+0xd0>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6393      	str	r3, [r2, #56]	@ 0x38

	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	200d      	movs	r0, #13
 8001308:	f000 fac9 	bl	800189e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800130c:	200d      	movs	r0, #13
 800130e:	f000 fae2 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  }
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40000400 	.word	0x40000400
 8001320:	40023800 	.word	0x40023800
 8001324:	200009a0 	.word	0x200009a0
 8001328:	40026040 	.word	0x40026040

0800132c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (i2cHandle->Instance == I2C1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a46      	ldr	r2, [pc, #280]	@ (8001454 <HAL_I2C_MspInit+0x128>)
 800133a:	4293      	cmp	r3, r2
 800133c:	f040 8085 	bne.w	800144a <HAL_I2C_MspInit+0x11e>
		{
			__HAL_RCC_I2C1_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a43      	ldr	r2, [pc, #268]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 800134a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a3c      	ldr	r2, [pc, #240]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b3a      	ldr	r3, [pc, #232]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
			__HAL_RCC_DMA1_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a35      	ldr	r2, [pc, #212]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <HAL_I2C_MspInit+0x12c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

			GPIO_InitTypeDef GPIO_InitStruct = {
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_I2C_MspInit+0x130>)
 8001396:	f107 0414 	add.w	r4, r7, #20
 800139a:	461d      	mov	r5, r3
 800139c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	6023      	str	r3, [r4, #0]
					.Mode = GPIO_MODE_AF_OD,
					.Pull = GPIO_PULLUP,
					.Speed = GPIO_SPEED_FREQ_VERY_HIGH,
					.Alternate = GPIO_AF4_I2C1
			};
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	482d      	ldr	r0, [pc, #180]	@ (8001460 <HAL_I2C_MspInit+0x134>)
 80013ac:	f000 feae 	bl	800210c <HAL_GPIO_Init>

			hdma_i2c.Instance = DMA1_Stream1;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <HAL_I2C_MspInit+0x13c>)
 80013b4:	601a      	str	r2, [r3, #0]
			hdma_i2c.Init.Channel = DMA_CHANNEL_0;
 80013b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
			hdma_i2c.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013bc:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013be:	2240      	movs	r2, #64	@ 0x40
 80013c0:	609a      	str	r2, [r3, #8]
			hdma_i2c.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
			hdma_i2c.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ce:	611a      	str	r2, [r3, #16]
			hdma_i2c.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
			hdma_i2c.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
			hdma_i2c.Init.Mode = DMA_NORMAL;
 80013dc:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
			hdma_i2c.Init.Priority = DMA_PRIORITY_LOW;
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
			hdma_i2c.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24
			hdma_i2c.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
			if (HAL_DMA_Init(&hdma_i2c) != HAL_OK) Error_Handler();
 80013f4:	481b      	ldr	r0, [pc, #108]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 80013f6:	f000 fa89 	bl	800190c <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_MspInit+0xe2>
 800140a:	f7ff fe0d 	bl	8001028 <_Z13Error_Handlerv>

			__HAL_LINKDMA(i2cHandle, hdmatx, hdma_i2c);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 8001412:	635a      	str	r2, [r3, #52]	@ 0x34
 8001414:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <HAL_I2C_MspInit+0x138>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6393      	str	r3, [r2, #56]	@ 0x38

			HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	200c      	movs	r0, #12
 8001420:	f000 fa3d 	bl	800189e <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001424:	200c      	movs	r0, #12
 8001426:	f000 fa56 	bl	80018d6 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	201f      	movs	r0, #31
 8001430:	f000 fa35 	bl	800189e <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001434:	201f      	movs	r0, #31
 8001436:	f000 fa4e 	bl	80018d6 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2020      	movs	r0, #32
 8001440:	f000 fa2d 	bl	800189e <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001444:	2020      	movs	r0, #32
 8001446:	f000 fa46 	bl	80018d6 <HAL_NVIC_EnableIRQ>
		}
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bdb0      	pop	{r4, r5, r7, pc}
 8001452:	bf00      	nop
 8001454:	40005400 	.word	0x40005400
 8001458:	40023800 	.word	0x40023800
 800145c:	08006624 	.word	0x08006624
 8001460:	40020400 	.word	0x40020400
 8001464:	20000a00 	.word	0x20000a00
 8001468:	40026028 	.word	0x40026028

0800146c <DMA1_Stream2_IRQHandler>:
extern DMA_HandleTypeDef hdma_timer;
extern I2C_HandleTypeDef i2cHandle;
extern DMA_HandleTypeDef hdma_i2c;

void DMA1_Stream2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_timer);
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <DMA1_Stream2_IRQHandler+0x10>)
 8001472:	f000 fb73 	bl	8001b5c <HAL_DMA_IRQHandler>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200009a0 	.word	0x200009a0

08001480 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_i2c);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <DMA1_Stream1_IRQHandler+0x10>)
 8001486:	f000 fb69 	bl	8001b5c <HAL_DMA_IRQHandler>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000a00 	.word	0x20000a00

08001494 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&i2cHandle);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <I2C1_EV_IRQHandler+0x10>)
 800149a:	f001 fa41 	bl	8002920 <HAL_I2C_EV_IRQHandler>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000560 	.word	0x20000560

080014a8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&i2cHandle);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <I2C1_ER_IRQHandler+0x10>)
 80014ae:	f001 fba8 	bl	8002c02 <HAL_I2C_ER_IRQHandler>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000560 	.word	0x20000560

080014bc <NMI_Handler>:

void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
   while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <NMI_Handler+0x4>

080014c4 <HardFault_Handler>:

  }
}

void HardFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <MemManage_Handler+0x4>

080014d4 <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e4 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <SysTick_Handler>:

void SysTick_Handler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001512:	f000 f8c9 	bl	80016a8 <HAL_IncTick>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}

0800151a <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Error_Handler>:
#include <timer.hpp>

void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <Timer_Init>:
  {
  }
}

HAL_StatusTypeDef Timer_Init(TIM_HandleTypeDef* timerHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	timerHandle->Instance = TIMER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <Timer_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
	timerHandle->Init.Prescaler = 15999;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800156c:	605a      	str	r2, [r3, #4]
	timerHandle->Init.Period = 9;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2209      	movs	r2, #9
 8001572:	60da      	str	r2, [r3, #12]
	timerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
	timerHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
	timerHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2280      	movs	r2, #128	@ 0x80
 8001584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(timerHandle) != HAL_OK) Error_Handler();
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f003 fc30 	bl	8004dec <HAL_TIM_Base_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <Timer_Init+0x48>
 800159c:	f7ff ffd6 	bl	800154c <Error_Handler>

	return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40000400 	.word	0x40000400

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015b4:	f7ff ffb8 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ba:	490d      	ldr	r1, [pc, #52]	@ (80015f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d0:	4c0a      	ldr	r4, [pc, #40]	@ (80015fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015de:	f004 ff71 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff fbd3 	bl	8000d8c <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80015f4:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 80015f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015fc:	20000ba4 	.word	0x20000ba4

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f92b 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fd66 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f943 	bl	80018f2 <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001684:	f000 f90b 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000010 	.word	0x20000010
 80016a4:	2000000c 	.word	0x2000000c

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000010 	.word	0x20000010
 80016cc:	20000a60 	.word	0x20000a60

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000a60 	.word	0x20000a60

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4907      	ldr	r1, [pc, #28]	@ (8001784 <__NVIC_EnableIRQ+0x38>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff29 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff3e 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff8e 	bl	80017dc <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff31 	bl	800174c <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa2 	bl	8001844 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff feda 	bl	80016d0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e099      	b.n	8001a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001948:	e00f      	b.n	800196a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194a:	f7ff fec1 	bl	80016d0 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b05      	cmp	r3, #5
 8001956:	d908      	bls.n	800196a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e078      	b.n	8001a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e8      	bne.n	800194a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <HAL_DMA_Init+0x158>)
 8001984:	4013      	ands	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	4313      	orrs	r3, r2
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f023 0307 	bic.w	r3, r3, #7
 80019ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d117      	bne.n	8001a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 faff 	bl	8002014 <DMA_CheckFifoParam>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2240      	movs	r2, #64	@ 0x40
 8001a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e016      	b.n	8001a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fab6 	bl	8001fa8 <DMA_CalcBaseAndBitshift>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	223f      	movs	r2, #63	@ 0x3f
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	f010803f 	.word	0xf010803f

08001a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Start_IT+0x26>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e040      	b.n	8001b10 <HAL_DMA_Start_IT+0xa8>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d12f      	bne.n	8001b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fa48 	bl	8001f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	223f      	movs	r2, #63	@ 0x3f
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0216 	orr.w	r2, r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e005      	b.n	8001b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00c      	b.n	8001b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b68:	4b8e      	ldr	r3, [pc, #568]	@ (8001da4 <HAL_DMA_IRQHandler+0x248>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a8e      	ldr	r2, [pc, #568]	@ (8001da8 <HAL_DMA_IRQHandler+0x24c>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b86:	2208      	movs	r2, #8
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01a      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0204 	bic.w	r2, r2, #4
 8001bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	2201      	movs	r2, #1
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d012      	beq.n	8001bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	f043 0202 	orr.w	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c02:	2204      	movs	r2, #4
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c20:	2204      	movs	r2, #4
 8001c22:	409a      	lsls	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	f043 0204 	orr.w	r2, r3, #4
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c38:	2210      	movs	r2, #16
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d043      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03c      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	2210      	movs	r2, #16
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d018      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d024      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
 8001c8a:	e01f      	b.n	8001ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
 8001c9c:	e016      	b.n	8001ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0208 	bic.w	r2, r2, #8
 8001cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 808f 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8087 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d136      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0216 	bic.w	r2, r2, #22
 8001d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x1da>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0208 	bic.w	r2, r2, #8
 8001d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4a:	223f      	movs	r2, #63	@ 0x3f
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d07e      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
        }
        return;
 8001d72:	e079      	b.n	8001e68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01d      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d031      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
 8001da0:	e02c      	b.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008
 8001da8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e01e      	b.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0210 	bic.w	r2, r2, #16
 8001dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d032      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2205      	movs	r2, #5
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d307      	bcc.n	8001e44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f2      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x2cc>
 8001e42:	e000      	b.n	8001e46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e68:	bf00      	nop
    }
  }
}
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_RegisterCallback+0x20>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e03d      	b.n	8001f0c <HAL_DMA_RegisterCallback+0x9c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d12c      	bne.n	8001efe <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d826      	bhi.n	8001ef8 <HAL_DMA_RegisterCallback+0x88>
 8001eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <HAL_DMA_RegisterCallback+0x40>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ec9 	.word	0x08001ec9
 8001eb4:	08001ed1 	.word	0x08001ed1
 8001eb8:	08001ed9 	.word	0x08001ed9
 8001ebc:	08001ee1 	.word	0x08001ee1
 8001ec0:	08001ee9 	.word	0x08001ee9
 8001ec4:	08001ef1 	.word	0x08001ef1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8001ece:	e018      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8001ed6:	e014      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8001ede:	e010      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8001ee6:	e00c      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8001eee:	e008      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001ef6:	e004      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
      break;
 8001efc:	e001      	b.n	8001f02 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f26:	b2db      	uxtb	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b40      	cmp	r3, #64	@ 0x40
 8001f78:	d108      	bne.n	8001f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f8a:	e007      	b.n	8001f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	3b10      	subs	r3, #16
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <DMA_CalcBaseAndBitshift+0x64>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fc2:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <DMA_CalcBaseAndBitshift+0x68>)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d909      	bls.n	8001fea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fe8:	e007      	b.n	8001ffa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ff2:	f023 0303 	bic.w	r3, r3, #3
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	aaaaaaab 	.word	0xaaaaaaab
 8002010:	08006678 	.word	0x08006678

08002014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11f      	bne.n	800206e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d856      	bhi.n	80020e2 <DMA_CheckFifoParam+0xce>
 8002034:	a201      	add	r2, pc, #4	@ (adr r2, 800203c <DMA_CheckFifoParam+0x28>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	0800204d 	.word	0x0800204d
 8002040:	0800205f 	.word	0x0800205f
 8002044:	0800204d 	.word	0x0800204d
 8002048:	080020e3 	.word	0x080020e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d046      	beq.n	80020e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205c:	e043      	b.n	80020e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002066:	d140      	bne.n	80020ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206c:	e03d      	b.n	80020ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002076:	d121      	bne.n	80020bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d837      	bhi.n	80020ee <DMA_CheckFifoParam+0xda>
 800207e:	a201      	add	r2, pc, #4	@ (adr r2, 8002084 <DMA_CheckFifoParam+0x70>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002095 	.word	0x08002095
 8002088:	0800209b 	.word	0x0800209b
 800208c:	08002095 	.word	0x08002095
 8002090:	080020ad 	.word	0x080020ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      break;
 8002098:	e030      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d025      	beq.n	80020f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020aa:	e022      	b.n	80020f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020b4:	d11f      	bne.n	80020f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ba:	e01c      	b.n	80020f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d903      	bls.n	80020ca <DMA_CheckFifoParam+0xb6>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d003      	beq.n	80020d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020c8:	e018      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
      break;
 80020ce:	e015      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00e      	beq.n	80020fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      break;
 80020e0:	e00b      	b.n	80020fa <DMA_CheckFifoParam+0xe6>
      break;
 80020e2:	bf00      	nop
 80020e4:	e00a      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e008      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
 80020ec:	e006      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e004      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      break;
 80020f2:	bf00      	nop
 80020f4:	e002      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      break;   
 80020f6:	bf00      	nop
 80020f8:	e000      	b.n	80020fc <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
    }
  } 
  
  return status; 
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e159      	b.n	80023dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	429a      	cmp	r2, r3
 8002142:	f040 8148 	bne.w	80023d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d005      	beq.n	800215e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	2b02      	cmp	r3, #2
 800215c:	d130      	bne.n	80021c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0201 	and.w	r2, r3, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d017      	beq.n	80021fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d123      	bne.n	8002250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	69b9      	ldr	r1, [r7, #24]
 800224c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0203 	and.w	r2, r3, #3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a2 	beq.w	80023d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <HAL_GPIO_Init+0x2e8>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_GPIO_Init+0x2e8>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a2:	4b54      	ldr	r3, [pc, #336]	@ (80023f4 <HAL_GPIO_Init+0x2e8>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ae:	4a52      	ldr	r2, [pc, #328]	@ (80023f8 <HAL_GPIO_Init+0x2ec>)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a49      	ldr	r2, [pc, #292]	@ (80023fc <HAL_GPIO_Init+0x2f0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x202>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a48      	ldr	r2, [pc, #288]	@ (8002400 <HAL_GPIO_Init+0x2f4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x1fe>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a47      	ldr	r2, [pc, #284]	@ (8002404 <HAL_GPIO_Init+0x2f8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x1fa>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a46      	ldr	r2, [pc, #280]	@ (8002408 <HAL_GPIO_Init+0x2fc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x1f6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a45      	ldr	r2, [pc, #276]	@ (800240c <HAL_GPIO_Init+0x300>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x1f2>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e008      	b.n	8002310 <HAL_GPIO_Init+0x204>
 80022fe:	2307      	movs	r3, #7
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x204>
 8002302:	2303      	movs	r3, #3
 8002304:	e004      	b.n	8002310 <HAL_GPIO_Init+0x204>
 8002306:	2302      	movs	r3, #2
 8002308:	e002      	b.n	8002310 <HAL_GPIO_Init+0x204>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x204>
 800230e:	2300      	movs	r3, #0
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f002 0203 	and.w	r2, r2, #3
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4093      	lsls	r3, r2
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002320:	4935      	ldr	r1, [pc, #212]	@ (80023f8 <HAL_GPIO_Init+0x2ec>)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232e:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <HAL_GPIO_Init+0x304>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002352:	4a2f      	ldr	r2, [pc, #188]	@ (8002410 <HAL_GPIO_Init+0x304>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002358:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_GPIO_Init+0x304>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <HAL_GPIO_Init+0x304>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_GPIO_Init+0x304>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_GPIO_Init+0x304>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ac:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_GPIO_Init+0x304>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002410 <HAL_GPIO_Init+0x304>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	f67f aea2 	bls.w	8002128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020400 	.word	0x40020400
 8002404:	40020800 	.word	0x40020800
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e12b      	b.n	800267e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe ff76 	bl	800132c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	@ 0x24
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002478:	f002 fca4 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a81      	ldr	r2, [pc, #516]	@ (8002688 <HAL_I2C_Init+0x274>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d807      	bhi.n	8002498 <HAL_I2C_Init+0x84>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a80      	ldr	r2, [pc, #512]	@ (800268c <HAL_I2C_Init+0x278>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e006      	b.n	80024a6 <HAL_I2C_Init+0x92>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a7d      	ldr	r2, [pc, #500]	@ (8002690 <HAL_I2C_Init+0x27c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0e7      	b.n	800267e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a78      	ldr	r2, [pc, #480]	@ (8002694 <HAL_I2C_Init+0x280>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0c9b      	lsrs	r3, r3, #18
 80024b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002688 <HAL_I2C_Init+0x274>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d802      	bhi.n	80024e8 <HAL_I2C_Init+0xd4>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	e009      	b.n	80024fc <HAL_I2C_Init+0xe8>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a69      	ldr	r2, [pc, #420]	@ (8002698 <HAL_I2C_Init+0x284>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	3301      	adds	r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800250e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	495c      	ldr	r1, [pc, #368]	@ (8002688 <HAL_I2C_Init+0x274>)
 8002518:	428b      	cmp	r3, r1
 800251a:	d819      	bhi.n	8002550 <HAL_I2C_Init+0x13c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e59      	subs	r1, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fbb1 f3f3 	udiv	r3, r1, r3
 800252a:	1c59      	adds	r1, r3, #1
 800252c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002530:	400b      	ands	r3, r1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_I2C_Init+0x138>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e59      	subs	r1, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fbb1 f3f3 	udiv	r3, r1, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	e051      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 800254c:	2304      	movs	r3, #4
 800254e:	e04f      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d111      	bne.n	800257c <HAL_I2C_Init+0x168>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e012      	b.n	80025a2 <HAL_I2C_Init+0x18e>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e58      	subs	r0, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	0099      	lsls	r1, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Init+0x196>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e022      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10e      	bne.n	80025d0 <HAL_I2C_Init+0x1bc>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1e58      	subs	r0, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	440b      	add	r3, r1
 80025c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ce:	e00f      	b.n	80025f0 <HAL_I2C_Init+0x1dc>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e58      	subs	r0, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	0099      	lsls	r1, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	6809      	ldr	r1, [r1, #0]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800261e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6911      	ldr	r1, [r2, #16]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	430b      	orrs	r3, r1
 8002632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	000186a0 	.word	0x000186a0
 800268c:	001e847f 	.word	0x001e847f
 8002690:	003d08ff 	.word	0x003d08ff
 8002694:	431bde83 	.word	0x431bde83
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	2b80      	cmp	r3, #128	@ 0x80
 80026b0:	d103      	bne.n	80026ba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	460b      	mov	r3, r1
 80026d6:	817b      	strh	r3, [r7, #10]
 80026d8:	4613      	mov	r3, r2
 80026da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	f040 8109 	bne.w	8002900 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026ee:	4b87      	ldr	r3, [pc, #540]	@ (800290c <HAL_I2C_Master_Transmit_DMA+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	4a86      	ldr	r2, [pc, #536]	@ (8002910 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0a1a      	lsrs	r2, r3, #8
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009a      	lsls	r2, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3b01      	subs	r3, #1
 800270c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d112      	bne.n	800273a <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e0e3      	b.n	8002902 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b02      	cmp	r3, #2
 8002746:	d0df      	beq.n	8002708 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8002752:	2302      	movs	r3, #2
 8002754:	e0d5      	b.n	8002902 <HAL_I2C_Master_Transmit_DMA+0x23a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d007      	beq.n	800277c <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2221      	movs	r2, #33	@ 0x21
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2210      	movs	r2, #16
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	893a      	ldrh	r2, [r7, #8]
 80027ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a56      	ldr	r2, [pc, #344]	@ (8002914 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80027be:	897a      	ldrh	r2, [r7, #10]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d07b      	beq.n	80028c4 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02a      	beq.n	800282a <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002918 <HAL_I2C_Master_Transmit_DMA+0x250>)
 80027da:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e0:	4a4e      	ldr	r2, [pc, #312]	@ (800291c <HAL_I2C_Master_Transmit_DMA+0x254>)
 80027e2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	2200      	movs	r2, #0
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f8:	2200      	movs	r2, #0
 80027fa:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	2200      	movs	r2, #0
 8002802:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3310      	adds	r3, #16
 8002814:	461a      	mov	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281a:	f7ff f925 	bl	8001a68 <HAL_DMA_Start_IT>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d139      	bne.n	800289c <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8002828:	e013      	b.n	8002852 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e057      	b.n	8002902 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002868:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002878:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002888:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e02f      	b.n	80028fc <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e01e      	b.n	8002902 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028d2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80028fa:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000008 	.word	0x20000008
 8002910:	14f8b589 	.word	0x14f8b589
 8002914:	ffff0000 	.word	0xffff0000
 8002918:	08004141 	.word	0x08004141
 800291c:	080042ff 	.word	0x080042ff

08002920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002940:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002948:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b10      	cmp	r3, #16
 800294e:	d003      	beq.n	8002958 <HAL_I2C_EV_IRQHandler+0x38>
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b40      	cmp	r3, #64	@ 0x40
 8002954:	f040 80c1 	bne.w	8002ada <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_I2C_EV_IRQHandler+0x6e>
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002978:	d003      	beq.n	8002982 <HAL_I2C_EV_IRQHandler+0x62>
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002980:	d101      	bne.n	8002986 <HAL_I2C_EV_IRQHandler+0x66>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_I2C_EV_IRQHandler+0x68>
 8002986:	2300      	movs	r3, #0
 8002988:	2b01      	cmp	r3, #1
 800298a:	f000 8132 	beq.w	8002bf2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00c      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x92>
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	0a5b      	lsrs	r3, r3, #9
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 fdc1 	bl	800452c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fda9 	bl	8003502 <I2C_Master_SB>
 80029b0:	e092      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	0a5b      	lsrs	r3, r3, #9
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fe1f 	bl	800360e <I2C_Master_ADD10>
 80029d0:	e082      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0a5b      	lsrs	r3, r3, #9
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fe39 	bl	8003662 <I2C_Master_ADDR>
 80029f0:	e072      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03b      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a0c:	f000 80f3 	beq.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	09db      	lsrs	r3, r3, #7
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00f      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x11c>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x11c>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa01 	bl	8002e3c <I2C_MasterTransmit_TXE>
 8002a3a:	e04d      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80d6 	beq.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	0a5b      	lsrs	r3, r3, #9
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80cf 	beq.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	2b21      	cmp	r3, #33	@ 0x21
 8002a5c:	d103      	bne.n	8002a66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa88 	bl	8002f74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a64:	e0c7      	b.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b40      	cmp	r3, #64	@ 0x40
 8002a6a:	f040 80c4 	bne.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 faf6 	bl	8003060 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a74:	e0bf      	b.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a84:	f000 80b7 	beq.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00f      	beq.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x194>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	0a9b      	lsrs	r3, r3, #10
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d009      	beq.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x194>
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb6f 	bl	8003190 <I2C_MasterReceive_RXNE>
 8002ab2:	e011      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 809a 	beq.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	0a5b      	lsrs	r3, r3, #9
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8093 	beq.w	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fc25 	bl	8003320 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad6:	e08e      	b.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ad8:	e08d      	b.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e007      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x20e>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0a5b      	lsrs	r3, r3, #9
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00c      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 ffea 	bl	8003b00 <I2C_Slave_ADDR>
 8002b2c:	e066      	b.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x22e>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	0a5b      	lsrs	r3, r3, #9
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f001 f824 	bl	8003b94 <I2C_Slave_STOPF>
 8002b4c:	e056      	b.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
 8002b50:	2b21      	cmp	r3, #33	@ 0x21
 8002b52:	d002      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x23a>
 8002b54:	7bbb      	ldrb	r3, [r7, #14]
 8002b56:	2b29      	cmp	r3, #41	@ 0x29
 8002b58:	d125      	bne.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	09db      	lsrs	r3, r3, #7
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00f      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x266>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	0a9b      	lsrs	r3, r3, #10
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x266>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 ff00 	bl	8003984 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b84:	e039      	b.n	8002bfa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d033      	beq.n	8002bfa <HAL_I2C_EV_IRQHandler+0x2da>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	0a5b      	lsrs	r3, r3, #9
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d02d      	beq.n	8002bfa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 ff2d 	bl	80039fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba4:	e029      	b.n	8002bfa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00f      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	0a9b      	lsrs	r3, r3, #10
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 ff38 	bl	8003a40 <I2C_SlaveReceive_RXNE>
 8002bd0:	e014      	b.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	0a5b      	lsrs	r3, r3, #9
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 ff66 	bl	8003abc <I2C_SlaveReceive_BTF>
 8002bf0:	e004      	b.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bfa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	@ 0x28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c24:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00e      	beq.n	8002c50 <HAL_I2C_ER_IRQHandler+0x4e>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_I2C_ER_IRQHandler+0x78>
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002c78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	0a9b      	lsrs	r3, r3, #10
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d03f      	beq.n	8002d06 <HAL_I2C_ER_IRQHandler+0x104>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d039      	beq.n	8002d06 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002c92:	7efb      	ldrb	r3, [r7, #27]
 8002c94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002cac:	7ebb      	ldrb	r3, [r7, #26]
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d112      	bne.n	8002cd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b21      	cmp	r3, #33	@ 0x21
 8002cbc:	d008      	beq.n	8002cd0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b29      	cmp	r3, #41	@ 0x29
 8002cc2:	d005      	beq.n	8002cd0 <HAL_I2C_ER_IRQHandler+0xce>
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	2b28      	cmp	r3, #40	@ 0x28
 8002cc8:	d106      	bne.n	8002cd8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b21      	cmp	r3, #33	@ 0x21
 8002cce:	d103      	bne.n	8002cd8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f001 f88f 	bl	8003df4 <I2C_Slave_AF>
 8002cd6:	e016      	b.n	8002d06 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ce0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cea:	7efb      	ldrb	r3, [r7, #27]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d002      	beq.n	8002cf6 <HAL_I2C_ER_IRQHandler+0xf4>
 8002cf0:	7efb      	ldrb	r3, [r7, #27]
 8002cf2:	2b40      	cmp	r3, #64	@ 0x40
 8002cf4:	d107      	bne.n	8002d06 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d04:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	0adb      	lsrs	r3, r3, #11
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00e      	beq.n	8002d30 <HAL_I2C_ER_IRQHandler+0x12e>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002d2e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f001 f8ca 	bl	8003edc <I2C_ITError>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3728      	adds	r7, #40	@ 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
 8002dac:	4613      	mov	r3, r2
 8002dae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d150      	bne.n	8002f04 <I2C_MasterTransmit_TXE+0xc8>
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b21      	cmp	r3, #33	@ 0x21
 8002e66:	d14d      	bne.n	8002f04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d01d      	beq.n	8002eaa <I2C_MasterTransmit_TXE+0x6e>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d01a      	beq.n	8002eaa <I2C_MasterTransmit_TXE+0x6e>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e7a:	d016      	beq.n	8002eaa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2211      	movs	r2, #17
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ff54 	bl	8002d50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ea8:	e060      	b.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eb8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d107      	bne.n	8002ef4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff6f 	bl	8002dd0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ef2:	e03b      	b.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff27 	bl	8002d50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f02:	e033      	b.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b21      	cmp	r3, #33	@ 0x21
 8002f08:	d005      	beq.n	8002f16 <I2C_MasterTransmit_TXE+0xda>
 8002f0a:	7bbb      	ldrb	r3, [r7, #14]
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d12d      	bne.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b22      	cmp	r3, #34	@ 0x22
 8002f14:	d12a      	bne.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f30:	e01c      	b.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b40      	cmp	r3, #64	@ 0x40
 8002f3c:	d103      	bne.n	8002f46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f88e 	bl	8003060 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f44:	e012      	b.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f6a:	e7ff      	b.n	8002f6c <I2C_MasterTransmit_TXE+0x130>
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	@ 0x21
 8002f8c:	d164      	bne.n	8003058 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d012      	beq.n	8002fbe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002fbc:	e04c      	b.n	8003058 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d01d      	beq.n	8003000 <I2C_MasterTransmit_BTF+0x8c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d01a      	beq.n	8003000 <I2C_MasterTransmit_BTF+0x8c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fd0:	d016      	beq.n	8003000 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fe0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2211      	movs	r2, #17
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fea9 	bl	8002d50 <HAL_I2C_MasterTxCpltCallback>
}
 8002ffe:	e02b      	b.n	8003058 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800300e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d107      	bne.n	800304a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fec4 	bl	8002dd0 <HAL_I2C_MemTxCpltCallback>
}
 8003048:	e006      	b.n	8003058 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fe7c 	bl	8002d50 <HAL_I2C_MasterTxCpltCallback>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11d      	bne.n	80030b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10b      	bne.n	8003098 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003084:	b2da      	uxtb	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003090:	1c9a      	adds	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003096:	e077      	b.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309c:	b29b      	uxth	r3, r3
 800309e:	121b      	asrs	r3, r3, #8
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030b2:	e069      	b.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10b      	bne.n	80030d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030d2:	e059      	b.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d152      	bne.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b22      	cmp	r3, #34	@ 0x22
 80030e0:	d10d      	bne.n	80030fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030fc:	e044      	b.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b21      	cmp	r3, #33	@ 0x21
 800310c:	d112      	bne.n	8003134 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003132:	e029      	b.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d124      	bne.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b21      	cmp	r3, #33	@ 0x21
 8003142:	d121      	bne.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003152:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003162:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fe28 	bl	8002dd0 <HAL_I2C_MemTxCpltCallback>
}
 8003180:	e002      	b.n	8003188 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fa8a 	bl	800269c <I2C_Flush_DR>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b22      	cmp	r3, #34	@ 0x22
 80031a2:	f040 80b9 	bne.w	8003318 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d921      	bls.n	80031fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	f040 8096 	bne.w	8003318 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031fc:	e08c      	b.n	8003318 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	2b02      	cmp	r3, #2
 8003204:	d07f      	beq.n	8003306 <I2C_MasterReceive_RXNE+0x176>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d002      	beq.n	8003212 <I2C_MasterReceive_RXNE+0x82>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d179      	bne.n	8003306 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f001 f958 	bl	80044c8 <I2C_WaitOnSTOPRequestThroughIT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d14c      	bne.n	80032b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800322c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800323c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d10a      	bne.n	800328e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fdac 	bl	8002de4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800328c:	e044      	b.n	8003318 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d002      	beq.n	80032a2 <I2C_MasterReceive_RXNE+0x112>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d103      	bne.n	80032aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a8:	e002      	b.n	80032b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2212      	movs	r2, #18
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fd57 	bl	8002d64 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032b6:	e02f      	b.n	8003318 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fd7a 	bl	8002df8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003304:	e008      	b.n	8003318 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003314:	605a      	str	r2, [r3, #4]
}
 8003316:	e7ff      	b.n	8003318 <I2C_MasterReceive_RXNE+0x188>
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b04      	cmp	r3, #4
 8003336:	d11b      	bne.n	8003370 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003346:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800336e:	e0c4      	b.n	80034fa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d129      	bne.n	80033ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003388:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d00a      	beq.n	80033a6 <I2C_MasterReceive_BTF+0x86>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d007      	beq.n	80033a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033cc:	e095      	b.n	80034fa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d17d      	bne.n	80034d4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d002      	beq.n	80033e4 <I2C_MasterReceive_BTF+0xc4>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d108      	bne.n	80033f6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e016      	b.n	8003424 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d002      	beq.n	8003402 <I2C_MasterReceive_BTF+0xe2>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d108      	bne.n	8003414 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e007      	b.n	8003424 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003422:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800347e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b40      	cmp	r3, #64	@ 0x40
 8003492:	d10a      	bne.n	80034aa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fc9e 	bl	8002de4 <HAL_I2C_MemRxCpltCallback>
}
 80034a8:	e027      	b.n	80034fa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d002      	beq.n	80034be <I2C_MasterReceive_BTF+0x19e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d103      	bne.n	80034c6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c4:	e002      	b.n	80034cc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2212      	movs	r2, #18
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fc49 	bl	8002d64 <HAL_I2C_MasterRxCpltCallback>
}
 80034d2:	e012      	b.n	80034fa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b40      	cmp	r3, #64	@ 0x40
 8003514:	d117      	bne.n	8003546 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800352e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003530:	e067      	b.n	8003602 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]
}
 8003544:	e05d      	b.n	8003602 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800354e:	d133      	bne.n	80035b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b21      	cmp	r3, #33	@ 0x21
 800355a:	d109      	bne.n	8003570 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	e008      	b.n	8003582 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <I2C_Master_SB+0x92>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d032      	beq.n	8003602 <I2C_Master_SB+0x100>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02d      	beq.n	8003602 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b4:	605a      	str	r2, [r3, #4]
}
 80035b6:	e024      	b.n	8003602 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	11db      	asrs	r3, r3, #7
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 0306 	and.w	r3, r3, #6
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f063 030f 	orn	r3, r3, #15
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]
}
 80035dc:	e011      	b.n	8003602 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10d      	bne.n	8003602 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	11db      	asrs	r3, r3, #7
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0306 	and.w	r3, r3, #6
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f063 030e 	orn	r3, r3, #14
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	b2da      	uxtb	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <I2C_Master_ADD10+0x26>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d108      	bne.n	8003646 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00c      	beq.n	8003656 <I2C_Master_ADD10+0x48>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003654:	605a      	str	r2, [r3, #4]
  }
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b091      	sub	sp, #68	@ 0x44
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003670:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b22      	cmp	r3, #34	@ 0x22
 800368a:	f040 8169 	bne.w	8003960 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <I2C_Master_ADDR+0x54>
 8003696:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d10b      	bne.n	80036b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	e160      	b.n	8003978 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11d      	bne.n	80036fa <I2C_Master_ADDR+0x98>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80036c6:	d118      	bne.n	80036fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80036f8:	e13e      	b.n	8003978 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d113      	bne.n	800372c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003704:	2300      	movs	r3, #0
 8003706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e115      	b.n	8003958 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	f040 808a 	bne.w	800384c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800373e:	d137      	bne.n	80037b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800375e:	d113      	bne.n	8003788 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	e0e7      	b.n	8003958 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e0d3      	b.n	8003958 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d02e      	beq.n	8003814 <I2C_Master_ADDR+0x1b2>
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d02b      	beq.n	8003814 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037be:	2b12      	cmp	r3, #18
 80037c0:	d102      	bne.n	80037c8 <I2C_Master_ADDR+0x166>
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d125      	bne.n	8003814 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d00e      	beq.n	80037ec <I2C_Master_ADDR+0x18a>
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d00b      	beq.n	80037ec <I2C_Master_ADDR+0x18a>
 80037d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d008      	beq.n	80037ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	e0a1      	b.n	8003958 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003822:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e085      	b.n	8003958 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d14d      	bne.n	80038f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	2b04      	cmp	r3, #4
 800385a:	d016      	beq.n	800388a <I2C_Master_ADDR+0x228>
 800385c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385e:	2b02      	cmp	r3, #2
 8003860:	d013      	beq.n	800388a <I2C_Master_ADDR+0x228>
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	2b10      	cmp	r3, #16
 8003866:	d010      	beq.n	800388a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003876:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e007      	b.n	800389a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003898:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a8:	d117      	bne.n	80038da <I2C_Master_ADDR+0x278>
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038b0:	d00b      	beq.n	80038ca <I2C_Master_ADDR+0x268>
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d008      	beq.n	80038ca <I2C_Master_ADDR+0x268>
 80038b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d005      	beq.n	80038ca <I2C_Master_ADDR+0x268>
 80038be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d002      	beq.n	80038ca <I2C_Master_ADDR+0x268>
 80038c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d107      	bne.n	80038da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	e032      	b.n	8003958 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003900:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800390c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003910:	d117      	bne.n	8003942 <I2C_Master_ADDR+0x2e0>
 8003912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003914:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003918:	d00b      	beq.n	8003932 <I2C_Master_ADDR+0x2d0>
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	2b01      	cmp	r3, #1
 800391e:	d008      	beq.n	8003932 <I2C_Master_ADDR+0x2d0>
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	2b08      	cmp	r3, #8
 8003924:	d005      	beq.n	8003932 <I2C_Master_ADDR+0x2d0>
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	2b10      	cmp	r3, #16
 800392a:	d002      	beq.n	8003932 <I2C_Master_ADDR+0x2d0>
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	2b20      	cmp	r3, #32
 8003930:	d107      	bne.n	8003942 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003940:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800395e:	e00b      	b.n	8003978 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	e7ff      	b.n	8003978 <I2C_Master_ADDR+0x316>
 8003978:	bf00      	nop
 800397a:	3744      	adds	r7, #68	@ 0x44
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003992:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d02b      	beq.n	80039f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d114      	bne.n	80039f6 <I2C_SlaveTransmit_TXE+0x72>
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b29      	cmp	r3, #41	@ 0x29
 80039d0:	d111      	bne.n	80039f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2221      	movs	r2, #33	@ 0x21
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2228      	movs	r2, #40	@ 0x28
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff f9c1 	bl	8002d78 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02c      	beq.n	8003ab4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d114      	bne.n	8003ab4 <I2C_SlaveReceive_RXNE+0x74>
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8e:	d111      	bne.n	8003ab4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2222      	movs	r2, #34	@ 0x22
 8003aa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2228      	movs	r2, #40	@ 0x28
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff f96c 	bl	8002d8c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d012      	beq.n	8003af4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b1a:	2b28      	cmp	r3, #40	@ 0x28
 8003b1c:	d127      	bne.n	8003b6e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	09db      	lsrs	r3, r3, #7
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	81bb      	strh	r3, [r7, #12]
 8003b50:	e002      	b.n	8003b58 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b60:	89ba      	ldrh	r2, [r7, #12]
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff f91a 	bl	8002da0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b6c:	e00e      	b.n	8003b8c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf0:	d172      	bne.n	8003cd8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b22      	cmp	r3, #34	@ 0x22
 8003bf6:	d002      	beq.n	8003bfe <I2C_Slave_STOPF+0x6a>
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bfc:	d135      	bne.n	8003c6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f043 0204 	orr.w	r2, r3, #4
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe f96e 	bl	8001f18 <HAL_DMA_GetState>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d049      	beq.n	8003cd6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c46:	4a69      	ldr	r2, [pc, #420]	@ (8003dec <I2C_Slave_STOPF+0x258>)
 8003c48:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd ff62 	bl	8001b18 <HAL_DMA_Abort_IT>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03d      	beq.n	8003cd6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c64:	4610      	mov	r0, r2
 8003c66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c68:	e035      	b.n	8003cd6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe f938 	bl	8001f18 <HAL_DMA_GetState>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d014      	beq.n	8003cd8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8003dec <I2C_Slave_STOPF+0x258>)
 8003cb4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd ff2c 	bl	8001b18 <HAL_DMA_Abort_IT>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4798      	blx	r3
 8003cd4:	e000      	b.n	8003cd8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d03e      	beq.n	8003d60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d112      	bne.n	8003d16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d112      	bne.n	8003d4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f043 0204 	orr.w	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8b7 	bl	8003edc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d6e:	e039      	b.n	8003de4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d74:	d109      	bne.n	8003d8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2228      	movs	r2, #40	@ 0x28
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff f801 	bl	8002d8c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b28      	cmp	r3, #40	@ 0x28
 8003d94:	d111      	bne.n	8003dba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a15      	ldr	r2, [pc, #84]	@ (8003df0 <I2C_Slave_STOPF+0x25c>)
 8003d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff f802 	bl	8002dbc <HAL_I2C_ListenCpltCallback>
}
 8003db8:	e014      	b.n	8003de4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	2b22      	cmp	r3, #34	@ 0x22
 8003dc0:	d002      	beq.n	8003dc8 <I2C_Slave_STOPF+0x234>
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b22      	cmp	r3, #34	@ 0x22
 8003dc6:	d10d      	bne.n	8003de4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fe ffd4 	bl	8002d8c <HAL_I2C_SlaveRxCpltCallback>
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08004379 	.word	0x08004379
 8003df0:	ffff0000 	.word	0xffff0000

08003df4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d002      	beq.n	8003e16 <I2C_Slave_AF+0x22>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d129      	bne.n	8003e6a <I2C_Slave_AF+0x76>
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b28      	cmp	r3, #40	@ 0x28
 8003e1a:	d126      	bne.n	8003e6a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed8 <I2C_Slave_AF+0xe4>)
 8003e20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e30:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e3a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe ffaa 	bl	8002dbc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e68:	e031      	b.n	8003ece <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b21      	cmp	r3, #33	@ 0x21
 8003e6e:	d129      	bne.n	8003ec4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a19      	ldr	r2, [pc, #100]	@ (8003ed8 <I2C_Slave_AF+0xe4>)
 8003e74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2221      	movs	r2, #33	@ 0x21
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e9a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fe fbf0 	bl	800269c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fe ff5b 	bl	8002d78 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ec2:	e004      	b.n	8003ece <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ecc:	615a      	str	r2, [r3, #20]
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d002      	beq.n	8003f00 <I2C_ITError+0x24>
 8003efa:	7bbb      	ldrb	r3, [r7, #14]
 8003efc:	2b40      	cmp	r3, #64	@ 0x40
 8003efe:	d10a      	bne.n	8003f16 <I2C_ITError+0x3a>
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b22      	cmp	r3, #34	@ 0x22
 8003f04:	d107      	bne.n	8003f16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f1c:	2b28      	cmp	r3, #40	@ 0x28
 8003f1e:	d107      	bne.n	8003f30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2228      	movs	r2, #40	@ 0x28
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f2e:	e015      	b.n	8003f5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3e:	d00a      	beq.n	8003f56 <I2C_ITError+0x7a>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b60      	cmp	r3, #96	@ 0x60
 8003f44:	d007      	beq.n	8003f56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6a:	d162      	bne.n	8004032 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d020      	beq.n	8003fcc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8004138 <I2C_ITError+0x25c>)
 8003f90:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fdbe 	bl	8001b18 <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8089 	beq.w	80040b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4798      	blx	r3
 8003fca:	e074      	b.n	80040b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	4a59      	ldr	r2, [pc, #356]	@ (8004138 <I2C_ITError+0x25c>)
 8003fd2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fd fd9d 	bl	8001b18 <HAL_DMA_Abort_IT>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d068      	beq.n	80040b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fee:	2b40      	cmp	r3, #64	@ 0x40
 8003ff0:	d10b      	bne.n	800400a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800402c:	4610      	mov	r0, r2
 800402e:	4798      	blx	r3
 8004030:	e041      	b.n	80040b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b60      	cmp	r3, #96	@ 0x60
 800403c:	d125      	bne.n	800408a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004056:	2b40      	cmp	r3, #64	@ 0x40
 8004058:	d10b      	bne.n	8004072 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fec2 	bl	8002e0c <HAL_I2C_AbortCpltCallback>
 8004088:	e015      	b.n	80040b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d10b      	bne.n	80040b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fe fea1 	bl	8002df8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10e      	bne.n	80040e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d113      	bne.n	8004130 <I2C_ITError+0x254>
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b28      	cmp	r3, #40	@ 0x28
 800410c:	d110      	bne.n	8004130 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a0a      	ldr	r2, [pc, #40]	@ (800413c <I2C_ITError+0x260>)
 8004112:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fe46 	bl	8002dbc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	08004379 	.word	0x08004379
 800413c:	ffff0000 	.word	0xffff0000

08004140 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004172:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004180:	2200      	movs	r2, #0
 8004182:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800419a:	2b21      	cmp	r3, #33	@ 0x21
 800419c:	d007      	beq.n	80041ae <I2C_DMAXferCplt+0x6e>
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80041a4:	2b22      	cmp	r3, #34	@ 0x22
 80041a6:	d131      	bne.n	800420c <I2C_DMAXferCplt+0xcc>
 80041a8:	7cbb      	ldrb	r3, [r7, #18]
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d12e      	bne.n	800420c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b29      	cmp	r3, #41	@ 0x29
 80041c8:	d10a      	bne.n	80041e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2221      	movs	r2, #33	@ 0x21
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2228      	movs	r2, #40	@ 0x28
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f7fe fdcd 	bl	8002d78 <HAL_I2C_SlaveTxCpltCallback>
 80041de:	e00c      	b.n	80041fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041e4:	d109      	bne.n	80041fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2222      	movs	r2, #34	@ 0x22
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2228      	movs	r2, #40	@ 0x28
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	f7fe fdc9 	bl	8002d8c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004208:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800420a:	e074      	b.n	80042f6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d06e      	beq.n	80042f6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d107      	bne.n	8004232 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004230:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004240:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004248:	d009      	beq.n	800425e <I2C_DMAXferCplt+0x11e>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d006      	beq.n	800425e <I2C_DMAXferCplt+0x11e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004256:	d002      	beq.n	800425e <I2C_DMAXferCplt+0x11e>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b20      	cmp	r3, #32
 800425c:	d107      	bne.n	800426e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800427c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800428c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800429c:	6978      	ldr	r0, [r7, #20]
 800429e:	f7fe fdab 	bl	8002df8 <HAL_I2C_ErrorCallback>
}
 80042a2:	e028      	b.n	80042f6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b40      	cmp	r3, #64	@ 0x40
 80042b6:	d10a      	bne.n	80042ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7fe fd8c 	bl	8002de4 <HAL_I2C_MemRxCpltCallback>
}
 80042cc:	e013      	b.n	80042f6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d002      	beq.n	80042e2 <I2C_DMAXferCplt+0x1a2>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d103      	bne.n	80042ea <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042e8:	e002      	b.n	80042f0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2212      	movs	r2, #18
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f7fe fd37 	bl	8002d64 <HAL_I2C_MasterRxCpltCallback>
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004318:	2200      	movs	r2, #0
 800431a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	2200      	movs	r2, #0
 800432a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd fe01 	bl	8001f34 <HAL_DMA_GetError>
 8004332:	4603      	mov	r3, r0
 8004334:	2b02      	cmp	r3, #2
 8004336:	d01b      	beq.n	8004370 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004346:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f043 0210 	orr.w	r2, r3, #16
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7fe fd44 	bl	8002df8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004390:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004392:	4b4b      	ldr	r3, [pc, #300]	@ (80044c0 <I2C_DMAAbort+0x148>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	4a4a      	ldr	r2, [pc, #296]	@ (80044c4 <I2C_DMAAbort+0x14c>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0a1a      	lsrs	r2, r3, #8
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00da      	lsls	r2, r3, #3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80043be:	e00a      	b.n	80043d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d4:	d0ea      	beq.n	80043ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	2200      	movs	r2, #0
 80043e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	2200      	movs	r2, #0
 80043f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004404:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004418:	2200      	movs	r2, #0
 800441a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	2200      	movs	r2, #0
 800442a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b60      	cmp	r3, #96	@ 0x60
 8004446:	d10e      	bne.n	8004466 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800445e:	6978      	ldr	r0, [r7, #20]
 8004460:	f7fe fcd4 	bl	8002e0c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004464:	e027      	b.n	80044b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800446c:	2b28      	cmp	r3, #40	@ 0x28
 800446e:	d117      	bne.n	80044a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800448e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2228      	movs	r2, #40	@ 0x28
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800449e:	e007      	b.n	80044b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80044b0:	6978      	ldr	r0, [r7, #20]
 80044b2:	f7fe fca1 	bl	8002df8 <HAL_I2C_ErrorCallback>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000008 	.word	0x20000008
 80044c4:	14f8b589 	.word	0x14f8b589

080044c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044d4:	4b13      	ldr	r3, [pc, #76]	@ (8004524 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	4a13      	ldr	r2, [pc, #76]	@ (8004528 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	0a1a      	lsrs	r2, r3, #8
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e008      	b.n	8004518 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004514:	d0e9      	beq.n	80044ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000008 	.word	0x20000008
 8004528:	14f8b589 	.word	0x14f8b589

0800452c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800453c:	d103      	bne.n	8004546 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004544:	e007      	b.n	8004556 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800454e:	d102      	bne.n	8004556 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2208      	movs	r2, #8
 8004554:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e267      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004582:	4b88      	ldr	r3, [pc, #544]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b85      	ldr	r3, [pc, #532]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004596:	2b08      	cmp	r3, #8
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b7e      	ldr	r3, [pc, #504]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e242      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b76      	ldr	r3, [pc, #472]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6f      	ldr	r2, [pc, #444]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b6d      	ldr	r3, [pc, #436]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6c      	ldr	r2, [pc, #432]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b69      	ldr	r3, [pc, #420]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a68      	ldr	r2, [pc, #416]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b66      	ldr	r3, [pc, #408]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a65      	ldr	r2, [pc, #404]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fd f858 	bl	80016d0 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fd f854 	bl	80016d0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e207      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b5b      	ldr	r3, [pc, #364]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd f844 	bl	80016d0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fd f840 	bl	80016d0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1f3      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b51      	ldr	r3, [pc, #324]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800467a:	4b4a      	ldr	r3, [pc, #296]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11c      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b44      	ldr	r3, [pc, #272]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	4b41      	ldr	r3, [pc, #260]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e1c7      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b3b      	ldr	r3, [pc, #236]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4937      	ldr	r1, [pc, #220]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	e03a      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d4:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_RCC_OscConfig+0x244>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fc fff9 	bl	80016d0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fc fff5 	bl	80016d0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1a8      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b28      	ldr	r3, [pc, #160]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4925      	ldr	r1, [pc, #148]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCC_OscConfig+0x244>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fc ffd8 	bl	80016d0 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fc ffd4 	bl	80016d0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e187      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1b      	ldr	r3, [pc, #108]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <HAL_RCC_OscConfig+0x248>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fc ffb8 	bl	80016d0 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004764:	f7fc ffb4 	bl	80016d0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e167      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <HAL_RCC_OscConfig+0x248>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fc ffa1 	bl	80016d0 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	e00e      	b.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7fc ff9d 	bl	80016d0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d907      	bls.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e150      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	42470000 	.word	0x42470000
 80047ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b88      	ldr	r3, [pc, #544]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ea      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8097 	beq.w	80048f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b81      	ldr	r3, [pc, #516]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b7d      	ldr	r3, [pc, #500]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	4a7c      	ldr	r2, [pc, #496]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ea:	4b7a      	ldr	r3, [pc, #488]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b77      	ldr	r3, [pc, #476]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b74      	ldr	r3, [pc, #464]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a73      	ldr	r2, [pc, #460]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fc ff5d 	bl	80016d0 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fc ff59 	bl	80016d0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e10c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x2ea>
 8004840:	4b64      	ldr	r3, [pc, #400]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004844:	4a63      	ldr	r2, [pc, #396]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	@ 0x70
 800484c:	e01c      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x30c>
 8004856:	4b5f      	ldr	r3, [pc, #380]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	4a5e      	ldr	r2, [pc, #376]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	@ 0x70
 8004862:	4b5c      	ldr	r3, [pc, #368]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004866:	4a5b      	ldr	r2, [pc, #364]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6713      	str	r3, [r2, #112]	@ 0x70
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 8004870:	4b58      	ldr	r3, [pc, #352]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004874:	4a57      	ldr	r2, [pc, #348]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6713      	str	r3, [r2, #112]	@ 0x70
 800487c:	4b55      	ldr	r3, [pc, #340]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	4a54      	ldr	r2, [pc, #336]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fc ff1e 	bl	80016d0 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fc ff1a 	bl	80016d0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0cb      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ee      	beq.n	8004898 <HAL_RCC_OscConfig+0x334>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fc ff08 	bl	80016d0 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fc ff04 	bl	80016d0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b5      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ee      	bne.n	80048c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	4a38      	ldr	r2, [pc, #224]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a1 	beq.w	8004a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004902:	4b34      	ldr	r3, [pc, #208]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b08      	cmp	r3, #8
 800490c:	d05c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d141      	bne.n	800499a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fc fed8 	bl	80016d0 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fc fed4 	bl	80016d0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e087      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	491b      	ldr	r1, [pc, #108]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fc fead 	bl	80016d0 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497a:	f7fc fea9 	bl	80016d0 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e05c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498c:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x416>
 8004998:	e054      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fc fe96 	bl	80016d0 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc fe92 	bl	80016d0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e045      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x444>
 80049c6:	e03d      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e038      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d028      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d121      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d111      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cc      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b68      	ldr	r3, [pc, #416]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d90c      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b65      	ldr	r3, [pc, #404]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0b8      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa8:	4b59      	ldr	r3, [pc, #356]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a58      	ldr	r2, [pc, #352]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac0:	4b53      	ldr	r3, [pc, #332]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b50      	ldr	r3, [pc, #320]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	494d      	ldr	r1, [pc, #308]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b47      	ldr	r3, [pc, #284]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b3f      	ldr	r3, [pc, #252]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e067      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4934      	ldr	r1, [pc, #208]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fc fdc4 	bl	80016d0 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fc fdc0 	bl	80016d0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b22      	ldr	r3, [pc, #136]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4916      	ldr	r1, [pc, #88]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490e      	ldr	r1, [pc, #56]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bda:	f000 f821 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490a      	ldr	r1, [pc, #40]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc fd24 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	08006660 	.word	0x08006660
 8004c18:	20000008 	.word	0x20000008
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b090      	sub	sp, #64	@ 0x40
 8004c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	4b59      	ldr	r3, [pc, #356]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d00d      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x40>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	f200 80a1 	bhi.w	8004d8c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c52:	e09b      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b53      	ldr	r3, [pc, #332]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c58:	e09b      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c5a:	4b53      	ldr	r3, [pc, #332]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c5e:	e098      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c60:	4b4f      	ldr	r3, [pc, #316]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c76:	4b4a      	ldr	r3, [pc, #296]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4b47      	ldr	r3, [pc, #284]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c8c:	fb03 f201 	mul.w	r2, r3, r1
 8004c90:	2300      	movs	r3, #0
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	4a43      	ldr	r2, [pc, #268]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c9a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca6:	4413      	add	r3, r2
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cac:	2200      	movs	r2, #0
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	61fa      	str	r2, [r7, #28]
 8004cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004cba:	f7fb fa8d 	bl	80001d8 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cc6:	e053      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b35      	ldr	r3, [pc, #212]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	2200      	movs	r2, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	617a      	str	r2, [r7, #20]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cda:	f04f 0b00 	mov.w	fp, #0
 8004cde:	4652      	mov	r2, sl
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf0:	0150      	lsls	r0, r2, #5
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cfa:	eb63 090b 	sbc.w	r9, r3, fp
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d12:	ebb2 0408 	subs.w	r4, r2, r8
 8004d16:	eb63 0509 	sbc.w	r5, r3, r9
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	00eb      	lsls	r3, r5, #3
 8004d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d28:	00e2      	lsls	r2, r4, #3
 8004d2a:	4614      	mov	r4, r2
 8004d2c:	461d      	mov	r5, r3
 8004d2e:	eb14 030a 	adds.w	r3, r4, sl
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	eb45 030b 	adc.w	r3, r5, fp
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d46:	4629      	mov	r1, r5
 8004d48:	028b      	lsls	r3, r1, #10
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d50:	4621      	mov	r1, r4
 8004d52:	028a      	lsls	r2, r1, #10
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d64:	f7fb fa38 	bl	80001d8 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004d80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3740      	adds	r7, #64	@ 0x40
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	00f42400 	.word	0x00f42400
 8004da8:	017d7840 	.word	0x017d7840

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db0:	4b03      	ldr	r3, [pc, #12]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000008 	.word	0x20000008

08004dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dc8:	f7ff fff0 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0a9b      	lsrs	r3, r3, #10
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	@ (8004de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	08006670 	.word	0x08006670

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e041      	b.n	8004e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fa1e 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 fb7e 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e03c      	b.n	8004f1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f2c <HAL_TIM_Base_Start+0xa0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x5c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x5c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_TIM_Base_Start+0xa4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x5c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a19      	ldr	r2, [pc, #100]	@ (8004f34 <HAL_TIM_Base_Start+0xa8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x5c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <HAL_TIM_Base_Start+0xac>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIM_Base_Start+0x5c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <HAL_TIM_Base_Start+0xb0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d111      	bne.n	8004f0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d010      	beq.n	8004f1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	e007      	b.n	8004f1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e041      	b.n	8004fd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc f8f6 	bl	8001158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 fad4 	bl	800552c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <HAL_TIM_PWM_Start+0x24>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e022      	b.n	800504a <HAL_TIM_PWM_Start+0x6a>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d109      	bne.n	800501e <HAL_TIM_PWM_Start+0x3e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e015      	b.n	800504a <HAL_TIM_PWM_Start+0x6a>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d109      	bne.n	8005038 <HAL_TIM_PWM_Start+0x58>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e008      	b.n	800504a <HAL_TIM_PWM_Start+0x6a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e068      	b.n	8005124 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0x82>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005060:	e013      	b.n	800508a <HAL_TIM_PWM_Start+0xaa>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0x92>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005070:	e00b      	b.n	800508a <HAL_TIM_PWM_Start+0xaa>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0xa2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005080:	e003      	b.n	800508a <HAL_TIM_PWM_Start+0xaa>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2201      	movs	r2, #1
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fc5c 	bl	8005950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a23      	ldr	r2, [pc, #140]	@ (800512c <HAL_TIM_PWM_Start+0x14c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <HAL_TIM_PWM_Start+0x14c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_TIM_PWM_Start+0x10e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c4:	d013      	beq.n	80050ee <HAL_TIM_PWM_Start+0x10e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <HAL_TIM_PWM_Start+0x150>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_TIM_PWM_Start+0x10e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <HAL_TIM_PWM_Start+0x154>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_TIM_PWM_Start+0x10e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_TIM_PWM_Start+0x158>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIM_PWM_Start+0x10e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a14      	ldr	r2, [pc, #80]	@ (800513c <HAL_TIM_PWM_Start+0x15c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d111      	bne.n	8005112 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d010      	beq.n	8005122 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	e007      	b.n	8005122 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40014000 	.word	0x40014000

08005140 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e097      	b.n	8005284 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fc f835 	bl	80011d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005184:	f023 0307 	bic.w	r3, r3, #7
 8005188:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f000 f9c9 	bl	800552c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	4313      	orrs	r3, r2
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80051e0:	f023 030c 	bic.w	r3, r3, #12
 80051e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	4313      	orrs	r3, r2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	011a      	lsls	r2, r3, #4
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	031b      	lsls	r3, r3, #12
 8005210:	4313      	orrs	r3, r2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4313      	orrs	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800529c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d110      	bne.n	80052de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d102      	bne.n	80052c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c2:	7b7b      	ldrb	r3, [r7, #13]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e069      	b.n	80053a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052dc:	e031      	b.n	8005342 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d110      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e4:	7bbb      	ldrb	r3, [r7, #14]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d102      	bne.n	80052f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ea:	7b3b      	ldrb	r3, [r7, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e055      	b.n	80053a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005304:	e01d      	b.n	8005342 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d108      	bne.n	800531e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005312:	7b7b      	ldrb	r3, [r7, #13]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005318:	7b3b      	ldrb	r3, [r7, #12]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d001      	beq.n	8005322 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e03e      	b.n	80053a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_TIM_Encoder_Start+0xc4>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d008      	beq.n	8005360 <HAL_TIM_Encoder_Start+0xd4>
 800534e:	e00f      	b.n	8005370 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2201      	movs	r2, #1
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f000 faf9 	bl	8005950 <TIM_CCxChannelCmd>
      break;
 800535e:	e016      	b.n	800538e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	2104      	movs	r1, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f000 faf1 	bl	8005950 <TIM_CCxChannelCmd>
      break;
 800536e:	e00e      	b.n	800538e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fae9 	bl	8005950 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	2104      	movs	r1, #4
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fae2 	bl	8005950 <TIM_CCxChannelCmd>
      break;
 800538c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0ae      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	f200 809f 	bhi.w	8005514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053d6:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005515 	.word	0x08005515
 80053e4:	08005515 	.word	0x08005515
 80053e8:	08005515 	.word	0x08005515
 80053ec:	08005451 	.word	0x08005451
 80053f0:	08005515 	.word	0x08005515
 80053f4:	08005515 	.word	0x08005515
 80053f8:	08005515 	.word	0x08005515
 80053fc:	08005493 	.word	0x08005493
 8005400:	08005515 	.word	0x08005515
 8005404:	08005515 	.word	0x08005515
 8005408:	08005515 	.word	0x08005515
 800540c:	080054d3 	.word	0x080054d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f90e 	bl	8005638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0204 	bic.w	r2, r2, #4
 800543a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	619a      	str	r2, [r3, #24]
      break;
 800544e:	e064      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f954 	bl	8005704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	619a      	str	r2, [r3, #24]
      break;
 8005490:	e043      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f99f 	bl	80057dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0208 	orr.w	r2, r2, #8
 80054ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0204 	bic.w	r2, r2, #4
 80054bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
      break;
 80054d0:	e023      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f9e9 	bl	80058b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	021a      	lsls	r2, r3, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	61da      	str	r2, [r3, #28]
      break;
 8005512:	e002      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
      break;
 8005518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a37      	ldr	r2, [pc, #220]	@ (800561c <TIM_Base_SetConfig+0xf0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00f      	beq.n	8005564 <TIM_Base_SetConfig+0x38>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800554a:	d00b      	beq.n	8005564 <TIM_Base_SetConfig+0x38>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a34      	ldr	r2, [pc, #208]	@ (8005620 <TIM_Base_SetConfig+0xf4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_Base_SetConfig+0x38>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a33      	ldr	r2, [pc, #204]	@ (8005624 <TIM_Base_SetConfig+0xf8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0x38>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a32      	ldr	r2, [pc, #200]	@ (8005628 <TIM_Base_SetConfig+0xfc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d108      	bne.n	8005576 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a28      	ldr	r2, [pc, #160]	@ (800561c <TIM_Base_SetConfig+0xf0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01b      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005584:	d017      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a25      	ldr	r2, [pc, #148]	@ (8005620 <TIM_Base_SetConfig+0xf4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <TIM_Base_SetConfig+0xf8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00f      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a23      	ldr	r2, [pc, #140]	@ (8005628 <TIM_Base_SetConfig+0xfc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a22      	ldr	r2, [pc, #136]	@ (800562c <TIM_Base_SetConfig+0x100>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a21      	ldr	r2, [pc, #132]	@ (8005630 <TIM_Base_SetConfig+0x104>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_Base_SetConfig+0x8a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a20      	ldr	r2, [pc, #128]	@ (8005634 <TIM_Base_SetConfig+0x108>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d108      	bne.n	80055c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a0c      	ldr	r2, [pc, #48]	@ (800561c <TIM_Base_SetConfig+0xf0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d103      	bne.n	80055f6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0201 	bic.w	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0302 	bic.w	r3, r3, #2
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a1c      	ldr	r2, [pc, #112]	@ (8005700 <TIM_OC1_SetConfig+0xc8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d10c      	bne.n	80056ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f023 0308 	bic.w	r3, r3, #8
 800569a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 0304 	bic.w	r3, r3, #4
 80056ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a13      	ldr	r2, [pc, #76]	@ (8005700 <TIM_OC1_SetConfig+0xc8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d111      	bne.n	80056da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40010000 	.word	0x40010000

08005704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 0210 	bic.w	r2, r3, #16
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a1e      	ldr	r2, [pc, #120]	@ (80057d8 <TIM_OC2_SetConfig+0xd4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10d      	bne.n	8005780 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800577e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <TIM_OC2_SetConfig+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d113      	bne.n	80057b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800578e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000

080057dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1d      	ldr	r2, [pc, #116]	@ (80058ac <TIM_OC3_SetConfig+0xd0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10d      	bne.n	8005856 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <TIM_OC3_SetConfig+0xd0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d113      	bne.n	8005886 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	621a      	str	r2, [r3, #32]
}
 80058a0:	bf00      	nop
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	40010000 	.word	0x40010000

080058b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a10      	ldr	r2, [pc, #64]	@ (800594c <TIM_OC4_SetConfig+0x9c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d109      	bne.n	8005924 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000

08005950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2201      	movs	r2, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1a      	ldr	r2, [r3, #32]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <_ZdlPvj>:
 800599a:	f000 b800 	b.w	800599e <_ZdlPv>

0800599e <_ZdlPv>:
 800599e:	f000 bd75 	b.w	800648c <free>
	...

080059a4 <cosf>:
 80059a4:	ee10 3a10 	vmov	r3, s0
 80059a8:	b507      	push	{r0, r1, r2, lr}
 80059aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005a24 <cosf+0x80>)
 80059ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d806      	bhi.n	80059c2 <cosf+0x1e>
 80059b4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005a28 <cosf+0x84>
 80059b8:	b003      	add	sp, #12
 80059ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80059be:	f000 b87b 	b.w	8005ab8 <__kernel_cosf>
 80059c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80059c6:	d304      	bcc.n	80059d2 <cosf+0x2e>
 80059c8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80059cc:	b003      	add	sp, #12
 80059ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80059d2:	4668      	mov	r0, sp
 80059d4:	f000 f910 	bl	8005bf8 <__ieee754_rem_pio2f>
 80059d8:	f000 0003 	and.w	r0, r0, #3
 80059dc:	2801      	cmp	r0, #1
 80059de:	d009      	beq.n	80059f4 <cosf+0x50>
 80059e0:	2802      	cmp	r0, #2
 80059e2:	d010      	beq.n	8005a06 <cosf+0x62>
 80059e4:	b9b0      	cbnz	r0, 8005a14 <cosf+0x70>
 80059e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80059ea:	ed9d 0a00 	vldr	s0, [sp]
 80059ee:	f000 f863 	bl	8005ab8 <__kernel_cosf>
 80059f2:	e7eb      	b.n	80059cc <cosf+0x28>
 80059f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80059f8:	ed9d 0a00 	vldr	s0, [sp]
 80059fc:	f000 f8b4 	bl	8005b68 <__kernel_sinf>
 8005a00:	eeb1 0a40 	vneg.f32	s0, s0
 8005a04:	e7e2      	b.n	80059cc <cosf+0x28>
 8005a06:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a0a:	ed9d 0a00 	vldr	s0, [sp]
 8005a0e:	f000 f853 	bl	8005ab8 <__kernel_cosf>
 8005a12:	e7f5      	b.n	8005a00 <cosf+0x5c>
 8005a14:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a18:	ed9d 0a00 	vldr	s0, [sp]
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	f000 f8a3 	bl	8005b68 <__kernel_sinf>
 8005a22:	e7d3      	b.n	80059cc <cosf+0x28>
 8005a24:	3f490fd8 	.word	0x3f490fd8
 8005a28:	00000000 	.word	0x00000000

08005a2c <sinf>:
 8005a2c:	ee10 3a10 	vmov	r3, s0
 8005a30:	b507      	push	{r0, r1, r2, lr}
 8005a32:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab0 <sinf+0x84>)
 8005a34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d807      	bhi.n	8005a4c <sinf+0x20>
 8005a3c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005ab4 <sinf+0x88>
 8005a40:	2000      	movs	r0, #0
 8005a42:	b003      	add	sp, #12
 8005a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a48:	f000 b88e 	b.w	8005b68 <__kernel_sinf>
 8005a4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005a50:	d304      	bcc.n	8005a5c <sinf+0x30>
 8005a52:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005a56:	b003      	add	sp, #12
 8005a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a5c:	4668      	mov	r0, sp
 8005a5e:	f000 f8cb 	bl	8005bf8 <__ieee754_rem_pio2f>
 8005a62:	f000 0003 	and.w	r0, r0, #3
 8005a66:	2801      	cmp	r0, #1
 8005a68:	d00a      	beq.n	8005a80 <sinf+0x54>
 8005a6a:	2802      	cmp	r0, #2
 8005a6c:	d00f      	beq.n	8005a8e <sinf+0x62>
 8005a6e:	b9c0      	cbnz	r0, 8005aa2 <sinf+0x76>
 8005a70:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a74:	ed9d 0a00 	vldr	s0, [sp]
 8005a78:	2001      	movs	r0, #1
 8005a7a:	f000 f875 	bl	8005b68 <__kernel_sinf>
 8005a7e:	e7ea      	b.n	8005a56 <sinf+0x2a>
 8005a80:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a84:	ed9d 0a00 	vldr	s0, [sp]
 8005a88:	f000 f816 	bl	8005ab8 <__kernel_cosf>
 8005a8c:	e7e3      	b.n	8005a56 <sinf+0x2a>
 8005a8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a92:	ed9d 0a00 	vldr	s0, [sp]
 8005a96:	2001      	movs	r0, #1
 8005a98:	f000 f866 	bl	8005b68 <__kernel_sinf>
 8005a9c:	eeb1 0a40 	vneg.f32	s0, s0
 8005aa0:	e7d9      	b.n	8005a56 <sinf+0x2a>
 8005aa2:	eddd 0a01 	vldr	s1, [sp, #4]
 8005aa6:	ed9d 0a00 	vldr	s0, [sp]
 8005aaa:	f000 f805 	bl	8005ab8 <__kernel_cosf>
 8005aae:	e7f5      	b.n	8005a9c <sinf+0x70>
 8005ab0:	3f490fd8 	.word	0x3f490fd8
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <__kernel_cosf>:
 8005ab8:	ee10 3a10 	vmov	r3, s0
 8005abc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ac0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005ac4:	eef0 6a40 	vmov.f32	s13, s0
 8005ac8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005acc:	d204      	bcs.n	8005ad8 <__kernel_cosf+0x20>
 8005ace:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005ad2:	ee17 2a90 	vmov	r2, s15
 8005ad6:	b342      	cbz	r2, 8005b2a <__kernel_cosf+0x72>
 8005ad8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005adc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005b48 <__kernel_cosf+0x90>
 8005ae0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005b4c <__kernel_cosf+0x94>
 8005ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b50 <__kernel_cosf+0x98>)
 8005ae6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005aea:	4293      	cmp	r3, r2
 8005aec:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005b54 <__kernel_cosf+0x9c>
 8005af0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005af4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005b58 <__kernel_cosf+0xa0>
 8005af8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005afc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005b5c <__kernel_cosf+0xa4>
 8005b00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005b04:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005b60 <__kernel_cosf+0xa8>
 8005b08:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005b0c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005b10:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005b14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005b18:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b20:	d804      	bhi.n	8005b2c <__kernel_cosf+0x74>
 8005b22:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005b26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005b2a:	4770      	bx	lr
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b64 <__kernel_cosf+0xac>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	bf9a      	itte	ls
 8005b32:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005b36:	ee07 3a10 	vmovls	s14, r3
 8005b3a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005b3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b46:	e7ec      	b.n	8005b22 <__kernel_cosf+0x6a>
 8005b48:	ad47d74e 	.word	0xad47d74e
 8005b4c:	310f74f6 	.word	0x310f74f6
 8005b50:	3e999999 	.word	0x3e999999
 8005b54:	b493f27c 	.word	0xb493f27c
 8005b58:	37d00d01 	.word	0x37d00d01
 8005b5c:	bab60b61 	.word	0xbab60b61
 8005b60:	3d2aaaab 	.word	0x3d2aaaab
 8005b64:	3f480000 	.word	0x3f480000

08005b68 <__kernel_sinf>:
 8005b68:	ee10 3a10 	vmov	r3, s0
 8005b6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b70:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005b74:	d204      	bcs.n	8005b80 <__kernel_sinf+0x18>
 8005b76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005b7a:	ee17 3a90 	vmov	r3, s15
 8005b7e:	b35b      	cbz	r3, 8005bd8 <__kernel_sinf+0x70>
 8005b80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005b84:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005bdc <__kernel_sinf+0x74>
 8005b88:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005be0 <__kernel_sinf+0x78>
 8005b8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005b90:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005be4 <__kernel_sinf+0x7c>
 8005b94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005b98:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005be8 <__kernel_sinf+0x80>
 8005b9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005ba0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005bec <__kernel_sinf+0x84>
 8005ba4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005ba8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005bac:	b930      	cbnz	r0, 8005bbc <__kernel_sinf+0x54>
 8005bae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005bf0 <__kernel_sinf+0x88>
 8005bb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005bb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005bba:	4770      	bx	lr
 8005bbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005bc0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005bc4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005bc8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005bcc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005bf4 <__kernel_sinf+0x8c>
 8005bd0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005bd4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	2f2ec9d3 	.word	0x2f2ec9d3
 8005be0:	b2d72f34 	.word	0xb2d72f34
 8005be4:	3638ef1b 	.word	0x3638ef1b
 8005be8:	b9500d01 	.word	0xb9500d01
 8005bec:	3c088889 	.word	0x3c088889
 8005bf0:	be2aaaab 	.word	0xbe2aaaab
 8005bf4:	3e2aaaab 	.word	0x3e2aaaab

08005bf8 <__ieee754_rem_pio2f>:
 8005bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfa:	ee10 6a10 	vmov	r6, s0
 8005bfe:	4b88      	ldr	r3, [pc, #544]	@ (8005e20 <__ieee754_rem_pio2f+0x228>)
 8005c00:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005c04:	429d      	cmp	r5, r3
 8005c06:	b087      	sub	sp, #28
 8005c08:	4604      	mov	r4, r0
 8005c0a:	d805      	bhi.n	8005c18 <__ieee754_rem_pio2f+0x20>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	ed80 0a00 	vstr	s0, [r0]
 8005c12:	6043      	str	r3, [r0, #4]
 8005c14:	2000      	movs	r0, #0
 8005c16:	e022      	b.n	8005c5e <__ieee754_rem_pio2f+0x66>
 8005c18:	4b82      	ldr	r3, [pc, #520]	@ (8005e24 <__ieee754_rem_pio2f+0x22c>)
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	d83a      	bhi.n	8005c94 <__ieee754_rem_pio2f+0x9c>
 8005c1e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005c22:	2e00      	cmp	r6, #0
 8005c24:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005e28 <__ieee754_rem_pio2f+0x230>
 8005c28:	4a80      	ldr	r2, [pc, #512]	@ (8005e2c <__ieee754_rem_pio2f+0x234>)
 8005c2a:	f023 030f 	bic.w	r3, r3, #15
 8005c2e:	dd18      	ble.n	8005c62 <__ieee754_rem_pio2f+0x6a>
 8005c30:	4293      	cmp	r3, r2
 8005c32:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005c36:	bf09      	itett	eq
 8005c38:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005e30 <__ieee754_rem_pio2f+0x238>
 8005c3c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005e34 <__ieee754_rem_pio2f+0x23c>
 8005c40:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005e38 <__ieee754_rem_pio2f+0x240>
 8005c44:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005c48:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005c4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c50:	ed80 7a00 	vstr	s14, [r0]
 8005c54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c58:	edc0 7a01 	vstr	s15, [r0, #4]
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	b007      	add	sp, #28
 8005c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c62:	4293      	cmp	r3, r2
 8005c64:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005c68:	bf09      	itett	eq
 8005c6a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005e30 <__ieee754_rem_pio2f+0x238>
 8005c6e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005e34 <__ieee754_rem_pio2f+0x23c>
 8005c72:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005e38 <__ieee754_rem_pio2f+0x240>
 8005c76:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005c7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c82:	ed80 7a00 	vstr	s14, [r0]
 8005c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8a:	edc0 7a01 	vstr	s15, [r0, #4]
 8005c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c92:	e7e4      	b.n	8005c5e <__ieee754_rem_pio2f+0x66>
 8005c94:	4b69      	ldr	r3, [pc, #420]	@ (8005e3c <__ieee754_rem_pio2f+0x244>)
 8005c96:	429d      	cmp	r5, r3
 8005c98:	d873      	bhi.n	8005d82 <__ieee754_rem_pio2f+0x18a>
 8005c9a:	f000 f8dd 	bl	8005e58 <fabsf>
 8005c9e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005e40 <__ieee754_rem_pio2f+0x248>
 8005ca2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005ca6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb2:	ee17 0a90 	vmov	r0, s15
 8005cb6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005e28 <__ieee754_rem_pio2f+0x230>
 8005cba:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005cbe:	281f      	cmp	r0, #31
 8005cc0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005e34 <__ieee754_rem_pio2f+0x23c>
 8005cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc8:	eeb1 6a47 	vneg.f32	s12, s14
 8005ccc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005cd0:	ee16 1a90 	vmov	r1, s13
 8005cd4:	dc09      	bgt.n	8005cea <__ieee754_rem_pio2f+0xf2>
 8005cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8005e44 <__ieee754_rem_pio2f+0x24c>)
 8005cd8:	1e47      	subs	r7, r0, #1
 8005cda:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005cde:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005ce2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d107      	bne.n	8005cfa <__ieee754_rem_pio2f+0x102>
 8005cea:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005cee:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005cf2:	2a08      	cmp	r2, #8
 8005cf4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005cf8:	dc14      	bgt.n	8005d24 <__ieee754_rem_pio2f+0x12c>
 8005cfa:	6021      	str	r1, [r4, #0]
 8005cfc:	ed94 7a00 	vldr	s14, [r4]
 8005d00:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d0a:	ed84 0a01 	vstr	s0, [r4, #4]
 8005d0e:	daa6      	bge.n	8005c5e <__ieee754_rem_pio2f+0x66>
 8005d10:	eeb1 7a47 	vneg.f32	s14, s14
 8005d14:	eeb1 0a40 	vneg.f32	s0, s0
 8005d18:	ed84 7a00 	vstr	s14, [r4]
 8005d1c:	ed84 0a01 	vstr	s0, [r4, #4]
 8005d20:	4240      	negs	r0, r0
 8005d22:	e79c      	b.n	8005c5e <__ieee754_rem_pio2f+0x66>
 8005d24:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005e30 <__ieee754_rem_pio2f+0x238>
 8005d28:	eef0 6a40 	vmov.f32	s13, s0
 8005d2c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005d30:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005d34:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005d38:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e38 <__ieee754_rem_pio2f+0x240>
 8005d3c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005d40:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005d44:	ee15 2a90 	vmov	r2, s11
 8005d48:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005d4c:	1a5b      	subs	r3, r3, r1
 8005d4e:	2b19      	cmp	r3, #25
 8005d50:	dc04      	bgt.n	8005d5c <__ieee754_rem_pio2f+0x164>
 8005d52:	edc4 5a00 	vstr	s11, [r4]
 8005d56:	eeb0 0a66 	vmov.f32	s0, s13
 8005d5a:	e7cf      	b.n	8005cfc <__ieee754_rem_pio2f+0x104>
 8005d5c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005e48 <__ieee754_rem_pio2f+0x250>
 8005d60:	eeb0 0a66 	vmov.f32	s0, s13
 8005d64:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005d68:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005d6c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005e4c <__ieee754_rem_pio2f+0x254>
 8005d70:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005d74:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005d78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005d7c:	ed84 7a00 	vstr	s14, [r4]
 8005d80:	e7bc      	b.n	8005cfc <__ieee754_rem_pio2f+0x104>
 8005d82:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8005d86:	d306      	bcc.n	8005d96 <__ieee754_rem_pio2f+0x19e>
 8005d88:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005d8c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005d90:	edc0 7a00 	vstr	s15, [r0]
 8005d94:	e73e      	b.n	8005c14 <__ieee754_rem_pio2f+0x1c>
 8005d96:	15ea      	asrs	r2, r5, #23
 8005d98:	3a86      	subs	r2, #134	@ 0x86
 8005d9a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005da6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005e50 <__ieee754_rem_pio2f+0x258>
 8005daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005db2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005db6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005dbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dc6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005dca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	edcd 7a05 	vstr	s15, [sp, #20]
 8005dda:	d11e      	bne.n	8005e1a <__ieee754_rem_pio2f+0x222>
 8005ddc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de4:	bf0c      	ite	eq
 8005de6:	2301      	moveq	r3, #1
 8005de8:	2302      	movne	r3, #2
 8005dea:	491a      	ldr	r1, [pc, #104]	@ (8005e54 <__ieee754_rem_pio2f+0x25c>)
 8005dec:	9101      	str	r1, [sp, #4]
 8005dee:	2102      	movs	r1, #2
 8005df0:	9100      	str	r1, [sp, #0]
 8005df2:	a803      	add	r0, sp, #12
 8005df4:	4621      	mov	r1, r4
 8005df6:	f000 f837 	bl	8005e68 <__kernel_rem_pio2f>
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	f6bf af2f 	bge.w	8005c5e <__ieee754_rem_pio2f+0x66>
 8005e00:	edd4 7a00 	vldr	s15, [r4]
 8005e04:	eef1 7a67 	vneg.f32	s15, s15
 8005e08:	edc4 7a00 	vstr	s15, [r4]
 8005e0c:	edd4 7a01 	vldr	s15, [r4, #4]
 8005e10:	eef1 7a67 	vneg.f32	s15, s15
 8005e14:	edc4 7a01 	vstr	s15, [r4, #4]
 8005e18:	e782      	b.n	8005d20 <__ieee754_rem_pio2f+0x128>
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e7e5      	b.n	8005dea <__ieee754_rem_pio2f+0x1f2>
 8005e1e:	bf00      	nop
 8005e20:	3f490fd8 	.word	0x3f490fd8
 8005e24:	4016cbe3 	.word	0x4016cbe3
 8005e28:	3fc90f80 	.word	0x3fc90f80
 8005e2c:	3fc90fd0 	.word	0x3fc90fd0
 8005e30:	37354400 	.word	0x37354400
 8005e34:	37354443 	.word	0x37354443
 8005e38:	2e85a308 	.word	0x2e85a308
 8005e3c:	43490f80 	.word	0x43490f80
 8005e40:	3f22f984 	.word	0x3f22f984
 8005e44:	08006680 	.word	0x08006680
 8005e48:	2e85a300 	.word	0x2e85a300
 8005e4c:	248d3132 	.word	0x248d3132
 8005e50:	43800000 	.word	0x43800000
 8005e54:	08006700 	.word	0x08006700

08005e58 <fabsf>:
 8005e58:	ee10 3a10 	vmov	r3, s0
 8005e5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e60:	ee00 3a10 	vmov	s0, r3
 8005e64:	4770      	bx	lr
	...

08005e68 <__kernel_rem_pio2f>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	ed2d 8b04 	vpush	{d8-d9}
 8005e70:	b0d9      	sub	sp, #356	@ 0x164
 8005e72:	4690      	mov	r8, r2
 8005e74:	9001      	str	r0, [sp, #4]
 8005e76:	4ab6      	ldr	r2, [pc, #728]	@ (8006150 <__kernel_rem_pio2f+0x2e8>)
 8005e78:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005e7a:	f118 0f04 	cmn.w	r8, #4
 8005e7e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005e82:	460f      	mov	r7, r1
 8005e84:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005e88:	db26      	blt.n	8005ed8 <__kernel_rem_pio2f+0x70>
 8005e8a:	f1b8 0203 	subs.w	r2, r8, #3
 8005e8e:	bf48      	it	mi
 8005e90:	f108 0204 	addmi.w	r2, r8, #4
 8005e94:	10d2      	asrs	r2, r2, #3
 8005e96:	1c55      	adds	r5, r2, #1
 8005e98:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005e9a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 8005e9e:	00e8      	lsls	r0, r5, #3
 8005ea0:	eba2 060b 	sub.w	r6, r2, fp
 8005ea4:	9002      	str	r0, [sp, #8]
 8005ea6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005eaa:	eb0a 0c0b 	add.w	ip, sl, fp
 8005eae:	ac1c      	add	r4, sp, #112	@ 0x70
 8005eb0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	4560      	cmp	r0, ip
 8005eb8:	dd10      	ble.n	8005edc <__kernel_rem_pio2f+0x74>
 8005eba:	a91c      	add	r1, sp, #112	@ 0x70
 8005ebc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005ec0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	4556      	cmp	r6, sl
 8005ec8:	dc24      	bgt.n	8005f14 <__kernel_rem_pio2f+0xac>
 8005eca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005ece:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 8005ed2:	4684      	mov	ip, r0
 8005ed4:	2400      	movs	r4, #0
 8005ed6:	e016      	b.n	8005f06 <__kernel_rem_pio2f+0x9e>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	e7dc      	b.n	8005e96 <__kernel_rem_pio2f+0x2e>
 8005edc:	42c6      	cmn	r6, r0
 8005ede:	bf5d      	ittte	pl
 8005ee0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8005ee4:	ee07 1a90 	vmovpl	s15, r1
 8005ee8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005eec:	eef0 7a47 	vmovmi.f32	s15, s14
 8005ef0:	ece4 7a01 	vstmia	r4!, {s15}
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	e7de      	b.n	8005eb6 <__kernel_rem_pio2f+0x4e>
 8005ef8:	ecfe 6a01 	vldmia	lr!, {s13}
 8005efc:	ed3c 7a01 	vldmdb	ip!, {s14}
 8005f00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005f04:	3401      	adds	r4, #1
 8005f06:	455c      	cmp	r4, fp
 8005f08:	ddf6      	ble.n	8005ef8 <__kernel_rem_pio2f+0x90>
 8005f0a:	ece9 7a01 	vstmia	r9!, {s15}
 8005f0e:	3601      	adds	r6, #1
 8005f10:	3004      	adds	r0, #4
 8005f12:	e7d8      	b.n	8005ec6 <__kernel_rem_pio2f+0x5e>
 8005f14:	a908      	add	r1, sp, #32
 8005f16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f1a:	9104      	str	r1, [sp, #16]
 8005f1c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005f1e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800615c <__kernel_rem_pio2f+0x2f4>
 8005f22:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8006158 <__kernel_rem_pio2f+0x2f0>
 8005f26:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005f2a:	9203      	str	r2, [sp, #12]
 8005f2c:	4654      	mov	r4, sl
 8005f2e:	00a2      	lsls	r2, r4, #2
 8005f30:	9205      	str	r2, [sp, #20]
 8005f32:	aa58      	add	r2, sp, #352	@ 0x160
 8005f34:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005f38:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005f3c:	a944      	add	r1, sp, #272	@ 0x110
 8005f3e:	aa08      	add	r2, sp, #32
 8005f40:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005f44:	4694      	mov	ip, r2
 8005f46:	4626      	mov	r6, r4
 8005f48:	2e00      	cmp	r6, #0
 8005f4a:	dc4c      	bgt.n	8005fe6 <__kernel_rem_pio2f+0x17e>
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f52:	f000 fa35 	bl	80063c0 <scalbnf>
 8005f56:	eeb0 8a40 	vmov.f32	s16, s0
 8005f5a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005f5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005f62:	f000 f9e9 	bl	8006338 <floorf>
 8005f66:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005f6a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f74:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005f78:	ee17 9a90 	vmov	r9, s15
 8005f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f80:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005f84:	dd41      	ble.n	800600a <__kernel_rem_pio2f+0x1a2>
 8005f86:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005f8a:	a908      	add	r1, sp, #32
 8005f8c:	f1c5 0e08 	rsb	lr, r5, #8
 8005f90:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005f94:	fa46 f00e 	asr.w	r0, r6, lr
 8005f98:	4481      	add	r9, r0
 8005f9a:	fa00 f00e 	lsl.w	r0, r0, lr
 8005f9e:	1a36      	subs	r6, r6, r0
 8005fa0:	f1c5 0007 	rsb	r0, r5, #7
 8005fa4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005fa8:	4106      	asrs	r6, r0
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	dd3c      	ble.n	8006028 <__kernel_rem_pio2f+0x1c0>
 8005fae:	f04f 0e00 	mov.w	lr, #0
 8005fb2:	f109 0901 	add.w	r9, r9, #1
 8005fb6:	4670      	mov	r0, lr
 8005fb8:	4574      	cmp	r4, lr
 8005fba:	dc68      	bgt.n	800608e <__kernel_rem_pio2f+0x226>
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	dd03      	ble.n	8005fc8 <__kernel_rem_pio2f+0x160>
 8005fc0:	2d01      	cmp	r5, #1
 8005fc2:	d074      	beq.n	80060ae <__kernel_rem_pio2f+0x246>
 8005fc4:	2d02      	cmp	r5, #2
 8005fc6:	d07d      	beq.n	80060c4 <__kernel_rem_pio2f+0x25c>
 8005fc8:	2e02      	cmp	r6, #2
 8005fca:	d12d      	bne.n	8006028 <__kernel_rem_pio2f+0x1c0>
 8005fcc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005fd0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005fd4:	b340      	cbz	r0, 8006028 <__kernel_rem_pio2f+0x1c0>
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	9306      	str	r3, [sp, #24]
 8005fda:	f000 f9f1 	bl	80063c0 <scalbnf>
 8005fde:	9b06      	ldr	r3, [sp, #24]
 8005fe0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005fe4:	e020      	b.n	8006028 <__kernel_rem_pio2f+0x1c0>
 8005fe6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005fea:	3e01      	subs	r6, #1
 8005fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005ff8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ffc:	ecac 0a01 	vstmia	ip!, {s0}
 8006000:	ed30 0a01 	vldmdb	r0!, {s0}
 8006004:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006008:	e79e      	b.n	8005f48 <__kernel_rem_pio2f+0xe0>
 800600a:	d105      	bne.n	8006018 <__kernel_rem_pio2f+0x1b0>
 800600c:	1e60      	subs	r0, r4, #1
 800600e:	a908      	add	r1, sp, #32
 8006010:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006014:	11f6      	asrs	r6, r6, #7
 8006016:	e7c8      	b.n	8005faa <__kernel_rem_pio2f+0x142>
 8006018:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800601c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006024:	da31      	bge.n	800608a <__kernel_rem_pio2f+0x222>
 8006026:	2600      	movs	r6, #0
 8006028:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006030:	f040 8098 	bne.w	8006164 <__kernel_rem_pio2f+0x2fc>
 8006034:	1e60      	subs	r0, r4, #1
 8006036:	2200      	movs	r2, #0
 8006038:	4550      	cmp	r0, sl
 800603a:	da4b      	bge.n	80060d4 <__kernel_rem_pio2f+0x26c>
 800603c:	2a00      	cmp	r2, #0
 800603e:	d065      	beq.n	800610c <__kernel_rem_pio2f+0x2a4>
 8006040:	3c01      	subs	r4, #1
 8006042:	ab08      	add	r3, sp, #32
 8006044:	3d08      	subs	r5, #8
 8006046:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f8      	beq.n	8006040 <__kernel_rem_pio2f+0x1d8>
 800604e:	4628      	mov	r0, r5
 8006050:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006054:	f000 f9b4 	bl	80063c0 <scalbnf>
 8006058:	1c63      	adds	r3, r4, #1
 800605a:	aa44      	add	r2, sp, #272	@ 0x110
 800605c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800615c <__kernel_rem_pio2f+0x2f4>
 8006060:	0099      	lsls	r1, r3, #2
 8006062:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006066:	4623      	mov	r3, r4
 8006068:	2b00      	cmp	r3, #0
 800606a:	f280 80a9 	bge.w	80061c0 <__kernel_rem_pio2f+0x358>
 800606e:	4623      	mov	r3, r4
 8006070:	2b00      	cmp	r3, #0
 8006072:	f2c0 80c7 	blt.w	8006204 <__kernel_rem_pio2f+0x39c>
 8006076:	aa44      	add	r2, sp, #272	@ 0x110
 8006078:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800607c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006154 <__kernel_rem_pio2f+0x2ec>
 8006080:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 8006084:	2000      	movs	r0, #0
 8006086:	1ae2      	subs	r2, r4, r3
 8006088:	e0b1      	b.n	80061ee <__kernel_rem_pio2f+0x386>
 800608a:	2602      	movs	r6, #2
 800608c:	e78f      	b.n	8005fae <__kernel_rem_pio2f+0x146>
 800608e:	f852 1b04 	ldr.w	r1, [r2], #4
 8006092:	b948      	cbnz	r0, 80060a8 <__kernel_rem_pio2f+0x240>
 8006094:	b121      	cbz	r1, 80060a0 <__kernel_rem_pio2f+0x238>
 8006096:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800609a:	f842 1c04 	str.w	r1, [r2, #-4]
 800609e:	2101      	movs	r1, #1
 80060a0:	f10e 0e01 	add.w	lr, lr, #1
 80060a4:	4608      	mov	r0, r1
 80060a6:	e787      	b.n	8005fb8 <__kernel_rem_pio2f+0x150>
 80060a8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80060ac:	e7f5      	b.n	800609a <__kernel_rem_pio2f+0x232>
 80060ae:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80060b2:	aa08      	add	r2, sp, #32
 80060b4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80060b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060bc:	a908      	add	r1, sp, #32
 80060be:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80060c2:	e781      	b.n	8005fc8 <__kernel_rem_pio2f+0x160>
 80060c4:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80060c8:	aa08      	add	r2, sp, #32
 80060ca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80060ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80060d2:	e7f3      	b.n	80060bc <__kernel_rem_pio2f+0x254>
 80060d4:	a908      	add	r1, sp, #32
 80060d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80060da:	3801      	subs	r0, #1
 80060dc:	430a      	orrs	r2, r1
 80060de:	e7ab      	b.n	8006038 <__kernel_rem_pio2f+0x1d0>
 80060e0:	3201      	adds	r2, #1
 80060e2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80060e6:	2e00      	cmp	r6, #0
 80060e8:	d0fa      	beq.n	80060e0 <__kernel_rem_pio2f+0x278>
 80060ea:	9905      	ldr	r1, [sp, #20]
 80060ec:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80060f0:	eb0d 0001 	add.w	r0, sp, r1
 80060f4:	18e6      	adds	r6, r4, r3
 80060f6:	a91c      	add	r1, sp, #112	@ 0x70
 80060f8:	f104 0c01 	add.w	ip, r4, #1
 80060fc:	384c      	subs	r0, #76	@ 0x4c
 80060fe:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006102:	4422      	add	r2, r4
 8006104:	4562      	cmp	r2, ip
 8006106:	da04      	bge.n	8006112 <__kernel_rem_pio2f+0x2aa>
 8006108:	4614      	mov	r4, r2
 800610a:	e710      	b.n	8005f2e <__kernel_rem_pio2f+0xc6>
 800610c:	9804      	ldr	r0, [sp, #16]
 800610e:	2201      	movs	r2, #1
 8006110:	e7e7      	b.n	80060e2 <__kernel_rem_pio2f+0x27a>
 8006112:	9903      	ldr	r1, [sp, #12]
 8006114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006118:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	ee07 1a90 	vmov	s15, r1
 8006122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006126:	2400      	movs	r4, #0
 8006128:	ece6 7a01 	vstmia	r6!, {s15}
 800612c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 8006130:	46b1      	mov	r9, r6
 8006132:	455c      	cmp	r4, fp
 8006134:	dd04      	ble.n	8006140 <__kernel_rem_pio2f+0x2d8>
 8006136:	ece0 7a01 	vstmia	r0!, {s15}
 800613a:	f10c 0c01 	add.w	ip, ip, #1
 800613e:	e7e1      	b.n	8006104 <__kernel_rem_pio2f+0x29c>
 8006140:	ecfe 6a01 	vldmia	lr!, {s13}
 8006144:	ed39 7a01 	vldmdb	r9!, {s14}
 8006148:	3401      	adds	r4, #1
 800614a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800614e:	e7f0      	b.n	8006132 <__kernel_rem_pio2f+0x2ca>
 8006150:	08006a44 	.word	0x08006a44
 8006154:	08006a18 	.word	0x08006a18
 8006158:	43800000 	.word	0x43800000
 800615c:	3b800000 	.word	0x3b800000
 8006160:	00000000 	.word	0x00000000
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	eeb0 0a48 	vmov.f32	s0, s16
 800616a:	eba3 0008 	sub.w	r0, r3, r8
 800616e:	f000 f927 	bl	80063c0 <scalbnf>
 8006172:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006158 <__kernel_rem_pio2f+0x2f0>
 8006176:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	db19      	blt.n	80061b4 <__kernel_rem_pio2f+0x34c>
 8006180:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800615c <__kernel_rem_pio2f+0x2f4>
 8006184:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006188:	aa08      	add	r2, sp, #32
 800618a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800618e:	3508      	adds	r5, #8
 8006190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006194:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80061a0:	ee10 3a10 	vmov	r3, s0
 80061a4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80061a8:	ee17 3a90 	vmov	r3, s15
 80061ac:	3401      	adds	r4, #1
 80061ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80061b2:	e74c      	b.n	800604e <__kernel_rem_pio2f+0x1e6>
 80061b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80061b8:	aa08      	add	r2, sp, #32
 80061ba:	ee10 3a10 	vmov	r3, s0
 80061be:	e7f6      	b.n	80061ae <__kernel_rem_pio2f+0x346>
 80061c0:	a808      	add	r0, sp, #32
 80061c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80061c6:	9001      	str	r0, [sp, #4]
 80061c8:	ee07 0a90 	vmov	s15, r0
 80061cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d0:	3b01      	subs	r3, #1
 80061d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80061d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80061da:	ed62 7a01 	vstmdb	r2!, {s15}
 80061de:	e743      	b.n	8006068 <__kernel_rem_pio2f+0x200>
 80061e0:	ecfc 6a01 	vldmia	ip!, {s13}
 80061e4:	ecb5 7a01 	vldmia	r5!, {s14}
 80061e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80061ec:	3001      	adds	r0, #1
 80061ee:	4550      	cmp	r0, sl
 80061f0:	dc01      	bgt.n	80061f6 <__kernel_rem_pio2f+0x38e>
 80061f2:	4290      	cmp	r0, r2
 80061f4:	ddf4      	ble.n	80061e0 <__kernel_rem_pio2f+0x378>
 80061f6:	a858      	add	r0, sp, #352	@ 0x160
 80061f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061fc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006200:	3b01      	subs	r3, #1
 8006202:	e735      	b.n	8006070 <__kernel_rem_pio2f+0x208>
 8006204:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006206:	2b02      	cmp	r3, #2
 8006208:	dc09      	bgt.n	800621e <__kernel_rem_pio2f+0x3b6>
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc27      	bgt.n	800625e <__kernel_rem_pio2f+0x3f6>
 800620e:	d040      	beq.n	8006292 <__kernel_rem_pio2f+0x42a>
 8006210:	f009 0007 	and.w	r0, r9, #7
 8006214:	b059      	add	sp, #356	@ 0x164
 8006216:	ecbd 8b04 	vpop	{d8-d9}
 800621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006220:	2b03      	cmp	r3, #3
 8006222:	d1f5      	bne.n	8006210 <__kernel_rem_pio2f+0x3a8>
 8006224:	aa30      	add	r2, sp, #192	@ 0xc0
 8006226:	1f0b      	subs	r3, r1, #4
 8006228:	4413      	add	r3, r2
 800622a:	461a      	mov	r2, r3
 800622c:	4620      	mov	r0, r4
 800622e:	2800      	cmp	r0, #0
 8006230:	dc50      	bgt.n	80062d4 <__kernel_rem_pio2f+0x46c>
 8006232:	4622      	mov	r2, r4
 8006234:	2a01      	cmp	r2, #1
 8006236:	dc5d      	bgt.n	80062f4 <__kernel_rem_pio2f+0x48c>
 8006238:	ab30      	add	r3, sp, #192	@ 0xc0
 800623a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 800623e:	440b      	add	r3, r1
 8006240:	2c01      	cmp	r4, #1
 8006242:	dc67      	bgt.n	8006314 <__kernel_rem_pio2f+0x4ac>
 8006244:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006248:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800624c:	2e00      	cmp	r6, #0
 800624e:	d167      	bne.n	8006320 <__kernel_rem_pio2f+0x4b8>
 8006250:	edc7 6a00 	vstr	s13, [r7]
 8006254:	ed87 7a01 	vstr	s14, [r7, #4]
 8006258:	edc7 7a02 	vstr	s15, [r7, #8]
 800625c:	e7d8      	b.n	8006210 <__kernel_rem_pio2f+0x3a8>
 800625e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006260:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 8006264:	440b      	add	r3, r1
 8006266:	4622      	mov	r2, r4
 8006268:	2a00      	cmp	r2, #0
 800626a:	da24      	bge.n	80062b6 <__kernel_rem_pio2f+0x44e>
 800626c:	b34e      	cbz	r6, 80062c2 <__kernel_rem_pio2f+0x45a>
 800626e:	eef1 7a47 	vneg.f32	s15, s14
 8006272:	edc7 7a00 	vstr	s15, [r7]
 8006276:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800627a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800627e:	aa31      	add	r2, sp, #196	@ 0xc4
 8006280:	2301      	movs	r3, #1
 8006282:	429c      	cmp	r4, r3
 8006284:	da20      	bge.n	80062c8 <__kernel_rem_pio2f+0x460>
 8006286:	b10e      	cbz	r6, 800628c <__kernel_rem_pio2f+0x424>
 8006288:	eef1 7a67 	vneg.f32	s15, s15
 800628c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006290:	e7be      	b.n	8006210 <__kernel_rem_pio2f+0x3a8>
 8006292:	ab30      	add	r3, sp, #192	@ 0xc0
 8006294:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8006160 <__kernel_rem_pio2f+0x2f8>
 8006298:	440b      	add	r3, r1
 800629a:	2c00      	cmp	r4, #0
 800629c:	da05      	bge.n	80062aa <__kernel_rem_pio2f+0x442>
 800629e:	b10e      	cbz	r6, 80062a4 <__kernel_rem_pio2f+0x43c>
 80062a0:	eef1 7a67 	vneg.f32	s15, s15
 80062a4:	edc7 7a00 	vstr	s15, [r7]
 80062a8:	e7b2      	b.n	8006210 <__kernel_rem_pio2f+0x3a8>
 80062aa:	ed33 7a01 	vldmdb	r3!, {s14}
 80062ae:	3c01      	subs	r4, #1
 80062b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062b4:	e7f1      	b.n	800629a <__kernel_rem_pio2f+0x432>
 80062b6:	ed73 7a01 	vldmdb	r3!, {s15}
 80062ba:	3a01      	subs	r2, #1
 80062bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062c0:	e7d2      	b.n	8006268 <__kernel_rem_pio2f+0x400>
 80062c2:	eef0 7a47 	vmov.f32	s15, s14
 80062c6:	e7d4      	b.n	8006272 <__kernel_rem_pio2f+0x40a>
 80062c8:	ecb2 7a01 	vldmia	r2!, {s14}
 80062cc:	3301      	adds	r3, #1
 80062ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062d2:	e7d6      	b.n	8006282 <__kernel_rem_pio2f+0x41a>
 80062d4:	ed72 7a01 	vldmdb	r2!, {s15}
 80062d8:	edd2 6a01 	vldr	s13, [r2, #4]
 80062dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80062e0:	3801      	subs	r0, #1
 80062e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062e6:	ed82 7a00 	vstr	s14, [r2]
 80062ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ee:	edc2 7a01 	vstr	s15, [r2, #4]
 80062f2:	e79c      	b.n	800622e <__kernel_rem_pio2f+0x3c6>
 80062f4:	ed73 7a01 	vldmdb	r3!, {s15}
 80062f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80062fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006300:	3a01      	subs	r2, #1
 8006302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006306:	ed83 7a00 	vstr	s14, [r3]
 800630a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006312:	e78f      	b.n	8006234 <__kernel_rem_pio2f+0x3cc>
 8006314:	ed33 7a01 	vldmdb	r3!, {s14}
 8006318:	3c01      	subs	r4, #1
 800631a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800631e:	e78f      	b.n	8006240 <__kernel_rem_pio2f+0x3d8>
 8006320:	eef1 6a66 	vneg.f32	s13, s13
 8006324:	eeb1 7a47 	vneg.f32	s14, s14
 8006328:	edc7 6a00 	vstr	s13, [r7]
 800632c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006330:	eef1 7a67 	vneg.f32	s15, s15
 8006334:	e790      	b.n	8006258 <__kernel_rem_pio2f+0x3f0>
 8006336:	bf00      	nop

08006338 <floorf>:
 8006338:	ee10 3a10 	vmov	r3, s0
 800633c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006340:	3a7f      	subs	r2, #127	@ 0x7f
 8006342:	2a16      	cmp	r2, #22
 8006344:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006348:	dc2b      	bgt.n	80063a2 <floorf+0x6a>
 800634a:	2a00      	cmp	r2, #0
 800634c:	da12      	bge.n	8006374 <floorf+0x3c>
 800634e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80063b4 <floorf+0x7c>
 8006352:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006356:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635e:	dd06      	ble.n	800636e <floorf+0x36>
 8006360:	2b00      	cmp	r3, #0
 8006362:	da24      	bge.n	80063ae <floorf+0x76>
 8006364:	2900      	cmp	r1, #0
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <floorf+0x80>)
 8006368:	bf08      	it	eq
 800636a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800636e:	ee00 3a10 	vmov	s0, r3
 8006372:	4770      	bx	lr
 8006374:	4911      	ldr	r1, [pc, #68]	@ (80063bc <floorf+0x84>)
 8006376:	4111      	asrs	r1, r2
 8006378:	420b      	tst	r3, r1
 800637a:	d0fa      	beq.n	8006372 <floorf+0x3a>
 800637c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80063b4 <floorf+0x7c>
 8006380:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006384:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638c:	ddef      	ble.n	800636e <floorf+0x36>
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfbe      	ittt	lt
 8006392:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006396:	fa40 f202 	asrlt.w	r2, r0, r2
 800639a:	189b      	addlt	r3, r3, r2
 800639c:	ea23 0301 	bic.w	r3, r3, r1
 80063a0:	e7e5      	b.n	800636e <floorf+0x36>
 80063a2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80063a6:	d3e4      	bcc.n	8006372 <floorf+0x3a>
 80063a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80063ac:	4770      	bx	lr
 80063ae:	2300      	movs	r3, #0
 80063b0:	e7dd      	b.n	800636e <floorf+0x36>
 80063b2:	bf00      	nop
 80063b4:	7149f2ca 	.word	0x7149f2ca
 80063b8:	bf800000 	.word	0xbf800000
 80063bc:	007fffff 	.word	0x007fffff

080063c0 <scalbnf>:
 80063c0:	ee10 3a10 	vmov	r3, s0
 80063c4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80063c8:	d02b      	beq.n	8006422 <scalbnf+0x62>
 80063ca:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80063ce:	d302      	bcc.n	80063d6 <scalbnf+0x16>
 80063d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80063d4:	4770      	bx	lr
 80063d6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80063da:	d123      	bne.n	8006424 <scalbnf+0x64>
 80063dc:	4b24      	ldr	r3, [pc, #144]	@ (8006470 <scalbnf+0xb0>)
 80063de:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006474 <scalbnf+0xb4>
 80063e2:	4298      	cmp	r0, r3
 80063e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80063e8:	db17      	blt.n	800641a <scalbnf+0x5a>
 80063ea:	ee10 3a10 	vmov	r3, s0
 80063ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80063f2:	3a19      	subs	r2, #25
 80063f4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80063f8:	4288      	cmp	r0, r1
 80063fa:	dd15      	ble.n	8006428 <scalbnf+0x68>
 80063fc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006478 <scalbnf+0xb8>
 8006400:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800647c <scalbnf+0xbc>
 8006404:	ee10 3a10 	vmov	r3, s0
 8006408:	eeb0 7a67 	vmov.f32	s14, s15
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfb8      	it	lt
 8006410:	eef0 7a66 	vmovlt.f32	s15, s13
 8006414:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006418:	4770      	bx	lr
 800641a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006480 <scalbnf+0xc0>
 800641e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006422:	4770      	bx	lr
 8006424:	0dd2      	lsrs	r2, r2, #23
 8006426:	e7e5      	b.n	80063f4 <scalbnf+0x34>
 8006428:	4410      	add	r0, r2
 800642a:	28fe      	cmp	r0, #254	@ 0xfe
 800642c:	dce6      	bgt.n	80063fc <scalbnf+0x3c>
 800642e:	2800      	cmp	r0, #0
 8006430:	dd06      	ble.n	8006440 <scalbnf+0x80>
 8006432:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006436:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800643a:	ee00 3a10 	vmov	s0, r3
 800643e:	4770      	bx	lr
 8006440:	f110 0f16 	cmn.w	r0, #22
 8006444:	da09      	bge.n	800645a <scalbnf+0x9a>
 8006446:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006480 <scalbnf+0xc0>
 800644a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006484 <scalbnf+0xc4>
 800644e:	ee10 3a10 	vmov	r3, s0
 8006452:	eeb0 7a67 	vmov.f32	s14, s15
 8006456:	2b00      	cmp	r3, #0
 8006458:	e7d9      	b.n	800640e <scalbnf+0x4e>
 800645a:	3019      	adds	r0, #25
 800645c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006460:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006464:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006488 <scalbnf+0xc8>
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	e7d7      	b.n	800641e <scalbnf+0x5e>
 800646e:	bf00      	nop
 8006470:	ffff3cb0 	.word	0xffff3cb0
 8006474:	4c000000 	.word	0x4c000000
 8006478:	7149f2ca 	.word	0x7149f2ca
 800647c:	f149f2ca 	.word	0xf149f2ca
 8006480:	0da24260 	.word	0x0da24260
 8006484:	8da24260 	.word	0x8da24260
 8006488:	33000000 	.word	0x33000000

0800648c <free>:
 800648c:	4b02      	ldr	r3, [pc, #8]	@ (8006498 <free+0xc>)
 800648e:	4601      	mov	r1, r0
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f000 b84b 	b.w	800652c <_free_r>
 8006496:	bf00      	nop
 8006498:	20000014 	.word	0x20000014

0800649c <__malloc_lock>:
 800649c:	4801      	ldr	r0, [pc, #4]	@ (80064a4 <__malloc_lock+0x8>)
 800649e:	f000 b835 	b.w	800650c <__retarget_lock_acquire_recursive>
 80064a2:	bf00      	nop
 80064a4:	20000ba0 	.word	0x20000ba0

080064a8 <__malloc_unlock>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__malloc_unlock+0x8>)
 80064aa:	f000 b830 	b.w	800650e <__retarget_lock_release_recursive>
 80064ae:	bf00      	nop
 80064b0:	20000ba0 	.word	0x20000ba0

080064b4 <memset>:
 80064b4:	4402      	add	r2, r0
 80064b6:	4603      	mov	r3, r0
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d100      	bne.n	80064be <memset+0xa>
 80064bc:	4770      	bx	lr
 80064be:	f803 1b01 	strb.w	r1, [r3], #1
 80064c2:	e7f9      	b.n	80064b8 <memset+0x4>

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	@ (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 f872 	bl	80065c0 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08006a58 	.word	0x08006a58
 8006500:	08006a58 	.word	0x08006a58
 8006504:	08006a58 	.word	0x08006a58
 8006508:	08006a60 	.word	0x08006a60

0800650c <__retarget_lock_acquire_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_release_recursive>:
 800650e:	4770      	bx	lr

08006510 <memcpy>:
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006518:	d100      	bne.n	800651c <memcpy+0xc>
 800651a:	4770      	bx	lr
 800651c:	b510      	push	{r4, lr}
 800651e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006526:	4291      	cmp	r1, r2
 8006528:	d1f9      	bne.n	800651e <memcpy+0xe>
 800652a:	bd10      	pop	{r4, pc}

0800652c <_free_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	2900      	cmp	r1, #0
 8006532:	d041      	beq.n	80065b8 <_free_r+0x8c>
 8006534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006538:	1f0c      	subs	r4, r1, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	18e4      	addlt	r4, r4, r3
 8006540:	f7ff ffac 	bl	800649c <__malloc_lock>
 8006544:	4a1d      	ldr	r2, [pc, #116]	@ (80065bc <_free_r+0x90>)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	b933      	cbnz	r3, 8006558 <_free_r+0x2c>
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	6014      	str	r4, [r2, #0]
 800654e:	4628      	mov	r0, r5
 8006550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006554:	f7ff bfa8 	b.w	80064a8 <__malloc_unlock>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d908      	bls.n	800656e <_free_r+0x42>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	bf01      	itttt	eq
 8006564:	6819      	ldreq	r1, [r3, #0]
 8006566:	685b      	ldreq	r3, [r3, #4]
 8006568:	1809      	addeq	r1, r1, r0
 800656a:	6021      	streq	r1, [r4, #0]
 800656c:	e7ed      	b.n	800654a <_free_r+0x1e>
 800656e:	461a      	mov	r2, r3
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b10b      	cbz	r3, 8006578 <_free_r+0x4c>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d9fa      	bls.n	800656e <_free_r+0x42>
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	1850      	adds	r0, r2, r1
 800657c:	42a0      	cmp	r0, r4
 800657e:	d10b      	bne.n	8006598 <_free_r+0x6c>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	4401      	add	r1, r0
 8006584:	1850      	adds	r0, r2, r1
 8006586:	4283      	cmp	r3, r0
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	d1e0      	bne.n	800654e <_free_r+0x22>
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	6053      	str	r3, [r2, #4]
 8006592:	4408      	add	r0, r1
 8006594:	6010      	str	r0, [r2, #0]
 8006596:	e7da      	b.n	800654e <_free_r+0x22>
 8006598:	d902      	bls.n	80065a0 <_free_r+0x74>
 800659a:	230c      	movs	r3, #12
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	e7d6      	b.n	800654e <_free_r+0x22>
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	1821      	adds	r1, r4, r0
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf04      	itt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	bf04      	itt	eq
 80065b0:	1809      	addeq	r1, r1, r0
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	6054      	str	r4, [r2, #4]
 80065b6:	e7ca      	b.n	800654e <_free_r+0x22>
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	20000a64 	.word	0x20000a64

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
